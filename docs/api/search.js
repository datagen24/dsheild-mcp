window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src", "modulename": "src", "kind": "module", "doc": "<p>DShield MCP - Elastic SIEM Integration Package</p>\n\n<p>This package provides a Model Context Protocol (MCP) server that integrates with\nDShield's threat intelligence platform and Elasticsearch for security information\nand event management (SIEM) operations.</p>\n\n<h2 id=\"overview\">Overview</h2>\n\n<p>The DShield MCP package enables AI assistants to interact with security data\nthrough a standardized protocol, providing tools for:</p>\n\n<ul>\n<li>Campaign analysis and threat intelligence</li>\n<li>Elasticsearch querying and data retrieval</li>\n<li>DShield API integration for threat feeds</li>\n<li>Data dictionary management for security events</li>\n<li>Context injection for enhanced AI interactions</li>\n</ul>\n\n<h2 id=\"main-components\">Main Components</h2>\n\n<h3 id=\"core-mcp-server\">Core MCP Server</h3>\n\n<ul>\n<li><code>mcp_server.py</code>: Main MCP server implementation with tool registration</li>\n</ul>\n\n<h3 id=\"data-processing-analysis\">Data Processing &amp; Analysis</h3>\n\n<ul>\n<li><code>campaign_analyzer.py</code>: Campaign analysis and threat intelligence tools</li>\n<li><code>data_processor.py</code>: Data processing, validation, and transformation utilities</li>\n<li><code>data_dictionary.py</code>: Security event data dictionary and schema management</li>\n</ul>\n\n<h3 id=\"external-integrations\">External Integrations</h3>\n\n<ul>\n<li><code>dshield_client.py</code>: DShield API client for threat intelligence</li>\n<li><code>elasticsearch_client.py</code>: Elasticsearch client for SIEM data operations</li>\n</ul>\n\n<h3 id=\"configuration-security\">Configuration &amp; Security</h3>\n\n<ul>\n<li><code>config_loader.py</code>: Configuration management with YAML support</li>\n<li><code>op_secrets.py</code>: 1Password CLI integration for secure secrets management</li>\n<li><code>user_config.py</code>: User configuration and preferences management</li>\n</ul>\n\n<h3 id=\"utilities\">Utilities</h3>\n\n<ul>\n<li><code>context_injector.py</code>: Context injection utilities for AI interactions</li>\n<li><code>models.py</code>: Pydantic models for data validation and serialization</li>\n</ul>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>The package is designed to be used as an MCP server that can be integrated\nwith AI assistants supporting the Model Context Protocol. It provides a\ncomprehensive set of tools for security analysis and threat intelligence.</p>\n\n<h2 id=\"configuration\">Configuration</h2>\n\n<p>Configuration is managed through YAML files with support for 1Password CLI\nintegration for secure secrets management. See <code>config_loader.py</code> for details.</p>\n\n<h2 id=\"security\">Security</h2>\n\n<p>All sensitive information is managed through 1Password CLI integration,\nensuring no secrets are stored in plain text in configuration files.</p>\n"}, {"fullname": "src.campaign_analyzer", "modulename": "src.campaign_analyzer", "kind": "module", "doc": "<p>Campaign Analysis Engine for DShield MCP\nCore campaign correlation and analysis engine for identifying coordinated attack campaigns.</p>\n"}, {"fullname": "src.campaign_analyzer.logger", "modulename": "src.campaign_analyzer", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.campaign_analyzer&#x27;,))&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod", "kind": "class", "doc": "<p>Correlation methods for campaign analysis.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.IP_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.IP_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.IP_CORRELATION: &#x27;ip_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.INFRASTRUCTURE_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.INFRASTRUCTURE_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.INFRASTRUCTURE_CORRELATION: &#x27;infrastructure_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.BEHAVIORAL_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.BEHAVIORAL_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.BEHAVIORAL_CORRELATION: &#x27;behavioral_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.TEMPORAL_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.TEMPORAL_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.TEMPORAL_CORRELATION: &#x27;temporal_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.GEOSPATIAL_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.GEOSPATIAL_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.GEOSPATIAL_CORRELATION: &#x27;geospatial_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.SIGNATURE_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.SIGNATURE_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.SIGNATURE_CORRELATION: &#x27;signature_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.NETWORK_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.NETWORK_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.NETWORK_CORRELATION: &#x27;network_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CampaignConfidence", "modulename": "src.campaign_analyzer", "qualname": "CampaignConfidence", "kind": "class", "doc": "<p>Campaign confidence levels.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.campaign_analyzer.CampaignConfidence.LOW", "modulename": "src.campaign_analyzer", "qualname": "CampaignConfidence.LOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CampaignConfidence.LOW: &#x27;low&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CampaignConfidence.MEDIUM", "modulename": "src.campaign_analyzer", "qualname": "CampaignConfidence.MEDIUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CampaignConfidence.MEDIUM: &#x27;medium&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CampaignConfidence.HIGH", "modulename": "src.campaign_analyzer", "qualname": "CampaignConfidence.HIGH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CampaignConfidence.HIGH: &#x27;high&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CampaignConfidence.CRITICAL", "modulename": "src.campaign_analyzer", "qualname": "CampaignConfidence.CRITICAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CampaignConfidence.CRITICAL: &#x27;critical&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CampaignEvent", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent", "kind": "class", "doc": "<p>Individual event within a campaign.</p>\n"}, {"fullname": "src.campaign_analyzer.CampaignEvent.__init__", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">event_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">source_ip</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">destination_ip</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">event_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">event_category</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ttp_technique</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ttp_tactic</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">user_agent</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">confidence_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "src.campaign_analyzer.CampaignEvent.event_id", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.event_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.campaign_analyzer.CampaignEvent.timestamp", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.campaign_analyzer.CampaignEvent.source_ip", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.source_ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.destination_ip", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.destination_ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.event_type", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.event_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.event_category", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.event_category", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.ttp_technique", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.ttp_technique", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.ttp_tactic", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.ttp_tactic", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.user_agent", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.user_agent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.url", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.payload", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.payload", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.confidence_score", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.confidence_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "src.campaign_analyzer.CampaignEvent.metadata", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship", "kind": "class", "doc": "<p>Relationship between indicators in a campaign.</p>\n"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.__init__", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source_indicator</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">target_indicator</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">relationship_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">confidence_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">evidence</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">first_seen</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">last_seen</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.source_indicator", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.source_indicator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.target_indicator", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.target_indicator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.relationship_type", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.relationship_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.confidence_score", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.confidence_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.evidence", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.evidence", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.first_seen", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.first_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.last_seen", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.Campaign", "modulename": "src.campaign_analyzer", "qualname": "Campaign", "kind": "class", "doc": "<p>Campaign data model.</p>\n"}, {"fullname": "src.campaign_analyzer.Campaign.__init__", "modulename": "src.campaign_analyzer", "qualname": "Campaign.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">campaign_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">confidence_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">attack_vectors</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">related_indicators</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">suspected_actor</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">campaign_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">total_events</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">unique_ips</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">unique_targets</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ttp_techniques</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">ttp_tactics</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">infrastructure_domains</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">geographic_regions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">CampaignEvent</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">relationships</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">IndicatorRelationship</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "src.campaign_analyzer.Campaign.campaign_id", "modulename": "src.campaign_analyzer", "qualname": "Campaign.campaign_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.campaign_analyzer.Campaign.confidence_score", "modulename": "src.campaign_analyzer", "qualname": "Campaign.confidence_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.campaign_analyzer.Campaign.start_time", "modulename": "src.campaign_analyzer", "qualname": "Campaign.start_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.campaign_analyzer.Campaign.end_time", "modulename": "src.campaign_analyzer", "qualname": "Campaign.end_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.campaign_analyzer.Campaign.attack_vectors", "modulename": "src.campaign_analyzer", "qualname": "Campaign.attack_vectors", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.Campaign.related_indicators", "modulename": "src.campaign_analyzer", "qualname": "Campaign.related_indicators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.Campaign.suspected_actor", "modulename": "src.campaign_analyzer", "qualname": "Campaign.suspected_actor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.Campaign.campaign_name", "modulename": "src.campaign_analyzer", "qualname": "Campaign.campaign_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.Campaign.description", "modulename": "src.campaign_analyzer", "qualname": "Campaign.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.Campaign.total_events", "modulename": "src.campaign_analyzer", "qualname": "Campaign.total_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "src.campaign_analyzer.Campaign.unique_ips", "modulename": "src.campaign_analyzer", "qualname": "Campaign.unique_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "src.campaign_analyzer.Campaign.unique_targets", "modulename": "src.campaign_analyzer", "qualname": "Campaign.unique_targets", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "src.campaign_analyzer.Campaign.ttp_techniques", "modulename": "src.campaign_analyzer", "qualname": "Campaign.ttp_techniques", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.Campaign.ttp_tactics", "modulename": "src.campaign_analyzer", "qualname": "Campaign.ttp_tactics", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.Campaign.infrastructure_domains", "modulename": "src.campaign_analyzer", "qualname": "Campaign.infrastructure_domains", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.Campaign.geographic_regions", "modulename": "src.campaign_analyzer", "qualname": "Campaign.geographic_regions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.Campaign.events", "modulename": "src.campaign_analyzer", "qualname": "Campaign.events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.campaign_analyzer.CampaignEvent]"}, {"fullname": "src.campaign_analyzer.Campaign.relationships", "modulename": "src.campaign_analyzer", "qualname": "Campaign.relationships", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.campaign_analyzer.IndicatorRelationship]"}, {"fullname": "src.campaign_analyzer.Campaign.metadata", "modulename": "src.campaign_analyzer", "qualname": "Campaign.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer", "kind": "class", "doc": "<p>Core campaign analysis and correlation engine.</p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.__init__", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">es_client</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">elasticsearch_client</span><span class=\"o\">.</span><span class=\"n\">ElasticsearchClient</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.es_client", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.es_client", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.user_config", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.user_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.correlation_window_minutes", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.correlation_window_minutes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.min_confidence_threshold", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.min_confidence_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.max_campaign_events", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.max_campaign_events", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.enable_geospatial_correlation", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.enable_geospatial_correlation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.enable_performance_logging", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.enable_performance_logging", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.network_correlation_enabled", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.network_correlation_enabled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.behavioral_pattern_threshold", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.behavioral_pattern_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.temporal_clustering_threshold", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.temporal_clustering_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.correlate_events", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.correlate_events", "kind": "function", "doc": "<p>Correlate events based on specified criteria to identify campaigns.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">seed_events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">correlation_criteria</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">CorrelationMethod</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">time_window_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">48</span>,</span><span class=\"param\">\t<span class=\"n\">min_confidence</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">Campaign</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.expand_indicators", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.expand_indicators", "kind": "function", "doc": "<p>Expand IOCs to find related indicators.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">seed_iocs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">expansion_strategy</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;comprehensive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">IndicatorRelationship</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.build_campaign_timeline", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.build_campaign_timeline", "kind": "function", "doc": "<p>Build chronological timeline of campaign events.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">correlated_events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">CampaignEvent</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">timeline_granularity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hourly&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.score_campaign", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.score_campaign", "kind": "function", "doc": "<p>Score campaign based on sophistication and impact.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">campaign_data</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">Campaign</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools", "modulename": "src.campaign_mcp_tools", "kind": "module", "doc": "<p>Campaign Analysis MCP Tools\nMCP tools for campaign analysis and correlation.</p>\n"}, {"fullname": "src.campaign_mcp_tools.logger", "modulename": "src.campaign_mcp_tools", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.campaign_mcp_tools&#x27;,))&gt;"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools", "kind": "class", "doc": "<p>MCP tools for campaign analysis and correlation.</p>\n"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.__init__", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">es_client</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">elasticsearch_client</span><span class=\"o\">.</span><span class=\"n\">ElasticsearchClient</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.es_client", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.es_client", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.campaign_analyzer", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.campaign_analyzer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.user_config", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.user_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.analyze_campaign", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.analyze_campaign", "kind": "function", "doc": "<p>Analyze attack campaigns from seed indicators.</p>\n\n<p>Args:\n    seed_indicators: List of seed indicators (IPs, domains, etc.)\n    time_range_hours: Time range to analyze (default: 168 hours = 1 week)\n    correlation_methods: List of correlation methods to use\n    min_confidence: Minimum confidence threshold for campaign inclusion\n    include_timeline: Whether to include detailed timeline\n    include_relationships: Whether to include indicator relationships</p>\n\n<p>Returns:\n    Campaign analysis results with metadata</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">seed_indicators</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">168</span>,</span><span class=\"param\">\t<span class=\"n\">correlation_methods</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">min_confidence</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span>,</span><span class=\"param\">\t<span class=\"n\">include_timeline</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_relationships</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.expand_campaign_indicators", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.expand_campaign_indicators", "kind": "function", "doc": "<p>Expand IOCs to find related indicators.</p>\n\n<p>Args:\n    campaign_id: Campaign ID to expand\n    expansion_depth: Maximum expansion depth\n    expansion_strategy: Expansion strategy (comprehensive, infrastructure, temporal)\n    include_passive_dns: Whether to include passive DNS data\n    include_threat_intel: Whether to include threat intelligence data</p>\n\n<p>Returns:\n    Expanded indicators and relationships</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">campaign_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">expansion_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">expansion_strategy</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;comprehensive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">include_passive_dns</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_threat_intel</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.get_campaign_timeline", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.get_campaign_timeline", "kind": "function", "doc": "<p>Build detailed attack timelines.</p>\n\n<p>Args:\n    campaign_id: Campaign ID to analyze\n    timeline_granularity: Timeline granularity (minute, hourly, daily)\n    include_event_details: Whether to include detailed event information\n    include_ttp_analysis: Whether to include TTP analysis</p>\n\n<p>Returns:\n    Detailed campaign timeline</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">campaign_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">timeline_granularity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hourly&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">include_event_details</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_ttp_analysis</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.compare_campaigns", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.compare_campaigns", "kind": "function", "doc": "<p>Compare multiple campaigns for similarities.</p>\n\n<p>Args:\n    campaign_ids: List of campaign IDs to compare\n    comparison_metrics: Metrics to compare (ttps, infrastructure, timing, etc.)\n    include_visualization_data: Whether to include visualization data</p>\n\n<p>Returns:\n    Campaign comparison results</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">campaign_ids</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">comparison_metrics</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_visualization_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.detect_ongoing_campaigns", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.detect_ongoing_campaigns", "kind": "function", "doc": "<p>Real-time detection of active campaigns.</p>\n\n<p>Args:\n    time_window_hours: Time window for detection (default: 24 hours)\n    min_event_threshold: Minimum events for campaign detection\n    correlation_threshold: Minimum correlation threshold\n    include_alert_data: Whether to include alert data</p>\n\n<p>Returns:\n    Detected ongoing campaigns</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_window_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">min_event_threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>,</span><span class=\"param\">\t<span class=\"n\">correlation_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">include_alert_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.search_campaigns", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.search_campaigns", "kind": "function", "doc": "<p>Search existing campaigns by criteria.</p>\n\n<p>Args:\n    search_criteria: Search criteria (indicators, time_range, confidence, etc.)\n    time_range_hours: Time range for search\n    max_results: Maximum results to return\n    include_summaries: Whether to include campaign summaries</p>\n\n<p>Returns:\n    Matching campaigns</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">search_criteria</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">168</span>,</span><span class=\"param\">\t<span class=\"n\">max_results</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">include_summaries</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.get_campaign_details", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.get_campaign_details", "kind": "function", "doc": "<p>Comprehensive campaign information.</p>\n\n<p>Args:\n    campaign_id: Campaign ID to retrieve\n    include_full_timeline: Whether to include full timeline\n    include_relationships: Whether to include indicator relationships\n    include_threat_intel: Whether to include threat intelligence</p>\n\n<p>Returns:\n    Comprehensive campaign details</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">campaign_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">include_full_timeline</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">include_relationships</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_threat_intel</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.config_loader", "modulename": "src.config_loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.config_loader.ConfigError", "modulename": "src.config_loader", "qualname": "ConfigError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "src.config_loader.get_config", "modulename": "src.config_loader", "qualname": "get_config", "kind": "function", "doc": "<p>Load the MCP YAML config file. Raise ConfigError if missing or invalid.\nBy default, looks for 'mcp_config.yaml' in the project root.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.context_injector", "modulename": "src.context_injector", "kind": "module", "doc": "<p>Context injector for preparing data for ChatGPT context injection.</p>\n"}, {"fullname": "src.context_injector.logger", "modulename": "src.context_injector", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.context_injector&#x27;,))&gt;"}, {"fullname": "src.context_injector.ContextInjector", "modulename": "src.context_injector", "qualname": "ContextInjector", "kind": "class", "doc": "<p>Prepare and inject security context for ChatGPT analysis.</p>\n"}, {"fullname": "src.context_injector.ContextInjector.max_context_size", "modulename": "src.context_injector", "qualname": "ContextInjector.max_context_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.context_injector.ContextInjector.include_raw_data", "modulename": "src.context_injector", "qualname": "ContextInjector.include_raw_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.context_injector.ContextInjector.context_format", "modulename": "src.context_injector", "qualname": "ContextInjector.context_format", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.context_injector.ContextInjector.prepare_security_context", "modulename": "src.context_injector", "qualname": "ContextInjector.prepare_security_context", "kind": "function", "doc": "<p>Prepare security context for injection.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">threat_intelligence</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">summary</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.context_injector.ContextInjector.prepare_attack_report_context", "modulename": "src.context_injector", "qualname": "ContextInjector.prepare_attack_report_context", "kind": "function", "doc": "<p>Prepare attack report context for injection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">report</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.context_injector.ContextInjector.prepare_query_context", "modulename": "src.context_injector", "qualname": "ContextInjector.prepare_query_context", "kind": "function", "doc": "<p>Prepare query context for injection.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.context_injector.ContextInjector.inject_context_for_chatgpt", "modulename": "src.context_injector", "qualname": "ContextInjector.inject_context_for_chatgpt", "kind": "function", "doc": "<p>Format context for ChatGPT consumption.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.context_injector.ContextInjector.create_mcp_context_injection", "modulename": "src.context_injector", "qualname": "ContextInjector.create_mcp_context_injection", "kind": "function", "doc": "<p>Create MCP-compatible context injection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_dictionary", "modulename": "src.data_dictionary", "kind": "module", "doc": "<p>Data Dictionary for DShield MCP Elastic SIEM Integration\nProvides comprehensive field descriptions and examples to help models understand\nthe available data structures and their meanings.</p>\n"}, {"fullname": "src.data_dictionary.DataDictionary", "modulename": "src.data_dictionary", "qualname": "DataDictionary", "kind": "class", "doc": "<p>Comprehensive data dictionary for DShield SIEM data.</p>\n"}, {"fullname": "src.data_dictionary.DataDictionary.get_field_descriptions", "modulename": "src.data_dictionary", "qualname": "DataDictionary.get_field_descriptions", "kind": "function", "doc": "<p>Get comprehensive field descriptions for DShield data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_dictionary.DataDictionary.get_query_examples", "modulename": "src.data_dictionary", "qualname": "DataDictionary.get_query_examples", "kind": "function", "doc": "<p>Get example queries for common use cases.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_dictionary.DataDictionary.get_data_patterns", "modulename": "src.data_dictionary", "qualname": "DataDictionary.get_data_patterns", "kind": "function", "doc": "<p>Get common data patterns and their meanings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_dictionary.DataDictionary.get_analysis_guidelines", "modulename": "src.data_dictionary", "qualname": "DataDictionary.get_analysis_guidelines", "kind": "function", "doc": "<p>Get guidelines for analyzing DShield data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_dictionary.DataDictionary.get_initial_prompt", "modulename": "src.data_dictionary", "qualname": "DataDictionary.get_initial_prompt", "kind": "function", "doc": "<p>Get the initial prompt to provide to models for understanding DShield data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor", "modulename": "src.data_processor", "kind": "module", "doc": "<p>Data processor for formatting and structuring DShield SIEM data for AI consumption.\nOptimized for DShield SIEM data structures and patterns.</p>\n"}, {"fullname": "src.data_processor.logger", "modulename": "src.data_processor", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.data_processor&#x27;,))&gt;"}, {"fullname": "src.data_processor.DataProcessor", "modulename": "src.data_processor", "qualname": "DataProcessor", "kind": "class", "doc": "<p>Process and structure DShield SIEM data for AI analysis.</p>\n"}, {"fullname": "src.data_processor.DataProcessor.dshield_attack_patterns", "modulename": "src.data_processor", "qualname": "DataProcessor.dshield_attack_patterns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_processor.DataProcessor.dshield_severity_mapping", "modulename": "src.data_processor", "qualname": "DataProcessor.dshield_severity_mapping", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_processor.DataProcessor.dshield_category_mapping", "modulename": "src.data_processor", "qualname": "DataProcessor.dshield_category_mapping", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_processor.DataProcessor.process_security_events", "modulename": "src.data_processor", "qualname": "DataProcessor.process_security_events", "kind": "function", "doc": "<p>Process and normalize security events from DShield SIEM.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.process_dshield_attacks", "modulename": "src.data_processor", "qualname": "DataProcessor.process_dshield_attacks", "kind": "function", "doc": "<p>Process DShield attack events into structured format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">attacks</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DShieldAttack</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.process_dshield_reputation", "modulename": "src.data_processor", "qualname": "DataProcessor.process_dshield_reputation", "kind": "function", "doc": "<p>Process DShield reputation data into structured format.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">reputation_data</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DShieldReputation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.process_dshield_top_attackers", "modulename": "src.data_processor", "qualname": "DataProcessor.process_dshield_top_attackers", "kind": "function", "doc": "<p>Process DShield top attackers data into structured format.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">attackers</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DShieldTopAttacker</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.generate_dshield_summary", "modulename": "src.data_processor", "qualname": "DataProcessor.generate_dshield_summary", "kind": "function", "doc": "<p>Generate DShield-specific security summary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DShieldStatistics</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.generate_security_summary", "modulename": "src.data_processor", "qualname": "DataProcessor.generate_security_summary", "kind": "function", "doc": "<p>Generate security summary statistics with DShield enrichment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.generate_attack_report", "modulename": "src.data_processor", "qualname": "DataProcessor.generate_attack_report", "kind": "function", "doc": "<p>Generate structured attack report with DShield data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">threat_intelligence</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.extract_unique_ips", "modulename": "src.data_processor", "qualname": "DataProcessor.extract_unique_ips", "kind": "function", "doc": "<p>Extract unique IP addresses from events.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.dshield_client", "modulename": "src.dshield_client", "kind": "module", "doc": "<p>DShield client for threat intelligence and IP reputation lookup.</p>\n"}, {"fullname": "src.dshield_client.logger", "modulename": "src.dshield_client", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.dshield_client&#x27;,))&gt;"}, {"fullname": "src.dshield_client.DShieldClient", "modulename": "src.dshield_client", "qualname": "DShieldClient", "kind": "class", "doc": "<p>Client for interacting with DShield threat intelligence API.</p>\n"}, {"fullname": "src.dshield_client.DShieldClient.api_key", "modulename": "src.dshield_client", "qualname": "DShieldClient.api_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.base_url", "modulename": "src.dshield_client", "qualname": "DShieldClient.base_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.session", "modulename": "src.dshield_client", "qualname": "DShieldClient.session", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[aiohttp.client.ClientSession]"}, {"fullname": "src.dshield_client.DShieldClient.rate_limit_requests", "modulename": "src.dshield_client", "qualname": "DShieldClient.rate_limit_requests", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.rate_limit_window", "modulename": "src.dshield_client", "qualname": "DShieldClient.rate_limit_window", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.request_times", "modulename": "src.dshield_client", "qualname": "DShieldClient.request_times", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "src.dshield_client.DShieldClient.cache", "modulename": "src.dshield_client", "qualname": "DShieldClient.cache", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Dict[str, Any]]"}, {"fullname": "src.dshield_client.DShieldClient.cache_ttl", "modulename": "src.dshield_client", "qualname": "DShieldClient.cache_ttl", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.enable_caching", "modulename": "src.dshield_client", "qualname": "DShieldClient.enable_caching", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.max_cache_size", "modulename": "src.dshield_client", "qualname": "DShieldClient.max_cache_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.request_timeout", "modulename": "src.dshield_client", "qualname": "DShieldClient.request_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.enable_performance_logging", "modulename": "src.dshield_client", "qualname": "DShieldClient.enable_performance_logging", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.headers", "modulename": "src.dshield_client", "qualname": "DShieldClient.headers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.batch_size", "modulename": "src.dshield_client", "qualname": "DShieldClient.batch_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.connect", "modulename": "src.dshield_client", "qualname": "DShieldClient.connect", "kind": "function", "doc": "<p>Initialize HTTP session.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "src.dshield_client.DShieldClient.close", "modulename": "src.dshield_client", "qualname": "DShieldClient.close", "kind": "function", "doc": "<p>Close HTTP session.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "src.dshield_client.DShieldClient.get_ip_reputation", "modulename": "src.dshield_client", "qualname": "DShieldClient.get_ip_reputation", "kind": "function", "doc": "<p>Get IP reputation from DShield.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ip_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.dshield_client.DShieldClient.get_ip_details", "modulename": "src.dshield_client", "qualname": "DShieldClient.get_ip_details", "kind": "function", "doc": "<p>Get detailed IP information from DShield.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ip_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.dshield_client.DShieldClient.get_top_attackers", "modulename": "src.dshield_client", "qualname": "DShieldClient.get_top_attackers", "kind": "function", "doc": "<p>Get top attackers from DShield.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.dshield_client.DShieldClient.get_attack_summary", "modulename": "src.dshield_client", "qualname": "DShieldClient.get_attack_summary", "kind": "function", "doc": "<p>Get attack summary from DShield.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.dshield_client.DShieldClient.enrich_ips_batch", "modulename": "src.dshield_client", "qualname": "DShieldClient.enrich_ips_batch", "kind": "function", "doc": "<p>Enrich multiple IP addresses with threat intelligence.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ip_addresses</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client", "modulename": "src.elasticsearch_client", "kind": "module", "doc": "<p>Elasticsearch client for querying DShield SIEM events and logs.\nOptimized for DShield SIEM integration patterns.</p>\n"}, {"fullname": "src.elasticsearch_client.logger", "modulename": "src.elasticsearch_client", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.elasticsearch_client&#x27;,))&gt;"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient", "kind": "class", "doc": "<p>Client for interacting with DShield SIEM Elasticsearch.</p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.client", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.client", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[elasticsearch.AsyncElasticsearch]"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.url", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.username", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.password", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.password", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.verify_ssl", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.verify_ssl", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.ca_certs", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.ca_certs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.timeout", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.max_results", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.max_results", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.default_page_size", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.default_page_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.max_page_size", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.max_page_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.default_timeout", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.default_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.max_timeout", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.max_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.enable_smart_optimization", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.enable_smart_optimization", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.fallback_strategy", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.fallback_strategy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.max_query_complexity", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.max_query_complexity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.enable_performance_logging", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.enable_performance_logging", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.dshield_indices", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.dshield_indices", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.fallback_indices", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.fallback_indices", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.dshield_field_mappings", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.dshield_field_mappings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.connect", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.connect", "kind": "function", "doc": "<p>Connect to Elasticsearch cluster.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.close", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.close", "kind": "function", "doc": "<p>Close Elasticsearch connection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.get_available_indices", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.get_available_indices", "kind": "function", "doc": "<p>Get available DShield indices.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_dshield_events", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_dshield_events", "kind": "function", "doc": "<p>Query DShield events from Elasticsearch with enhanced pagination support.</p>\n\n<p>Supports both traditional page-based pagination and cursor-based pagination\nfor better performance with massive datasets.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">page</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">page_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">sort_by</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;@timestamp&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sort_order</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;desc&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cursor</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_summary</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">optimization</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fallback_strategy</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;aggregate&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_result_size_mb</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">10.0</span>,</span><span class=\"param\">\t<span class=\"n\">query_timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.execute_aggregation_query", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.execute_aggregation_query", "kind": "function", "doc": "<p>Execute an aggregation query against Elasticsearch.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">aggregation_query</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.stream_dshield_events", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.stream_dshield_events", "kind": "function", "doc": "<p>Stream DShield events with cursor-based pagination for large datasets.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">stream_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_dshield_attacks", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_dshield_attacks", "kind": "function", "doc": "<p>Query DShield attack events with pagination support.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">page</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">page_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">include_summary</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_dshield_reputation", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_dshield_reputation", "kind": "function", "doc": "<p>Query DShield reputation data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ip_addresses</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_dshield_top_attackers", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_dshield_top_attackers", "kind": "function", "doc": "<p>Query DShield top attackers data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_dshield_geographic_data", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_dshield_geographic_data", "kind": "function", "doc": "<p>Query DShield geographic data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">countries</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_dshield_port_data", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_dshield_port_data", "kind": "function", "doc": "<p>Query DShield port data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ports</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_events_by_ip", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_events_by_ip", "kind": "function", "doc": "<p>Query events for specific IP addresses.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ip_addresses</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.get_dshield_statistics", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.get_dshield_statistics", "kind": "function", "doc": "<p>Get DShield statistics and summary data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.log_unmapped_fields", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.log_unmapped_fields", "kind": "function", "doc": "<p>Log any fields in the source document that are not mapped to any known field type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_security_events", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_security_events", "kind": "function", "doc": "<p>Backward compatibility method - redirects to query_dshield_events.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.get_index_mapping", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.get_index_mapping", "kind": "function", "doc": "<p>Get mapping for an index pattern.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index_pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.get_cluster_stats", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.get_cluster_stats", "kind": "function", "doc": "<p>Get Elasticsearch cluster statistics.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.stream_dshield_events_with_session_context", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.stream_dshield_events_with_session_context", "kind": "function", "doc": "<p>Stream DShield events with smart session-based chunking.</p>\n\n<p>Groups events by session context (e.g., source IP, user session, connection ID)\nand ensures related events stay together in the same chunk.</p>\n\n<p>Args:\n    session_fields: Fields to use for session grouping (e.g., ['source.ip', 'user.name'])\n    max_session_gap_minutes: Maximum time gap within a session before starting new session\n    include_session_summary: Include session metadata in response\n    stream_id: Resume streaming from specific point</p>\n\n<p>Returns:\n    Tuple of (events, total_count, next_stream_id, session_context)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">session_fields</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_session_gap_minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">include_session_summary</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">stream_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.models", "modulename": "src.models", "kind": "module", "doc": "<p>Data models for DShield MCP Elastic SIEM integration.\nOptimized for DShield SIEM data structures and patterns.</p>\n"}, {"fullname": "src.models.EventSeverity", "modulename": "src.models", "qualname": "EventSeverity", "kind": "class", "doc": "<p>Security event severity levels.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "src.models.EventSeverity.LOW", "modulename": "src.models", "qualname": "EventSeverity.LOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventSeverity.LOW: &#x27;low&#x27;&gt;"}, {"fullname": "src.models.EventSeverity.MEDIUM", "modulename": "src.models", "qualname": "EventSeverity.MEDIUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventSeverity.MEDIUM: &#x27;medium&#x27;&gt;"}, {"fullname": "src.models.EventSeverity.HIGH", "modulename": "src.models", "qualname": "EventSeverity.HIGH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventSeverity.HIGH: &#x27;high&#x27;&gt;"}, {"fullname": "src.models.EventSeverity.CRITICAL", "modulename": "src.models", "qualname": "EventSeverity.CRITICAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventSeverity.CRITICAL: &#x27;critical&#x27;&gt;"}, {"fullname": "src.models.EventCategory", "modulename": "src.models", "qualname": "EventCategory", "kind": "class", "doc": "<p>Security event categories.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "src.models.EventCategory.NETWORK", "modulename": "src.models", "qualname": "EventCategory.NETWORK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.NETWORK: &#x27;network&#x27;&gt;"}, {"fullname": "src.models.EventCategory.AUTHENTICATION", "modulename": "src.models", "qualname": "EventCategory.AUTHENTICATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.AUTHENTICATION: &#x27;authentication&#x27;&gt;"}, {"fullname": "src.models.EventCategory.MALWARE", "modulename": "src.models", "qualname": "EventCategory.MALWARE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.MALWARE: &#x27;malware&#x27;&gt;"}, {"fullname": "src.models.EventCategory.INTRUSION", "modulename": "src.models", "qualname": "EventCategory.INTRUSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.INTRUSION: &#x27;intrusion&#x27;&gt;"}, {"fullname": "src.models.EventCategory.DATA_EXFILTRATION", "modulename": "src.models", "qualname": "EventCategory.DATA_EXFILTRATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.DATA_EXFILTRATION: &#x27;data_exfiltration&#x27;&gt;"}, {"fullname": "src.models.EventCategory.RECONNAISSANCE", "modulename": "src.models", "qualname": "EventCategory.RECONNAISSANCE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.RECONNAISSANCE: &#x27;reconnaissance&#x27;&gt;"}, {"fullname": "src.models.EventCategory.DENIAL_OF_SERVICE", "modulename": "src.models", "qualname": "EventCategory.DENIAL_OF_SERVICE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.DENIAL_OF_SERVICE: &#x27;denial_of_service&#x27;&gt;"}, {"fullname": "src.models.EventCategory.ATTACK", "modulename": "src.models", "qualname": "EventCategory.ATTACK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.ATTACK: &#x27;attack&#x27;&gt;"}, {"fullname": "src.models.EventCategory.BLOCK", "modulename": "src.models", "qualname": "EventCategory.BLOCK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.BLOCK: &#x27;block&#x27;&gt;"}, {"fullname": "src.models.EventCategory.REPUTATION", "modulename": "src.models", "qualname": "EventCategory.REPUTATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.REPUTATION: &#x27;reputation&#x27;&gt;"}, {"fullname": "src.models.EventCategory.GEOGRAPHIC", "modulename": "src.models", "qualname": "EventCategory.GEOGRAPHIC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.GEOGRAPHIC: &#x27;geographic&#x27;&gt;"}, {"fullname": "src.models.EventCategory.ASN", "modulename": "src.models", "qualname": "EventCategory.ASN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.ASN: &#x27;asn&#x27;&gt;"}, {"fullname": "src.models.EventCategory.ORGANIZATION", "modulename": "src.models", "qualname": "EventCategory.ORGANIZATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.ORGANIZATION: &#x27;organization&#x27;&gt;"}, {"fullname": "src.models.EventCategory.PORT", "modulename": "src.models", "qualname": "EventCategory.PORT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.PORT: &#x27;port&#x27;&gt;"}, {"fullname": "src.models.EventCategory.PROTOCOL", "modulename": "src.models", "qualname": "EventCategory.PROTOCOL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.PROTOCOL: &#x27;protocol&#x27;&gt;"}, {"fullname": "src.models.EventCategory.OTHER", "modulename": "src.models", "qualname": "EventCategory.OTHER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.OTHER: &#x27;other&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType", "modulename": "src.models", "qualname": "DShieldEventType", "kind": "class", "doc": "<p>DShield specific event types.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "src.models.DShieldEventType.ATTACK", "modulename": "src.models", "qualname": "DShieldEventType.ATTACK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.ATTACK: &#x27;attack&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.BLOCK", "modulename": "src.models", "qualname": "DShieldEventType.BLOCK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.BLOCK: &#x27;block&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.REPUTATION", "modulename": "src.models", "qualname": "DShieldEventType.REPUTATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.REPUTATION: &#x27;reputation&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.TOP_ATTACKER", "modulename": "src.models", "qualname": "DShieldEventType.TOP_ATTACKER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.TOP_ATTACKER: &#x27;top_attacker&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.TOP_PORT", "modulename": "src.models", "qualname": "DShieldEventType.TOP_PORT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.TOP_PORT: &#x27;top_port&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.GEOGRAPHIC", "modulename": "src.models", "qualname": "DShieldEventType.GEOGRAPHIC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.GEOGRAPHIC: &#x27;geographic&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.ASN", "modulename": "src.models", "qualname": "DShieldEventType.ASN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.ASN: &#x27;asn&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.ORGANIZATION", "modulename": "src.models", "qualname": "DShieldEventType.ORGANIZATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.ORGANIZATION: &#x27;organization&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.TAG", "modulename": "src.models", "qualname": "DShieldEventType.TAG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.TAG: &#x27;tag&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.STATISTICS", "modulename": "src.models", "qualname": "DShieldEventType.STATISTICS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.STATISTICS: &#x27;statistics&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.SUMMARY", "modulename": "src.models", "qualname": "DShieldEventType.SUMMARY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.SUMMARY: &#x27;summary&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.ALERT", "modulename": "src.models", "qualname": "DShieldEventType.ALERT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.ALERT: &#x27;alert&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.LOG", "modulename": "src.models", "qualname": "DShieldEventType.LOG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.LOG: &#x27;log&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.REPORT", "modulename": "src.models", "qualname": "DShieldEventType.REPORT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.REPORT: &#x27;report&#x27;&gt;"}, {"fullname": "src.models.SecurityEvent", "modulename": "src.models", "qualname": "SecurityEvent", "kind": "class", "doc": "<p>Model for security events from DShield SIEM.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.SecurityEvent.id", "modulename": "src.models", "qualname": "SecurityEvent.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.SecurityEvent.timestamp", "modulename": "src.models", "qualname": "SecurityEvent.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.SecurityEvent.source_ip", "modulename": "src.models", "qualname": "SecurityEvent.source_ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.SecurityEvent.destination_ip", "modulename": "src.models", "qualname": "SecurityEvent.destination_ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.SecurityEvent.source_port", "modulename": "src.models", "qualname": "SecurityEvent.source_port", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.SecurityEvent.destination_port", "modulename": "src.models", "qualname": "SecurityEvent.destination_port", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.SecurityEvent.protocol", "modulename": "src.models", "qualname": "SecurityEvent.protocol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.SecurityEvent.event_type", "modulename": "src.models", "qualname": "SecurityEvent.event_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.SecurityEvent.severity", "modulename": "src.models", "qualname": "SecurityEvent.severity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.models.EventSeverity"}, {"fullname": "src.models.SecurityEvent.category", "modulename": "src.models", "qualname": "SecurityEvent.category", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.models.EventCategory"}, {"fullname": "src.models.SecurityEvent.description", "modulename": "src.models", "qualname": "SecurityEvent.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.SecurityEvent.country", "modulename": "src.models", "qualname": "SecurityEvent.country", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.SecurityEvent.asn", "modulename": "src.models", "qualname": "SecurityEvent.asn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.SecurityEvent.organization", "modulename": "src.models", "qualname": "SecurityEvent.organization", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.SecurityEvent.reputation_score", "modulename": "src.models", "qualname": "SecurityEvent.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.SecurityEvent.attack_count", "modulename": "src.models", "qualname": "SecurityEvent.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.SecurityEvent.first_seen", "modulename": "src.models", "qualname": "SecurityEvent.first_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.SecurityEvent.last_seen", "modulename": "src.models", "qualname": "SecurityEvent.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.SecurityEvent.tags", "modulename": "src.models", "qualname": "SecurityEvent.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.SecurityEvent.attack_types", "modulename": "src.models", "qualname": "SecurityEvent.attack_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.SecurityEvent.raw_data", "modulename": "src.models", "qualname": "SecurityEvent.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.SecurityEvent.indices", "modulename": "src.models", "qualname": "SecurityEvent.indices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.SecurityEvent.validate_ip_address", "modulename": "src.models", "qualname": "SecurityEvent.validate_ip_address", "kind": "function", "doc": "<p>Validate IP address format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.SecurityEvent.validate_port", "modulename": "src.models", "qualname": "SecurityEvent.validate_port", "kind": "function", "doc": "<p>Validate port number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.SecurityEvent.validate_reputation_score", "modulename": "src.models", "qualname": "SecurityEvent.validate_reputation_score", "kind": "function", "doc": "<p>Validate reputation score range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.SecurityEvent.model_config", "modulename": "src.models", "qualname": "SecurityEvent.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.DShieldAttack", "modulename": "src.models", "qualname": "DShieldAttack", "kind": "class", "doc": "<p>Model for DShield attack events.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.DShieldAttack.id", "modulename": "src.models", "qualname": "DShieldAttack.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldAttack.timestamp", "modulename": "src.models", "qualname": "DShieldAttack.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.DShieldAttack.source_ip", "modulename": "src.models", "qualname": "DShieldAttack.source_ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldAttack.destination_ip", "modulename": "src.models", "qualname": "DShieldAttack.destination_ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldAttack.source_port", "modulename": "src.models", "qualname": "DShieldAttack.source_port", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.DShieldAttack.destination_port", "modulename": "src.models", "qualname": "DShieldAttack.destination_port", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.DShieldAttack.protocol", "modulename": "src.models", "qualname": "DShieldAttack.protocol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldAttack.attack_type", "modulename": "src.models", "qualname": "DShieldAttack.attack_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldAttack.severity", "modulename": "src.models", "qualname": "DShieldAttack.severity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.models.EventSeverity"}, {"fullname": "src.models.DShieldAttack.description", "modulename": "src.models", "qualname": "DShieldAttack.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldAttack.country", "modulename": "src.models", "qualname": "DShieldAttack.country", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldAttack.asn", "modulename": "src.models", "qualname": "DShieldAttack.asn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldAttack.organization", "modulename": "src.models", "qualname": "DShieldAttack.organization", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldAttack.reputation_score", "modulename": "src.models", "qualname": "DShieldAttack.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldAttack.attack_count", "modulename": "src.models", "qualname": "DShieldAttack.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldAttack.first_seen", "modulename": "src.models", "qualname": "DShieldAttack.first_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.DShieldAttack.last_seen", "modulename": "src.models", "qualname": "DShieldAttack.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.DShieldAttack.tags", "modulename": "src.models", "qualname": "DShieldAttack.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldAttack.attack_methods", "modulename": "src.models", "qualname": "DShieldAttack.attack_methods", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldAttack.raw_data", "modulename": "src.models", "qualname": "DShieldAttack.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.DShieldAttack.indices", "modulename": "src.models", "qualname": "DShieldAttack.indices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldAttack.model_config", "modulename": "src.models", "qualname": "DShieldAttack.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.DShieldReputation", "modulename": "src.models", "qualname": "DShieldReputation", "kind": "class", "doc": "<p>Model for DShield reputation data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.DShieldReputation.ip_address", "modulename": "src.models", "qualname": "DShieldReputation.ip_address", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldReputation.reputation_score", "modulename": "src.models", "qualname": "DShieldReputation.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldReputation.threat_level", "modulename": "src.models", "qualname": "DShieldReputation.threat_level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldReputation.country", "modulename": "src.models", "qualname": "DShieldReputation.country", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldReputation.asn", "modulename": "src.models", "qualname": "DShieldReputation.asn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldReputation.organization", "modulename": "src.models", "qualname": "DShieldReputation.organization", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldReputation.first_seen", "modulename": "src.models", "qualname": "DShieldReputation.first_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.DShieldReputation.last_seen", "modulename": "src.models", "qualname": "DShieldReputation.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.DShieldReputation.attack_types", "modulename": "src.models", "qualname": "DShieldReputation.attack_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldReputation.tags", "modulename": "src.models", "qualname": "DShieldReputation.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldReputation.attack_count", "modulename": "src.models", "qualname": "DShieldReputation.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.DShieldReputation.port_count", "modulename": "src.models", "qualname": "DShieldReputation.port_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.DShieldReputation.service_count", "modulename": "src.models", "qualname": "DShieldReputation.service_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.DShieldReputation.raw_data", "modulename": "src.models", "qualname": "DShieldReputation.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.DShieldReputation.validate_ip_address", "modulename": "src.models", "qualname": "DShieldReputation.validate_ip_address", "kind": "function", "doc": "<p>Validate IP address format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.DShieldReputation.validate_reputation_score", "modulename": "src.models", "qualname": "DShieldReputation.validate_reputation_score", "kind": "function", "doc": "<p>Validate reputation score range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.DShieldReputation.model_config", "modulename": "src.models", "qualname": "DShieldReputation.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.DShieldTopAttacker", "modulename": "src.models", "qualname": "DShieldTopAttacker", "kind": "class", "doc": "<p>Model for DShield top attacker data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.DShieldTopAttacker.ip_address", "modulename": "src.models", "qualname": "DShieldTopAttacker.ip_address", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldTopAttacker.attack_count", "modulename": "src.models", "qualname": "DShieldTopAttacker.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldTopAttacker.country", "modulename": "src.models", "qualname": "DShieldTopAttacker.country", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldTopAttacker.asn", "modulename": "src.models", "qualname": "DShieldTopAttacker.asn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldTopAttacker.organization", "modulename": "src.models", "qualname": "DShieldTopAttacker.organization", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldTopAttacker.reputation_score", "modulename": "src.models", "qualname": "DShieldTopAttacker.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldTopAttacker.first_seen", "modulename": "src.models", "qualname": "DShieldTopAttacker.first_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.DShieldTopAttacker.last_seen", "modulename": "src.models", "qualname": "DShieldTopAttacker.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.DShieldTopAttacker.attack_types", "modulename": "src.models", "qualname": "DShieldTopAttacker.attack_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldTopAttacker.tags", "modulename": "src.models", "qualname": "DShieldTopAttacker.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldTopAttacker.target_ports", "modulename": "src.models", "qualname": "DShieldTopAttacker.target_ports", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[int]"}, {"fullname": "src.models.DShieldTopAttacker.target_services", "modulename": "src.models", "qualname": "DShieldTopAttacker.target_services", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldTopAttacker.raw_data", "modulename": "src.models", "qualname": "DShieldTopAttacker.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.DShieldTopAttacker.validate_ip_address", "modulename": "src.models", "qualname": "DShieldTopAttacker.validate_ip_address", "kind": "function", "doc": "<p>Validate IP address format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.DShieldTopAttacker.model_config", "modulename": "src.models", "qualname": "DShieldTopAttacker.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.DShieldGeographicData", "modulename": "src.models", "qualname": "DShieldGeographicData", "kind": "class", "doc": "<p>Model for DShield geographic data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.DShieldGeographicData.country", "modulename": "src.models", "qualname": "DShieldGeographicData.country", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldGeographicData.country_code", "modulename": "src.models", "qualname": "DShieldGeographicData.country_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldGeographicData.attack_count", "modulename": "src.models", "qualname": "DShieldGeographicData.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldGeographicData.unique_attackers", "modulename": "src.models", "qualname": "DShieldGeographicData.unique_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldGeographicData.reputation_score", "modulename": "src.models", "qualname": "DShieldGeographicData.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldGeographicData.top_attackers", "modulename": "src.models", "qualname": "DShieldGeographicData.top_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldGeographicData.attack_types", "modulename": "src.models", "qualname": "DShieldGeographicData.attack_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldGeographicData.target_ports", "modulename": "src.models", "qualname": "DShieldGeographicData.target_ports", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[int]"}, {"fullname": "src.models.DShieldGeographicData.timestamp", "modulename": "src.models", "qualname": "DShieldGeographicData.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.DShieldGeographicData.raw_data", "modulename": "src.models", "qualname": "DShieldGeographicData.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.DShieldGeographicData.model_config", "modulename": "src.models", "qualname": "DShieldGeographicData.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.DShieldPortData", "modulename": "src.models", "qualname": "DShieldPortData", "kind": "class", "doc": "<p>Model for DShield port data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.DShieldPortData.port", "modulename": "src.models", "qualname": "DShieldPortData.port", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldPortData.service", "modulename": "src.models", "qualname": "DShieldPortData.service", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldPortData.attack_count", "modulename": "src.models", "qualname": "DShieldPortData.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldPortData.unique_attackers", "modulename": "src.models", "qualname": "DShieldPortData.unique_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldPortData.reputation_score", "modulename": "src.models", "qualname": "DShieldPortData.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldPortData.top_attackers", "modulename": "src.models", "qualname": "DShieldPortData.top_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldPortData.attack_types", "modulename": "src.models", "qualname": "DShieldPortData.attack_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldPortData.countries", "modulename": "src.models", "qualname": "DShieldPortData.countries", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldPortData.timestamp", "modulename": "src.models", "qualname": "DShieldPortData.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.DShieldPortData.raw_data", "modulename": "src.models", "qualname": "DShieldPortData.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.DShieldPortData.validate_port", "modulename": "src.models", "qualname": "DShieldPortData.validate_port", "kind": "function", "doc": "<p>Validate port number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.DShieldPortData.model_config", "modulename": "src.models", "qualname": "DShieldPortData.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.ThreatIntelligence", "modulename": "src.models", "qualname": "ThreatIntelligence", "kind": "class", "doc": "<p>Model for DShield threat intelligence data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.ThreatIntelligence.ip_address", "modulename": "src.models", "qualname": "ThreatIntelligence.ip_address", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.ThreatIntelligence.reputation_score", "modulename": "src.models", "qualname": "ThreatIntelligence.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.ThreatIntelligence.threat_level", "modulename": "src.models", "qualname": "ThreatIntelligence.threat_level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.ThreatIntelligence.country", "modulename": "src.models", "qualname": "ThreatIntelligence.country", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.ThreatIntelligence.asn", "modulename": "src.models", "qualname": "ThreatIntelligence.asn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.ThreatIntelligence.organization", "modulename": "src.models", "qualname": "ThreatIntelligence.organization", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.ThreatIntelligence.first_seen", "modulename": "src.models", "qualname": "ThreatIntelligence.first_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.ThreatIntelligence.last_seen", "modulename": "src.models", "qualname": "ThreatIntelligence.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.ThreatIntelligence.attack_types", "modulename": "src.models", "qualname": "ThreatIntelligence.attack_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.ThreatIntelligence.tags", "modulename": "src.models", "qualname": "ThreatIntelligence.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.ThreatIntelligence.attack_count", "modulename": "src.models", "qualname": "ThreatIntelligence.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.ThreatIntelligence.port_count", "modulename": "src.models", "qualname": "ThreatIntelligence.port_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.ThreatIntelligence.service_count", "modulename": "src.models", "qualname": "ThreatIntelligence.service_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.ThreatIntelligence.raw_data", "modulename": "src.models", "qualname": "ThreatIntelligence.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.ThreatIntelligence.validate_ip_address", "modulename": "src.models", "qualname": "ThreatIntelligence.validate_ip_address", "kind": "function", "doc": "<p>Validate IP address format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.ThreatIntelligence.validate_reputation_score", "modulename": "src.models", "qualname": "ThreatIntelligence.validate_reputation_score", "kind": "function", "doc": "<p>Validate reputation score range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.ThreatIntelligence.model_config", "modulename": "src.models", "qualname": "ThreatIntelligence.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.AttackReport", "modulename": "src.models", "qualname": "AttackReport", "kind": "class", "doc": "<p>Model for structured attack reports.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.AttackReport.report_id", "modulename": "src.models", "qualname": "AttackReport.report_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.AttackReport.timestamp", "modulename": "src.models", "qualname": "AttackReport.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.AttackReport.title", "modulename": "src.models", "qualname": "AttackReport.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.AttackReport.summary", "modulename": "src.models", "qualname": "AttackReport.summary", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.AttackReport.total_events", "modulename": "src.models", "qualname": "AttackReport.total_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.AttackReport.unique_ips", "modulename": "src.models", "qualname": "AttackReport.unique_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.AttackReport.time_range", "modulename": "src.models", "qualname": "AttackReport.time_range", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, datetime.datetime]"}, {"fullname": "src.models.AttackReport.threat_indicators", "modulename": "src.models", "qualname": "AttackReport.threat_indicators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.AttackReport.high_risk_ips", "modulename": "src.models", "qualname": "AttackReport.high_risk_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.AttackReport.attack_vectors", "modulename": "src.models", "qualname": "AttackReport.attack_vectors", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.AttackReport.affected_systems", "modulename": "src.models", "qualname": "AttackReport.affected_systems", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.AttackReport.impact_assessment", "modulename": "src.models", "qualname": "AttackReport.impact_assessment", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.AttackReport.dshield_attacks", "modulename": "src.models", "qualname": "AttackReport.dshield_attacks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.DShieldAttack]"}, {"fullname": "src.models.AttackReport.dshield_reputation", "modulename": "src.models", "qualname": "AttackReport.dshield_reputation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, src.models.DShieldReputation]"}, {"fullname": "src.models.AttackReport.top_attackers", "modulename": "src.models", "qualname": "AttackReport.top_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.DShieldTopAttacker]"}, {"fullname": "src.models.AttackReport.geographic_data", "modulename": "src.models", "qualname": "AttackReport.geographic_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.DShieldGeographicData]"}, {"fullname": "src.models.AttackReport.port_data", "modulename": "src.models", "qualname": "AttackReport.port_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.DShieldPortData]"}, {"fullname": "src.models.AttackReport.recommendations", "modulename": "src.models", "qualname": "AttackReport.recommendations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.AttackReport.mitigation_actions", "modulename": "src.models", "qualname": "AttackReport.mitigation_actions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.AttackReport.analyst", "modulename": "src.models", "qualname": "AttackReport.analyst", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.AttackReport.confidence_level", "modulename": "src.models", "qualname": "AttackReport.confidence_level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.AttackReport.tags", "modulename": "src.models", "qualname": "AttackReport.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.AttackReport.events", "modulename": "src.models", "qualname": "AttackReport.events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.SecurityEvent]"}, {"fullname": "src.models.AttackReport.threat_intelligence", "modulename": "src.models", "qualname": "AttackReport.threat_intelligence", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, src.models.ThreatIntelligence]"}, {"fullname": "src.models.AttackReport.model_config", "modulename": "src.models", "qualname": "AttackReport.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.SecuritySummary", "modulename": "src.models", "qualname": "SecuritySummary", "kind": "class", "doc": "<p>Model for security summary statistics.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.SecuritySummary.timestamp", "modulename": "src.models", "qualname": "SecuritySummary.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.SecuritySummary.time_range_hours", "modulename": "src.models", "qualname": "SecuritySummary.time_range_hours", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.total_events", "modulename": "src.models", "qualname": "SecuritySummary.total_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.events_by_severity", "modulename": "src.models", "qualname": "SecuritySummary.events_by_severity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, int]"}, {"fullname": "src.models.SecuritySummary.events_by_category", "modulename": "src.models", "qualname": "SecuritySummary.events_by_category", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, int]"}, {"fullname": "src.models.SecuritySummary.unique_source_ips", "modulename": "src.models", "qualname": "SecuritySummary.unique_source_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.unique_destination_ips", "modulename": "src.models", "qualname": "SecuritySummary.unique_destination_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.top_source_ips", "modulename": "src.models", "qualname": "SecuritySummary.top_source_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.SecuritySummary.top_destination_ips", "modulename": "src.models", "qualname": "SecuritySummary.top_destination_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.SecuritySummary.high_risk_events", "modulename": "src.models", "qualname": "SecuritySummary.high_risk_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.threat_intelligence_hits", "modulename": "src.models", "qualname": "SecuritySummary.threat_intelligence_hits", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.dshield_attacks", "modulename": "src.models", "qualname": "SecuritySummary.dshield_attacks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.dshield_blocks", "modulename": "src.models", "qualname": "SecuritySummary.dshield_blocks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.dshield_reputation_hits", "modulename": "src.models", "qualname": "SecuritySummary.dshield_reputation_hits", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.top_attackers", "modulename": "src.models", "qualname": "SecuritySummary.top_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.DShieldTopAttacker]"}, {"fullname": "src.models.SecuritySummary.geographic_distribution", "modulename": "src.models", "qualname": "SecuritySummary.geographic_distribution", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, int]"}, {"fullname": "src.models.SecuritySummary.port_distribution", "modulename": "src.models", "qualname": "SecuritySummary.port_distribution", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[int, int]"}, {"fullname": "src.models.SecuritySummary.query_duration_ms", "modulename": "src.models", "qualname": "SecuritySummary.query_duration_ms", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.SecuritySummary.indices_queried", "modulename": "src.models", "qualname": "SecuritySummary.indices_queried", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.SecuritySummary.model_config", "modulename": "src.models", "qualname": "SecuritySummary.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.QueryFilter", "modulename": "src.models", "qualname": "QueryFilter", "kind": "class", "doc": "<p>Model for Elasticsearch query filters.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.QueryFilter.field", "modulename": "src.models", "qualname": "QueryFilter.field", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.QueryFilter.value", "modulename": "src.models", "qualname": "QueryFilter.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, int, float, bool, List[Any]]"}, {"fullname": "src.models.QueryFilter.operator", "modulename": "src.models", "qualname": "QueryFilter.operator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.QueryFilter.validate_operator", "modulename": "src.models", "qualname": "QueryFilter.validate_operator", "kind": "function", "doc": "<p>Validate filter operator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.QueryFilter.model_config", "modulename": "src.models", "qualname": "QueryFilter.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.ElasticsearchQuery", "modulename": "src.models", "qualname": "ElasticsearchQuery", "kind": "class", "doc": "<p>Model for Elasticsearch queries.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.ElasticsearchQuery.indices", "modulename": "src.models", "qualname": "ElasticsearchQuery.indices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.ElasticsearchQuery.time_range", "modulename": "src.models", "qualname": "ElasticsearchQuery.time_range", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, datetime.datetime]"}, {"fullname": "src.models.ElasticsearchQuery.filters", "modulename": "src.models", "qualname": "ElasticsearchQuery.filters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.QueryFilter]"}, {"fullname": "src.models.ElasticsearchQuery.size", "modulename": "src.models", "qualname": "ElasticsearchQuery.size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.ElasticsearchQuery.sort", "modulename": "src.models", "qualname": "ElasticsearchQuery.sort", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, str]]"}, {"fullname": "src.models.ElasticsearchQuery.aggs", "modulename": "src.models", "qualname": "ElasticsearchQuery.aggs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.ElasticsearchQuery.validate_size", "modulename": "src.models", "qualname": "ElasticsearchQuery.validate_size", "kind": "function", "doc": "<p>Validate result size.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.ElasticsearchQuery.model_config", "modulename": "src.models", "qualname": "ElasticsearchQuery.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.DShieldStatistics", "modulename": "src.models", "qualname": "DShieldStatistics", "kind": "class", "doc": "<p>Model for DShield statistics data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.DShieldStatistics.timestamp", "modulename": "src.models", "qualname": "DShieldStatistics.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.DShieldStatistics.time_range_hours", "modulename": "src.models", "qualname": "DShieldStatistics.time_range_hours", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.total_attacks", "modulename": "src.models", "qualname": "DShieldStatistics.total_attacks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.unique_attackers", "modulename": "src.models", "qualname": "DShieldStatistics.unique_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.total_targets", "modulename": "src.models", "qualname": "DShieldStatistics.total_targets", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.countries_attacking", "modulename": "src.models", "qualname": "DShieldStatistics.countries_attacking", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.top_countries", "modulename": "src.models", "qualname": "DShieldStatistics.top_countries", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.DShieldStatistics.ports_targeted", "modulename": "src.models", "qualname": "DShieldStatistics.ports_targeted", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.top_ports", "modulename": "src.models", "qualname": "DShieldStatistics.top_ports", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.DShieldStatistics.protocols_used", "modulename": "src.models", "qualname": "DShieldStatistics.protocols_used", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.top_protocols", "modulename": "src.models", "qualname": "DShieldStatistics.top_protocols", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.DShieldStatistics.asns_attacking", "modulename": "src.models", "qualname": "DShieldStatistics.asns_attacking", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.top_asns", "modulename": "src.models", "qualname": "DShieldStatistics.top_asns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.DShieldStatistics.organizations_attacking", "modulename": "src.models", "qualname": "DShieldStatistics.organizations_attacking", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.top_organizations", "modulename": "src.models", "qualname": "DShieldStatistics.top_organizations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.DShieldStatistics.high_reputation_ips", "modulename": "src.models", "qualname": "DShieldStatistics.high_reputation_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.average_reputation_score", "modulename": "src.models", "qualname": "DShieldStatistics.average_reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldStatistics.query_duration_ms", "modulename": "src.models", "qualname": "DShieldStatistics.query_duration_ms", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldStatistics.indices_queried", "modulename": "src.models", "qualname": "DShieldStatistics.indices_queried", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldStatistics.model_config", "modulename": "src.models", "qualname": "DShieldStatistics.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.op_secrets", "modulename": "src.op_secrets", "kind": "module", "doc": "<p>1Password CLI integration for secret management in DShield MCP.\nHandles op:// URLs in config values by resolving them using the 1Password CLI.</p>\n"}, {"fullname": "src.op_secrets.logger", "modulename": "src.op_secrets", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.op_secrets&#x27;,))&gt;"}, {"fullname": "src.op_secrets.OnePasswordSecrets", "modulename": "src.op_secrets", "qualname": "OnePasswordSecrets", "kind": "class", "doc": "<p>Handle 1Password secret resolution for config values.</p>\n"}, {"fullname": "src.op_secrets.OnePasswordSecrets.op_available", "modulename": "src.op_secrets", "qualname": "OnePasswordSecrets.op_available", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.op_secrets.OnePasswordSecrets.resolve_op_url", "modulename": "src.op_secrets", "qualname": "OnePasswordSecrets.resolve_op_url", "kind": "function", "doc": "<p>Resolve a 1Password URL (op://) to its actual value.\nArgs:\n    op_url: The 1Password URL (e.g., \"op://vault/item/field\")\nReturns:\n    The resolved secret value or None if resolution failed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.op_secrets.OnePasswordSecrets.resolve_environment_variable", "modulename": "src.op_secrets", "qualname": "OnePasswordSecrets.resolve_environment_variable", "kind": "function", "doc": "<p>Resolve config value, handling op:// URLs.\nArgs:\n    value: The config value\nReturns:\n    The resolved value (original if not an op:// URL)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config", "modulename": "src.user_config", "kind": "module", "doc": "<p>User Configuration Management for DShield MCP\nExtends the existing configuration system with user-customizable settings,\nvalidation, and environment variable support.</p>\n"}, {"fullname": "src.user_config.logger", "modulename": "src.user_config", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.user_config&#x27;,))&gt;"}, {"fullname": "src.user_config.QuerySettings", "modulename": "src.user_config", "qualname": "QuerySettings", "kind": "class", "doc": "<p>User-configurable query settings.</p>\n"}, {"fullname": "src.user_config.QuerySettings.__init__", "modulename": "src.user_config", "qualname": "QuerySettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">default_page_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">max_page_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">default_timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">max_timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">enable_smart_optimization</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">fallback_strategy</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;aggregate&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_query_complexity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span>)</span>"}, {"fullname": "src.user_config.QuerySettings.default_page_size", "modulename": "src.user_config", "qualname": "QuerySettings.default_page_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "100"}, {"fullname": "src.user_config.QuerySettings.max_page_size", "modulename": "src.user_config", "qualname": "QuerySettings.max_page_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1000"}, {"fullname": "src.user_config.QuerySettings.default_timeout_seconds", "modulename": "src.user_config", "qualname": "QuerySettings.default_timeout_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "30"}, {"fullname": "src.user_config.QuerySettings.max_timeout_seconds", "modulename": "src.user_config", "qualname": "QuerySettings.max_timeout_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "300"}, {"fullname": "src.user_config.QuerySettings.enable_smart_optimization", "modulename": "src.user_config", "qualname": "QuerySettings.enable_smart_optimization", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.QuerySettings.fallback_strategy", "modulename": "src.user_config", "qualname": "QuerySettings.fallback_strategy", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;aggregate&#x27;"}, {"fullname": "src.user_config.QuerySettings.max_query_complexity", "modulename": "src.user_config", "qualname": "QuerySettings.max_query_complexity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1000"}, {"fullname": "src.user_config.PaginationSettings", "modulename": "src.user_config", "qualname": "PaginationSettings", "kind": "class", "doc": "<p>User-configurable pagination settings.</p>\n"}, {"fullname": "src.user_config.PaginationSettings.__init__", "modulename": "src.user_config", "qualname": "PaginationSettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">default_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;page&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_pages_per_request</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">cursor_timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">enable_metadata</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_performance_metrics</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "src.user_config.PaginationSettings.default_method", "modulename": "src.user_config", "qualname": "PaginationSettings.default_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;page&#x27;"}, {"fullname": "src.user_config.PaginationSettings.max_pages_per_request", "modulename": "src.user_config", "qualname": "PaginationSettings.max_pages_per_request", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "10"}, {"fullname": "src.user_config.PaginationSettings.cursor_timeout_seconds", "modulename": "src.user_config", "qualname": "PaginationSettings.cursor_timeout_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "300"}, {"fullname": "src.user_config.PaginationSettings.enable_metadata", "modulename": "src.user_config", "qualname": "PaginationSettings.enable_metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.PaginationSettings.include_performance_metrics", "modulename": "src.user_config", "qualname": "PaginationSettings.include_performance_metrics", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.StreamingSettings", "modulename": "src.user_config", "qualname": "StreamingSettings", "kind": "class", "doc": "<p>User-configurable streaming settings.</p>\n"}, {"fullname": "src.user_config.StreamingSettings.__init__", "modulename": "src.user_config", "qualname": "StreamingSettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">default_chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">max_chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>,</span><span class=\"param\">\t<span class=\"n\">session_context_fields</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">enable_session_summaries</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">session_timeout_minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span></span>)</span>"}, {"fullname": "src.user_config.StreamingSettings.default_chunk_size", "modulename": "src.user_config", "qualname": "StreamingSettings.default_chunk_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "50"}, {"fullname": "src.user_config.StreamingSettings.max_chunk_size", "modulename": "src.user_config", "qualname": "StreamingSettings.max_chunk_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "200"}, {"fullname": "src.user_config.StreamingSettings.session_context_fields", "modulename": "src.user_config", "qualname": "StreamingSettings.session_context_fields", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.user_config.StreamingSettings.enable_session_summaries", "modulename": "src.user_config", "qualname": "StreamingSettings.enable_session_summaries", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.StreamingSettings.session_timeout_minutes", "modulename": "src.user_config", "qualname": "StreamingSettings.session_timeout_minutes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "30"}, {"fullname": "src.user_config.PerformanceSettings", "modulename": "src.user_config", "qualname": "PerformanceSettings", "kind": "class", "doc": "<p>User-configurable performance settings.</p>\n"}, {"fullname": "src.user_config.PerformanceSettings.__init__", "modulename": "src.user_config", "qualname": "PerformanceSettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">enable_caching</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cache_ttl_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">max_cache_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">enable_connection_pooling</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">connection_pool_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">request_timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span></span>)</span>"}, {"fullname": "src.user_config.PerformanceSettings.enable_caching", "modulename": "src.user_config", "qualname": "PerformanceSettings.enable_caching", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.PerformanceSettings.cache_ttl_seconds", "modulename": "src.user_config", "qualname": "PerformanceSettings.cache_ttl_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "300"}, {"fullname": "src.user_config.PerformanceSettings.max_cache_size", "modulename": "src.user_config", "qualname": "PerformanceSettings.max_cache_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1000"}, {"fullname": "src.user_config.PerformanceSettings.enable_connection_pooling", "modulename": "src.user_config", "qualname": "PerformanceSettings.enable_connection_pooling", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.PerformanceSettings.connection_pool_size", "modulename": "src.user_config", "qualname": "PerformanceSettings.connection_pool_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "10"}, {"fullname": "src.user_config.PerformanceSettings.request_timeout_seconds", "modulename": "src.user_config", "qualname": "PerformanceSettings.request_timeout_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "30"}, {"fullname": "src.user_config.SecuritySettings", "modulename": "src.user_config", "qualname": "SecuritySettings", "kind": "class", "doc": "<p>User-configurable security settings.</p>\n"}, {"fullname": "src.user_config.SecuritySettings.__init__", "modulename": "src.user_config", "qualname": "SecuritySettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rate_limit_requests_per_minute</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>,</span><span class=\"param\">\t<span class=\"n\">max_query_results</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">enable_field_validation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">allowed_field_patterns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">block_sensitive_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">sensitive_field_patterns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "src.user_config.SecuritySettings.rate_limit_requests_per_minute", "modulename": "src.user_config", "qualname": "SecuritySettings.rate_limit_requests_per_minute", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "60"}, {"fullname": "src.user_config.SecuritySettings.max_query_results", "modulename": "src.user_config", "qualname": "SecuritySettings.max_query_results", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1000"}, {"fullname": "src.user_config.SecuritySettings.enable_field_validation", "modulename": "src.user_config", "qualname": "SecuritySettings.enable_field_validation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.SecuritySettings.allowed_field_patterns", "modulename": "src.user_config", "qualname": "SecuritySettings.allowed_field_patterns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.user_config.SecuritySettings.block_sensitive_fields", "modulename": "src.user_config", "qualname": "SecuritySettings.block_sensitive_fields", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.SecuritySettings.sensitive_field_patterns", "modulename": "src.user_config", "qualname": "SecuritySettings.sensitive_field_patterns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.user_config.LoggingSettings", "modulename": "src.user_config", "qualname": "LoggingSettings", "kind": "class", "doc": "<p>User-configurable logging settings.</p>\n"}, {"fullname": "src.user_config.LoggingSettings.__init__", "modulename": "src.user_config", "qualname": "LoggingSettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">log_level</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;INFO&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;json&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">enable_query_logging</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">enable_performance_logging</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">log_sensitive_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_log_size_mb</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span>)</span>"}, {"fullname": "src.user_config.LoggingSettings.log_level", "modulename": "src.user_config", "qualname": "LoggingSettings.log_level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;INFO&#x27;"}, {"fullname": "src.user_config.LoggingSettings.log_format", "modulename": "src.user_config", "qualname": "LoggingSettings.log_format", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;json&#x27;"}, {"fullname": "src.user_config.LoggingSettings.enable_query_logging", "modulename": "src.user_config", "qualname": "LoggingSettings.enable_query_logging", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.LoggingSettings.enable_performance_logging", "modulename": "src.user_config", "qualname": "LoggingSettings.enable_performance_logging", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.LoggingSettings.log_sensitive_data", "modulename": "src.user_config", "qualname": "LoggingSettings.log_sensitive_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.user_config.LoggingSettings.max_log_size_mb", "modulename": "src.user_config", "qualname": "LoggingSettings.max_log_size_mb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "100"}, {"fullname": "src.user_config.CampaignSettings", "modulename": "src.user_config", "qualname": "CampaignSettings", "kind": "class", "doc": "<p>User-configurable campaign analysis settings.</p>\n"}, {"fullname": "src.user_config.CampaignSettings.__init__", "modulename": "src.user_config", "qualname": "CampaignSettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">correlation_window_minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">min_confidence_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span>,</span><span class=\"param\">\t<span class=\"n\">max_campaign_events</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>,</span><span class=\"param\">\t<span class=\"n\">enable_geospatial_correlation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">enable_infrastructure_correlation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">enable_behavioral_correlation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">enable_temporal_correlation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">enable_ip_correlation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">max_expansion_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">expansion_timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span></span>)</span>"}, {"fullname": "src.user_config.CampaignSettings.correlation_window_minutes", "modulename": "src.user_config", "qualname": "CampaignSettings.correlation_window_minutes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "30"}, {"fullname": "src.user_config.CampaignSettings.min_confidence_threshold", "modulename": "src.user_config", "qualname": "CampaignSettings.min_confidence_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.7"}, {"fullname": "src.user_config.CampaignSettings.max_campaign_events", "modulename": "src.user_config", "qualname": "CampaignSettings.max_campaign_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "10000"}, {"fullname": "src.user_config.CampaignSettings.enable_geospatial_correlation", "modulename": "src.user_config", "qualname": "CampaignSettings.enable_geospatial_correlation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.CampaignSettings.enable_infrastructure_correlation", "modulename": "src.user_config", "qualname": "CampaignSettings.enable_infrastructure_correlation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.CampaignSettings.enable_behavioral_correlation", "modulename": "src.user_config", "qualname": "CampaignSettings.enable_behavioral_correlation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.CampaignSettings.enable_temporal_correlation", "modulename": "src.user_config", "qualname": "CampaignSettings.enable_temporal_correlation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.CampaignSettings.enable_ip_correlation", "modulename": "src.user_config", "qualname": "CampaignSettings.enable_ip_correlation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.CampaignSettings.max_expansion_depth", "modulename": "src.user_config", "qualname": "CampaignSettings.max_expansion_depth", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "3"}, {"fullname": "src.user_config.CampaignSettings.expansion_timeout_seconds", "modulename": "src.user_config", "qualname": "CampaignSettings.expansion_timeout_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "300"}, {"fullname": "src.user_config.UserConfigManager", "modulename": "src.user_config", "qualname": "UserConfigManager", "kind": "class", "doc": "<p>Manages user-configurable settings with validation and environment variable support.</p>\n"}, {"fullname": "src.user_config.UserConfigManager.__init__", "modulename": "src.user_config", "qualname": "UserConfigManager.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.user_config.UserConfigManager.config_path", "modulename": "src.user_config", "qualname": "UserConfigManager.config_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.op_secrets", "modulename": "src.user_config", "qualname": "UserConfigManager.op_secrets", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.query_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.query_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.pagination_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.pagination_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.streaming_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.streaming_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.performance_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.performance_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.security_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.security_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.logging_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.logging_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.campaign_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.campaign_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.get_setting", "modulename": "src.user_config", "qualname": "UserConfigManager.get_setting", "kind": "function", "doc": "<p>Get a specific setting value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">setting</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.UserConfigManager.update_setting", "modulename": "src.user_config", "qualname": "UserConfigManager.update_setting", "kind": "function", "doc": "<p>Update a specific setting value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">setting</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.UserConfigManager.export_config", "modulename": "src.user_config", "qualname": "UserConfigManager.export_config", "kind": "function", "doc": "<p>Export current configuration as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.UserConfigManager.save_user_config", "modulename": "src.user_config", "qualname": "UserConfigManager.save_user_config", "kind": "function", "doc": "<p>Save current configuration to a user config file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.UserConfigManager.get_environment_variables", "modulename": "src.user_config", "qualname": "UserConfigManager.get_environment_variables", "kind": "function", "doc": "<p>Get environment variable names and their current values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.get_user_config", "modulename": "src.user_config", "qualname": "get_user_config", "kind": "function", "doc": "<p>Get the global user configuration manager instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">user_config</span><span class=\"o\">.</span><span class=\"n\">UserConfigManager</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.reset_user_config", "modulename": "src.user_config", "qualname": "reset_user_config", "kind": "function", "doc": "<p>Reset the global user configuration manager instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();
window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"src.mcp_error_handler": {"fullname": "src.mcp_error_handler", "modulename": "src.mcp_error_handler", "kind": "module", "doc": "<p>MCP Error Handler for DShield MCP Server.</p>\n\n<p>This module provides centralized error handling for all MCP operations,\nensuring proper JSON-RPC error responses with correct error codes,\ntimeout handling, retry logic, and comprehensive error context capture.</p>\n\n<p>The error handler follows the JSON-RPC 2.0 specification and provides\nuser-friendly error messages while maintaining detailed logging for\ndebugging and troubleshooting.</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>error_handler = MCPErrorHandler(config)\n      error_response = error_handler.create_validation_error(\"tool_name\", validation_error)\n      timeout_response = error_handler.create_timeout_error(\"tool_name\", 30)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, "src.mcp_error_handler.logger": {"fullname": "src.mcp_error_handler.logger", "modulename": "src.mcp_error_handler", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.mcp_error_handler&#x27;,))&gt;"}, "src.mcp_error_handler.CircuitBreakerState": {"fullname": "src.mcp_error_handler.CircuitBreakerState", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreakerState", "kind": "class", "doc": "<p>Circuit breaker states.</p>\n", "bases": "enum.Enum"}, "src.mcp_error_handler.CircuitBreakerState.CLOSED": {"fullname": "src.mcp_error_handler.CircuitBreakerState.CLOSED", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreakerState.CLOSED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CircuitBreakerState.CLOSED: &#x27;closed&#x27;&gt;"}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"fullname": "src.mcp_error_handler.CircuitBreakerState.OPEN", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreakerState.OPEN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CircuitBreakerState.OPEN: &#x27;open&#x27;&gt;"}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"fullname": "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreakerState.HALF_OPEN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CircuitBreakerState.HALF_OPEN: &#x27;half_open&#x27;&gt;"}, "src.mcp_error_handler.CircuitBreakerConfig": {"fullname": "src.mcp_error_handler.CircuitBreakerConfig", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreakerConfig", "kind": "class", "doc": "<p>Configuration for circuit breaker behavior.</p>\n\n<p>Attributes:\n    failure_threshold: Number of failures before opening circuit\n    recovery_timeout: Time to wait before attempting recovery\n    expected_exception: Exception types that count as failures\n    success_threshold: Number of successes needed to close circuit</p>\n"}, "src.mcp_error_handler.CircuitBreakerConfig.__init__": {"fullname": "src.mcp_error_handler.CircuitBreakerConfig.__init__", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreakerConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">failure_threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">recovery_timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">60.0</span>,</span><span class=\"param\">\texpected_exception: tuple = (&lt;class &#x27;Exception&#x27;&gt;,),</span><span class=\"param\">\t<span class=\"n\">success_threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span>)</span>"}, "src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"fullname": "src.mcp_error_handler.CircuitBreakerConfig.failure_threshold", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreakerConfig.failure_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "5"}, "src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"fullname": "src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreakerConfig.recovery_timeout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "60.0"}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"fullname": "src.mcp_error_handler.CircuitBreakerConfig.expected_exception", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreakerConfig.expected_exception", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&lt;class &#x27;Exception&#x27;&gt;,)"}, "src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"fullname": "src.mcp_error_handler.CircuitBreakerConfig.success_threshold", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreakerConfig.success_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "2"}, "src.mcp_error_handler.ErrorHandlingConfig": {"fullname": "src.mcp_error_handler.ErrorHandlingConfig", "modulename": "src.mcp_error_handler", "qualname": "ErrorHandlingConfig", "kind": "class", "doc": "<p>Configuration for error handling behavior.</p>\n\n<p>Attributes:\n    timeouts: Timeout settings for different operations\n    retry_settings: Retry configuration for transient failures\n    logging: Logging configuration for error handling\n    circuit_breaker: Circuit breaker configuration\n    error_aggregation: Error aggregation settings</p>\n"}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"fullname": "src.mcp_error_handler.ErrorHandlingConfig.__init__", "modulename": "src.mcp_error_handler", "qualname": "ErrorHandlingConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">timeouts</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">retry_settings</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">logging</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">circuit_breaker</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">mcp_error_handler</span><span class=\"o\">.</span><span class=\"n\">CircuitBreakerConfig</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">error_aggregation</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, "src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"fullname": "src.mcp_error_handler.ErrorHandlingConfig.timeouts", "modulename": "src.mcp_error_handler", "qualname": "ErrorHandlingConfig.timeouts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, float]"}, "src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"fullname": "src.mcp_error_handler.ErrorHandlingConfig.retry_settings", "modulename": "src.mcp_error_handler", "qualname": "ErrorHandlingConfig.retry_settings", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, "src.mcp_error_handler.ErrorHandlingConfig.logging": {"fullname": "src.mcp_error_handler.ErrorHandlingConfig.logging", "modulename": "src.mcp_error_handler", "qualname": "ErrorHandlingConfig.logging", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, "src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"fullname": "src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker", "modulename": "src.mcp_error_handler", "qualname": "ErrorHandlingConfig.circuit_breaker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.mcp_error_handler.CircuitBreakerConfig"}, "src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"fullname": "src.mcp_error_handler.ErrorHandlingConfig.error_aggregation", "modulename": "src.mcp_error_handler", "qualname": "ErrorHandlingConfig.error_aggregation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, "src.mcp_error_handler.MCPErrorHandler": {"fullname": "src.mcp_error_handler.MCPErrorHandler", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler", "kind": "class", "doc": "<p>Handles JSON-RPC error responses for MCP server.</p>\n\n<p>This class provides comprehensive error handling for all MCP operations,\nincluding proper error code generation, timeout handling, retry logic,\nand detailed error logging for debugging and troubleshooting.</p>\n\n<p>The error handler follows the JSON-RPC 2.0 specification and ensures\nthat all error responses are properly formatted and contain actionable\ninformation for users while maintaining detailed logging for developers.</p>\n\n<p>Attributes:\n    config: Error handling configuration\n    logger: Structured logger instance</p>\n"}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"fullname": "src.mcp_error_handler.MCPErrorHandler.__init__", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.__init__", "kind": "function", "doc": "<p>Initialize the MCP error handler.</p>\n\n<p>Args:\n    config: Error handling configuration. If None, uses default values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">mcp_error_handler</span><span class=\"o\">.</span><span class=\"n\">ErrorHandlingConfig</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"fullname": "src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.PARSE_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "-32700"}, "src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"fullname": "src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.INVALID_REQUEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "-32600"}, "src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"fullname": "src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.METHOD_NOT_FOUND", "kind": "variable", "doc": "<p></p>\n", "default_value": "-32601"}, "src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"fullname": "src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.INVALID_PARAMS", "kind": "variable", "doc": "<p></p>\n", "default_value": "-32602"}, "src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"fullname": "src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.INTERNAL_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "-32603"}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"fullname": "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.RESOURCE_NOT_FOUND", "kind": "variable", "doc": "<p></p>\n", "default_value": "-32001"}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"fullname": "src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.RESOURCE_ACCESS_DENIED", "kind": "variable", "doc": "<p></p>\n", "default_value": "-32002"}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"fullname": "src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.RESOURCE_UNAVAILABLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "-32003"}, "src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"fullname": "src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.TOOL_UNAVAILABLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "-32004"}, "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"fullname": "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.TIMEOUT_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "-32005"}, "src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"fullname": "src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.VALIDATION_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "-32006"}, "src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"fullname": "src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.EXTERNAL_SERVICE_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "-32007"}, "src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"fullname": "src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.RATE_LIMIT_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "-32008"}, "src.mcp_error_handler.MCPErrorHandler.config": {"fullname": "src.mcp_error_handler.MCPErrorHandler.config", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.config", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.MCPErrorHandler.logger": {"fullname": "src.mcp_error_handler.MCPErrorHandler.logger", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.logger", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.MCPErrorHandler.error_aggregator": {"fullname": "src.mcp_error_handler.MCPErrorHandler.error_aggregator", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.error_aggregator", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_error", "kind": "function", "doc": "<p>Create a properly formatted JSON-RPC error response.</p>\n\n<p>Args:\n    code: JSON-RPC error code\n    message: Human-readable error message\n    data: Additional error data (optional)\n    request_id: Request ID for correlation (optional)</p>\n\n<p>Returns:\n    Dictionary containing the JSON-RPC error response.</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>error = error_handler.create_error(\n          ...     MCPErrorHandler.INVALID_PARAMS,\n          ...     \"Invalid parameters provided\",\n          ...     {\"field\": \"time_range\", \"issue\": \"must be positive\"}\n          ... )</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">request_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_parse_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_parse_error", "kind": "function", "doc": "<p>Create a parse error response.</p>\n\n<p>Args:\n    message: Error message\n    data: Additional error data</p>\n\n<p>Returns:\n    Parse error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Parse error&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_invalid_request_error", "kind": "function", "doc": "<p>Create an invalid request error response.</p>\n\n<p>Args:\n    message: Error message\n    data: Additional error data</p>\n\n<p>Returns:\n    Invalid request error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Invalid request&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_method_not_found_error", "kind": "function", "doc": "<p>Create a method not found error response.</p>\n\n<p>Args:\n    method: Method name that was not found\n    data: Additional error data</p>\n\n<p>Returns:\n    Method not found error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_invalid_params_error", "kind": "function", "doc": "<p>Create an invalid parameters error response.</p>\n\n<p>Args:\n    message: Error message\n    data: Additional error data</p>\n\n<p>Returns:\n    Invalid parameters error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_internal_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_internal_error", "kind": "function", "doc": "<p>Create an internal error response.</p>\n\n<p>Args:\n    message: Error message\n    data: Additional error data</p>\n\n<p>Returns:\n    Internal error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_validation_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_validation_error", "kind": "function", "doc": "<p>Create a validation error response.</p>\n\n<p>Args:\n    tool_name: Name of the tool that failed validation\n    validation_error: Pydantic validation error\n    data: Additional error data</p>\n\n<p>Returns:\n    Validation error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tool_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">validation_error</span><span class=\"p\">:</span> <span class=\"n\">pydantic_core</span><span class=\"o\">.</span><span class=\"n\">_pydantic_core</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_timeout_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_timeout_error", "kind": "function", "doc": "<p>Create a timeout error response.</p>\n\n<p>Args:\n    tool_name: Name of the tool that timed out\n    timeout_seconds: Timeout value in seconds\n    data: Additional error data</p>\n\n<p>Returns:\n    Timeout error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tool_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_resource_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_resource_error", "kind": "function", "doc": "<p>Create a resource-related error response.</p>\n\n<p>Args:\n    resource_uri: URI of the resource that caused the error\n    error_type: Type of resource error\n    message: Error message\n    data: Additional error data</p>\n\n<p>Returns:\n    Resource error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">resource_uri</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">error_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_external_service_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_external_service_error", "kind": "function", "doc": "<p>Create an external service error response.</p>\n\n<p>Args:\n    service_name: Name of the external service\n    error_message: Error message from the service\n    data: Additional error data</p>\n\n<p>Returns:\n    External service error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">service_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_rate_limit_error", "kind": "function", "doc": "<p>Create a rate limit error response.</p>\n\n<p>Args:\n    service_name: Name of the service that rate limited the request\n    retry_after: Suggested retry delay in seconds\n    data: Additional error data</p>\n\n<p>Returns:\n    Rate limit error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">service_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">retry_after</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"fullname": "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.validate_tool_exists", "kind": "function", "doc": "<p>Validate that a tool exists before execution.</p>\n\n<p>Args:\n    tool_name: Name of the tool to validate\n    available_tools: List of available tool names</p>\n\n<p>Raises:\n    ValueError: If the tool does not exist.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tool_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">available_tools</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"fullname": "src.mcp_error_handler.MCPErrorHandler.validate_arguments", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.validate_arguments", "kind": "function", "doc": "<p>Validate arguments against a tool schema.</p>\n\n<p>Args:\n    tool_name: Name of the tool\n    arguments: Arguments to validate\n    schema: Tool schema for validation</p>\n\n<p>Raises:\n    ValidationError: If arguments are invalid.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tool_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"fullname": "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.execute_with_timeout", "kind": "function", "doc": "<p>Execute a coroutine with timeout protection.</p>\n\n<p>Args:\n    operation: Name of the operation for logging\n    coro: Coroutine to execute\n    timeout_seconds: Timeout in seconds (uses default if None)</p>\n\n<p>Returns:\n    Result of the coroutine execution.</p>\n\n<p>Raises:\n    asyncio.TimeoutError: If the operation times out.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">coro</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">timeout_seconds</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "async def"}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"fullname": "src.mcp_error_handler.MCPErrorHandler.execute_with_retry", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.execute_with_retry", "kind": "function", "doc": "<p>Execute a coroutine with retry logic and exponential backoff.</p>\n\n<p>Args:\n    operation: Name of the operation for logging\n    coro_factory: Coroutine factory function or callable that returns a coroutine\n    max_retries: Maximum number of retries (uses config default if None)\n    base_delay: Base delay between retries (uses config default if None)\n    max_delay: Maximum delay between retries (uses config default if None)\n    exponential_base: Exponential backoff multiplier (uses config default if None)</p>\n\n<p>Returns:\n    Result of the coroutine execution.</p>\n\n<p>Raises:\n    Exception: If all retries are exhausted.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">coro_factory</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">max_retries</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">base_delay</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_delay</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exponential_base</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "async def"}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"fullname": "src.mcp_error_handler.MCPErrorHandler.get_error_summary", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.get_error_summary", "kind": "function", "doc": "<p>Get a summary of error handling configuration.</p>\n\n<p>Returns:\n    Dictionary containing error handling configuration summary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_resource_not_found_error", "kind": "function", "doc": "<p>Create a resource not found error response.</p>\n\n<p>Args:\n    resource_uri: URI of the resource that was not found\n    data: Additional error data</p>\n\n<p>Returns:\n    Resource not found error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">resource_uri</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_resource_access_denied_error", "kind": "function", "doc": "<p>Create a resource access denied error response.</p>\n\n<p>Args:\n    resource_uri: URI of the resource that access was denied to\n    reason: Reason for access denial\n    data: Additional error data</p>\n\n<p>Returns:\n    Resource access denied error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">resource_uri</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">reason</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Permission denied&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_resource_unavailable_error", "kind": "function", "doc": "<p>Create a resource unavailable error response.</p>\n\n<p>Args:\n    resource_uri: URI of the resource that is unavailable\n    reason: Reason for unavailability\n    data: Additional error data</p>\n\n<p>Returns:\n    Resource unavailable error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">resource_uri</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">reason</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Resource temporarily unavailable&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_circuit_breaker_open_error", "kind": "function", "doc": "<p>Create a circuit breaker open error response.</p>\n\n<p>Args:\n    service_name: Name of the service with open circuit breaker\n    data: Additional error data</p>\n\n<p>Returns:\n    Circuit breaker open error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">service_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_validation_error_with_context", "kind": "function", "doc": "<p>Create a validation error response with additional context.</p>\n\n<p>Args:\n    tool_name: Name of the tool that failed validation\n    validation_error: Pydantic validation error\n    context: Additional context about the validation failure\n    data: Additional error data</p>\n\n<p>Returns:\n    Enhanced validation error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tool_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">validation_error</span><span class=\"p\">:</span> <span class=\"n\">pydantic_core</span><span class=\"o\">.</span><span class=\"n\">_pydantic_core</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"fullname": "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.create_timeout_error_with_context", "kind": "function", "doc": "<p>Create a timeout error response with operation context.</p>\n\n<p>Args:\n    tool_name: Name of the tool that timed out\n    timeout_seconds: Timeout value that was exceeded\n    operation_context: Context about the operation that timed out\n    data: Additional error data</p>\n\n<p>Returns:\n    Enhanced timeout error response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tool_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">operation_context</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"fullname": "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.get_enhanced_error_summary", "kind": "function", "doc": "<p>Get an enhanced summary including Phase 3 features.</p>\n\n<p>Returns:\n    Dictionary containing comprehensive error handling configuration and capabilities.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"fullname": "src.mcp_error_handler.MCPErrorHandler.get_error_analytics", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.get_error_analytics", "kind": "function", "doc": "<p>Get error analytics and patterns from the aggregator.</p>\n\n<p>Args:\n    window_seconds: Time window in seconds (uses config default if None)</p>\n\n<p>Returns:\n    Dictionary containing error analytics and patterns.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window_seconds</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"fullname": "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status", "modulename": "src.mcp_error_handler", "qualname": "MCPErrorHandler.get_circuit_breaker_status", "kind": "function", "doc": "<p>Get circuit breaker status for a specific service.</p>\n\n<p>Args:\n    service_name: Name of the service to check</p>\n\n<p>Returns:\n    Circuit breaker status or None if not found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">service_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.CircuitBreaker": {"fullname": "src.mcp_error_handler.CircuitBreaker", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker", "kind": "class", "doc": "<p>Circuit breaker implementation for external service calls.</p>\n\n<p>This class implements the circuit breaker pattern to prevent cascading failures\nwhen external services are experiencing issues. It tracks failures and\nautomatically opens the circuit when the failure threshold is reached.</p>\n\n<p>Attributes:\n    config: Circuit breaker configuration\n    state: Current circuit breaker state\n    failure_count: Number of consecutive failures\n    success_count: Number of consecutive successes\n    last_failure_time: Timestamp of last failure\n    logger: Structured logger instance</p>\n"}, "src.mcp_error_handler.CircuitBreaker.__init__": {"fullname": "src.mcp_error_handler.CircuitBreaker.__init__", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker.__init__", "kind": "function", "doc": "<p>Initialize the circuit breaker.</p>\n\n<p>Args:\n    service_name: Name of the service being protected\n    config: Circuit breaker configuration</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">service_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">mcp_error_handler</span><span class=\"o\">.</span><span class=\"n\">CircuitBreakerConfig</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "src.mcp_error_handler.CircuitBreaker.service_name": {"fullname": "src.mcp_error_handler.CircuitBreaker.service_name", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker.service_name", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.CircuitBreaker.config": {"fullname": "src.mcp_error_handler.CircuitBreaker.config", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker.config", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.CircuitBreaker.state": {"fullname": "src.mcp_error_handler.CircuitBreaker.state", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker.state", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.CircuitBreaker.failure_count": {"fullname": "src.mcp_error_handler.CircuitBreaker.failure_count", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker.failure_count", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.CircuitBreaker.success_count": {"fullname": "src.mcp_error_handler.CircuitBreaker.success_count", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker.success_count", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.CircuitBreaker.last_failure_time": {"fullname": "src.mcp_error_handler.CircuitBreaker.last_failure_time", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker.last_failure_time", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.CircuitBreaker.logger": {"fullname": "src.mcp_error_handler.CircuitBreaker.logger", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker.logger", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"fullname": "src.mcp_error_handler.CircuitBreaker.can_execute", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker.can_execute", "kind": "function", "doc": "<p>Check if the circuit breaker allows execution.</p>\n\n<p>Returns:\n    True if execution is allowed, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.CircuitBreaker.on_success": {"fullname": "src.mcp_error_handler.CircuitBreaker.on_success", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker.on_success", "kind": "function", "doc": "<p>Record a successful operation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"fullname": "src.mcp_error_handler.CircuitBreaker.on_failure", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker.on_failure", "kind": "function", "doc": "<p>Record a failed operation.</p>\n\n<p>Args:\n    exception: The exception that occurred</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exception</span><span class=\"p\">:</span> <span class=\"ne\">Exception</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.CircuitBreaker.get_status": {"fullname": "src.mcp_error_handler.CircuitBreaker.get_status", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker.get_status", "kind": "function", "doc": "<p>Get the current status of the circuit breaker.</p>\n\n<p>Returns:\n    Dictionary containing circuit breaker status.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.CircuitBreaker.execute": {"fullname": "src.mcp_error_handler.CircuitBreaker.execute", "modulename": "src.mcp_error_handler", "qualname": "CircuitBreaker.execute", "kind": "function", "doc": "<p>Execute a coroutine with circuit breaker protection.</p>\n\n<p>Args:\n    coro_factory: Coroutine factory function or callable\n    error_handler: MCPErrorHandler instance for error responses</p>\n\n<p>Returns:\n    Result of the coroutine execution.</p>\n\n<p>Raises:\n    Exception: If the circuit breaker is open or execution fails.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">coro_factory</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">error_handler</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">mcp_error_handler</span><span class=\"o\">.</span><span class=\"n\">MCPErrorHandler</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "async def"}, "src.mcp_error_handler.ErrorAggregator": {"fullname": "src.mcp_error_handler.ErrorAggregator", "modulename": "src.mcp_error_handler", "qualname": "ErrorAggregator", "kind": "class", "doc": "<p>Error aggregation and analytics for monitoring and debugging.</p>\n\n<p>This class tracks error patterns, frequencies, and trends to help\nidentify systemic issues and provide insights for debugging.</p>\n\n<p>Attributes:\n    config: Error aggregation configuration\n    error_counts: Count of errors by type and time window\n    error_history: Recent error history for analysis\n    logger: Structured logger instance</p>\n"}, "src.mcp_error_handler.ErrorAggregator.__init__": {"fullname": "src.mcp_error_handler.ErrorAggregator.__init__", "modulename": "src.mcp_error_handler", "qualname": "ErrorAggregator.__init__", "kind": "function", "doc": "<p>Initialize the error aggregator.</p>\n\n<p>Args:\n    config: Error aggregation configuration</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "src.mcp_error_handler.ErrorAggregator.config": {"fullname": "src.mcp_error_handler.ErrorAggregator.config", "modulename": "src.mcp_error_handler", "qualname": "ErrorAggregator.config", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.ErrorAggregator.error_counts": {"fullname": "src.mcp_error_handler.ErrorAggregator.error_counts", "modulename": "src.mcp_error_handler", "qualname": "ErrorAggregator.error_counts", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.ErrorAggregator.error_history": {"fullname": "src.mcp_error_handler.ErrorAggregator.error_history", "modulename": "src.mcp_error_handler", "qualname": "ErrorAggregator.error_history", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.ErrorAggregator.logger": {"fullname": "src.mcp_error_handler.ErrorAggregator.logger", "modulename": "src.mcp_error_handler", "qualname": "ErrorAggregator.logger", "kind": "variable", "doc": "<p></p>\n"}, "src.mcp_error_handler.ErrorAggregator.record_error": {"fullname": "src.mcp_error_handler.ErrorAggregator.record_error", "modulename": "src.mcp_error_handler", "qualname": "ErrorAggregator.record_error", "kind": "function", "doc": "<p>Record an error occurrence.</p>\n\n<p>Args:\n    error_code: JSON-RPC error code\n    error_type: Type of error (e.g., 'timeout', 'validation', 'external_service')\n    context: Additional context about the error</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">error_code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">error_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"fullname": "src.mcp_error_handler.ErrorAggregator.get_error_summary", "modulename": "src.mcp_error_handler", "qualname": "ErrorAggregator.get_error_summary", "kind": "function", "doc": "<p>Get a summary of error patterns.</p>\n\n<p>Args:\n    window_seconds: Time window in seconds (uses config default if None)</p>\n\n<p>Returns:\n    Dictionary containing error summary and patterns.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window_seconds</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"fullname": "src.mcp_error_handler.ErrorAggregator.get_error_trends", "modulename": "src.mcp_error_handler", "qualname": "ErrorAggregator.get_error_trends", "kind": "function", "doc": "<p>Get error trends over a longer time period.</p>\n\n<p>Args:\n    hours: Number of hours to analyze</p>\n\n<p>Returns:\n    Dictionary containing error trends and patterns.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "src.mcp_error_handler.ErrorAggregator.reset": {"fullname": "src.mcp_error_handler.ErrorAggregator.reset", "modulename": "src.mcp_error_handler", "qualname": "ErrorAggregator.reset", "kind": "function", "doc": "<p>Reset all error tracking data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"src.mcp_error_handler": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 112}, "src.mcp_error_handler.logger": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 27, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreakerState": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 6}, "src.mcp_error_handler.CircuitBreakerState.CLOSED": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 11, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreakerConfig": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 44}, "src.mcp_error_handler.CircuitBreakerConfig.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.ErrorHandlingConfig": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 40}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 197, "bases": 0, "doc": 3}, "src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"qualname": 2, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"qualname": 3, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.ErrorHandlingConfig.logging": {"qualname": 2, "fullname": 6, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"qualname": 3, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"qualname": 3, "fullname": 7, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 86}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 21}, "src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.config": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.logger": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.error_aggregator": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 108, "bases": 0, "doc": 88}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 25}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 27}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 33}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 27}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 25}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 98, "bases": 0, "doc": 36}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 85, "bases": 0, "doc": 37}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 96, "bases": 0, "doc": 42}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 85, "bases": 0, "doc": 38}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 98, "bases": 0, "doc": 42}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 39}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 36}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 53}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 138, "bases": 0, "doc": 96}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 20}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 36}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 96, "bases": 0, "doc": 42}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 97, "bases": 0, "doc": 37}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 36}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 121, "bases": 0, "doc": 47}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 109, "bases": 0, "doc": 51}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 23}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 36}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 34}, "src.mcp_error_handler.CircuitBreaker": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 79}, "src.mcp_error_handler.CircuitBreaker.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 22}, "src.mcp_error_handler.CircuitBreaker.service_name": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreaker.config": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreaker.state": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreaker.failure_count": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreaker.success_count": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreaker.last_failure_time": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreaker.logger": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 21}, "src.mcp_error_handler.CircuitBreaker.on_success": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 7}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 15}, "src.mcp_error_handler.CircuitBreaker.get_status": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 20}, "src.mcp_error_handler.CircuitBreaker.execute": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 50}, "src.mcp_error_handler.ErrorAggregator": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 60}, "src.mcp_error_handler.ErrorAggregator.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 14}, "src.mcp_error_handler.ErrorAggregator.config": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.ErrorAggregator.error_counts": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.ErrorAggregator.error_history": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.ErrorAggregator.logger": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "src.mcp_error_handler.ErrorAggregator.record_error": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 33}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 34}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 30}, "src.mcp_error_handler.ErrorAggregator.reset": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 8}}, "length": 86, "save": true}, "index": {"qualname": {"root": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.logger": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.logger": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.logging": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreaker.last_failure_time": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}}, "df": 3, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.service_name": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.config": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.state": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.failure_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.success_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.last_failure_time": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 14, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreakerState": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1}}, "df": 4}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.MCPErrorHandler.config": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.config": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.config": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreaker.failure_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.success_count": {"tf": 1}}, "df": 2, "s": {"docs": {"src.mcp_error_handler.ErrorAggregator.error_counts": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 17}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}}, "df": 3}}}, "n": {"docs": {"src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}}, "df": 2}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.ErrorAggregator.error_history": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}}, "df": 5}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}}, "df": 2}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.failure_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.last_failure_time": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}}, "df": 4}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreaker.last_failure_time": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 5, "s": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}}, "df": 2}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}}, "df": 7}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 4}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.error_aggregator": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.error_counts": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.error_history": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 33, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.logging": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"tf": 1}}, "df": 7}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.config": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.error_counts": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.error_history": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.logger": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 10}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.success_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}}, "df": 3}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.service_name": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}}, "df": 2}}, "e": {"docs": {"src.mcp_error_handler.CircuitBreaker.state": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}}, "df": 3}}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler.error_aggregator": {"tf": 1}}, "df": 1}}}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}}, "df": 1}}}}}}}}}, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.config": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.logger": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.error_aggregator": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}}, "df": 43}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreaker.service_name": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}}, "df": 3}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}}, "df": 3}}}, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}}, "df": 2}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 4}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 7}}}}}, "fullname": {"root": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}}, "df": 5, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.logging": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.config": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.logger": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.error_aggregator": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.service_name": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.config": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.state": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.failure_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.success_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.last_failure_time": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.config": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.error_counts": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.error_history": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.logger": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 86}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.success_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}}, "df": 3}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.service_name": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}}, "df": 2}}, "e": {"docs": {"src.mcp_error_handler.CircuitBreaker.state": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.logging": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.config": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.logger": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.error_aggregator": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.service_name": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.config": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.state": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.failure_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.success_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.last_failure_time": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.config": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.error_counts": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.error_history": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.logger": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 86, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.config": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.logger": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.error_aggregator": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}}, "df": 43}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.logging": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.config": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.logger": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.error_aggregator": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.service_name": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.config": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.state": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.failure_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.success_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.last_failure_time": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.config": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.error_counts": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.error_history": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.logger": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 86, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.logging": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"tf": 1}}, "df": 7}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.config": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.error_counts": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.error_history": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.logger": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 10}}}}}}}}}}}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 4}}}}}}, "n": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}}, "df": 1}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.logging": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.config": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.logger": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.error_aggregator": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.service_name": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.config": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.state": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.failure_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.success_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.last_failure_time": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.config": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.error_counts": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.error_history": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.logger": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 86}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.ErrorAggregator.error_history": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.logger": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.logger": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.logging": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreaker.last_failure_time": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}}, "df": 3, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.service_name": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.config": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.state": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.failure_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.success_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.last_failure_time": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 14, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreakerState": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1}}, "df": 4}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.MCPErrorHandler.config": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.config": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.config": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreaker.failure_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.success_count": {"tf": 1}}, "df": 2, "s": {"docs": {"src.mcp_error_handler.ErrorAggregator.error_counts": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 17}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}}, "df": 3}}}, "n": {"docs": {"src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}}, "df": 5}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}}, "df": 2}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.failure_count": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.last_failure_time": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}}, "df": 4}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreaker.last_failure_time": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 5, "s": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}}, "df": 2}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}}, "df": 7}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}}, "df": 3}}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler.error_aggregator": {"tf": 1}}, "df": 1}}}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreaker.service_name": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}}, "df": 3}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}}, "df": 3}}}, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}}, "df": 2}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 4}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 7}}}}}, "annotation": {"root": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.logging": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"tf": 1}}, "df": 9, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.logging": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.logging": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}, "default_value": {"root": {"0": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}}, "df": 1}, "2": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1}}, "df": 1}, "3": {"2": {"0": {"0": {"1": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}}, "df": 1}, "2": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}}, "df": 1}, "3": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"tf": 1}}, "df": 1}, "4": {"docs": {"src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"tf": 1}}, "df": 1}, "5": {"docs": {"src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"tf": 1}}, "df": 1}, "6": {"docs": {"src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"tf": 1}}, "df": 1}, "7": {"docs": {"src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1}}, "df": 1}, "8": {"docs": {"src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "6": {"0": {"0": {"docs": {"src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"tf": 1}}, "df": 1}, "1": {"docs": {"src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}}, "df": 1}, "2": {"docs": {"src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"tf": 1}}, "df": 1}, "3": {"docs": {"src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "7": {"0": {"0": {"docs": {"src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "5": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1}}, "df": 1}, "6": {"0": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"src.mcp_error_handler.logger": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1}}, "df": 18, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}}, "df": 5}, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.logger": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.logger": {"tf": 2}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.logger": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}}, "df": 1}}}}, "x": {"2": {"7": {"docs": {"src.mcp_error_handler.logger": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1.4142135623730951}}, "df": 5}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}}, "df": 1}}}}, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}}, "df": 1}}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1.4142135623730951}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.logger": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1}}, "df": 5}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "signature": {"root": {"0": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}}, "df": 1}, "2": {"4": {"docs": {"src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 1}, "docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}}, "df": 1}, "3": {"9": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1.4142135623730951}}, "df": 4}, "docs": {}, "df": 0}, "5": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}}, "df": 1}, "6": {"0": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 7.211102550927978}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 12.529964086141668}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 5.5677643628300215}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 9.433981132056603}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 8.246211251235321}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 8.246211251235321}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 7.745966692414834}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 7.745966692414834}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 7.745966692414834}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 8.831760866327848}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 8.306623862918075}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 8.831760866327848}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 8.306623862918075}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 8.94427190999916}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 5.744562646538029}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 7.745966692414834}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 7.14142842854285}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 10.535653752852738}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 4.69041575982343}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 7.745966692414834}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 8.774964387392123}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 8.774964387392123}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 7.745966692414834}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 9.848857801796104}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 9.38083151964686}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 4.69041575982343}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 6.4031242374328485}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 5.744562646538029}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 6.4031242374328485}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 3.4641016151377544}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 3.4641016151377544}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 4.47213595499958}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 4.69041575982343}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 6.244997998398398}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 5.5677643628300215}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 6.782329983125268}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 6.4031242374328485}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 6}, "src.mcp_error_handler.ErrorAggregator.reset": {"tf": 3.4641016151377544}}, "df": 39, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 2.23606797749979}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 3}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 7}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 4, "s": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 6, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}}, "df": 1}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 7}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1.4142135623730951}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}}, "df": 1}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1.4142135623730951}}, "df": 10, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 2.23606797749979}}, "df": 2}, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 3}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1.4142135623730951}}, "df": 2}, "o": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 3}}}}, "x": {"2": {"7": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "g": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 2.23606797749979}}, "df": 2}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 2.23606797749979}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 32}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 34}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}}, "df": 5}}}}}, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}}, "df": 5}}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 4}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 28}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 17}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.4142135623730951}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 31}}, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}}, "df": 1}}}}}}}}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.4142135623730951}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}}, "df": 7}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "x": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.4142135623730951}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1.4142135623730951}}, "df": 4}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}}, "df": 25}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 3}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 30}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}}, "df": 11}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}}, "df": 1}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}}, "df": 4}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}}, "df": 1}}}}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}}, "df": 2}}}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"src.mcp_error_handler.CircuitBreakerState": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "doc": {"root": {"0": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 2}, "2": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 2}, "3": {"0": {"docs": {"src.mcp_error_handler": {"tf": 1}}, "df": 1}, "docs": {"src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}}, "df": 1}, "docs": {"src.mcp_error_handler": {"tf": 5.0990195135927845}, "src.mcp_error_handler.logger": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreakerState": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreakerState.CLOSED": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreakerState.OPEN": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreakerState.HALF_OPEN": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreakerConfig": {"tf": 2.23606797749979}, "src.mcp_error_handler.CircuitBreakerConfig.__init__": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreakerConfig.failure_threshold": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreakerConfig.recovery_timeout": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreakerConfig.expected_exception": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreakerConfig.success_threshold": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 2.23606797749979}, "src.mcp_error_handler.ErrorHandlingConfig.__init__": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorHandlingConfig.timeouts": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorHandlingConfig.retry_settings": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorHandlingConfig.logging": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorHandlingConfig.circuit_breaker": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorHandlingConfig.error_aggregation": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 3.3166247903554}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 2.449489742783178}, "src.mcp_error_handler.MCPErrorHandler.PARSE_ERROR": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.INVALID_REQUEST": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.METHOD_NOT_FOUND": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.INVALID_PARAMS": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.INTERNAL_ERROR": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_NOT_FOUND": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_ACCESS_DENIED": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.RESOURCE_UNAVAILABLE": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.TOOL_UNAVAILABLE": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.TIMEOUT_ERROR": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.VALIDATION_ERROR": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.EXTERNAL_SERVICE_ERROR": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.RATE_LIMIT_ERROR": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.config": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.logger": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.error_aggregator": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 5.477225575051661}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 3.4641016151377544}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 3.4641016151377544}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 2.449489742783178}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 2.449489742783178}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 3}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 2.8284271247461903}, "src.mcp_error_handler.CircuitBreaker": {"tf": 2.8284271247461903}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 2.23606797749979}, "src.mcp_error_handler.CircuitBreaker.service_name": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker.config": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker.state": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker.failure_count": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker.success_count": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker.last_failure_time": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker.logger": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 2.449489742783178}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 2.23606797749979}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 2.449489742783178}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 3.3166247903554}, "src.mcp_error_handler.ErrorAggregator": {"tf": 2.8284271247461903}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 2.23606797749979}, "src.mcp_error_handler.ErrorAggregator.config": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorAggregator.error_counts": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorAggregator.error_history": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorAggregator.logger": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 2.23606797749979}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 3}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 2.8284271247461903}, "src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1.7320508075688772}}, "df": 86, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {"src.mcp_error_handler": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1.4142135623730951}}, "df": 7, "s": {"docs": {"src.mcp_error_handler": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 2}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 2}}}}}}}}}, "x": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}}, "df": 1}}}}}}}}}}, "e": {"docs": {"src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler": {"tf": 3.7416573867739413}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 2.6457513110645907}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 2.8284271247461903}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 2.23606797749979}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 2.6457513110645907}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 2.23606797749979}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 2.23606797749979}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator": {"tf": 2.449489742783178}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 2.449489742783178}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 31, "s": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}}, "df": 3}}}}}}}, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 1, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1.4142135623730951}}, "df": 5}}}, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 3}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}}, "df": 1}}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler": {"tf": 2.23606797749979}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 5}, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}}, "df": 6}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 2.23606797749979}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1.7320508075688772}}, "df": 14, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 2}}, "df": 3, "s": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1.7320508075688772}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}}, "df": 3}}, "s": {"docs": {"src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}}, "df": 5}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 2}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1.7320508075688772}}, "df": 1}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 7}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 18}}}, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 2.23606797749979}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 7, "s": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1.4142135623730951}}, "df": 6}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"src.mcp_error_handler.CircuitBreakerState": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1.4142135623730951}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 3}}}}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 2}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 4}}, "e": {"docs": {"src.mcp_error_handler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 29}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}}, "df": 15}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 7, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 2}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 8, "s": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.4142135623730951}}, "df": 2}, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "o": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 9, "o": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 2.23606797749979}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.4142135623730951}}, "df": 7, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 1, "s": {"docs": {"src.mcp_error_handler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 2}, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1.4142135623730951}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 1, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 4}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}}, "df": 2}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 3, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 2}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1.7320508075688772}}, "df": 3}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {"src.mcp_error_handler": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}}, "df": 3}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1.4142135623730951}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 7}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}}, "df": 10, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}}, "df": 10}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 3, "s": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 18}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerState": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker": {"tf": 2.23606797749979}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1.4142135623730951}}, "df": 10}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 3}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 24, "l": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 4, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 6, "d": {"docs": {"src.mcp_error_handler": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 2.23606797749979}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 9}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 1}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 5}}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}}, "df": 1, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 4}, "g": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 31}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 2}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 2}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 18}}}}}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}}, "df": 5, "s": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 3}}}}}}}, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "f": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1.7320508075688772}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 26}, "u": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.4142135623730951}}, "df": 3}}, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1.4142135623730951}}, "df": 3}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 1}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {"src.mcp_error_handler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 4}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.4142135623730951}}, "df": 18, "s": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 3}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 2.23606797749979}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 2}}, "df": 4}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.ErrorAggregator.reset": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 2.23606797749979}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_parse_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 28}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1.4142135623730951}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreaker.on_success": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.on_failure": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1.4142135623730951}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}}, "df": 3}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.7320508075688772}}, "df": 1}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 5}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 7}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}}, "df": 1}}, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 4}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}}, "df": 3}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1.4142135623730951}}, "df": 3}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1.4142135623730951}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler": {"tf": 1}}, "df": 1, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 1}}, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}}, "df": 5}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_access_denied_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1.4142135623730951}}, "df": 4}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1.7320508075688772}}, "df": 1}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 2.23606797749979}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 2.449489742783178}, "src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1}}, "df": 2, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 1}}}}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_external_service_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_validation_error_with_context": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_timeout_error_with_context": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1.4142135623730951}}, "df": 15, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1.4142135623730951}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 2}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}}, "df": 6}}, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_method_not_found_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_resource_not_found_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}}, "df": 4}}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.CircuitBreakerState": {"tf": 1}, "src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_circuit_breaker_open_error": {"tf": 1.7320508075688772}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker": {"tf": 2}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1.4142135623730951}}, "df": 10}}}}}}, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 1, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1}, "src.mcp_error_handler.ErrorHandlingConfig": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.CircuitBreakerConfig": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 1.7320508075688772}}, "df": 1}}}, "y": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_timeout_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.create_rate_limit_error": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}}, "df": 5, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.__init__": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.__init__": {"tf": 1}}, "df": 3}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_request_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.create_invalid_params_error": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_internal_error": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "f": {"docs": {"src.mcp_error_handler.MCPErrorHandler.__init__": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_tool_exists": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.validate_arguments": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.execute_with_timeout": {"tf": 1.4142135623730951}, "src.mcp_error_handler.MCPErrorHandler.execute_with_retry": {"tf": 2.23606797749979}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1.4142135623730951}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}}, "df": 10}, "d": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_resource_unavailable_error": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.can_execute": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.execute": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"src.mcp_error_handler.MCPErrorHandler.create_error": {"tf": 1}}, "df": 1, "s": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {"src.mcp_error_handler.CircuitBreaker": {"tf": 1}}, "df": 1}}, "g": {"docs": {"src.mcp_error_handler.ErrorAggregator.record_error": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"src.mcp_error_handler.MCPErrorHandler": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {"src.mcp_error_handler.MCPErrorHandler.get_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_enhanced_error_summary": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_error_analytics": {"tf": 1}, "src.mcp_error_handler.MCPErrorHandler.get_circuit_breaker_status": {"tf": 1}, "src.mcp_error_handler.CircuitBreaker.get_status": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_summary": {"tf": 1}, "src.mcp_error_handler.ErrorAggregator.get_error_trends": {"tf": 1}}, "df": 7}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();
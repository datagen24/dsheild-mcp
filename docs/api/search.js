window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src", "modulename": "src", "kind": "module", "doc": "<p>DShield MCP - Elastic SIEM Integration Package</p>\n\n<p>This package provides a Model Context Protocol (MCP) server that integrates with\nDShield's threat intelligence platform and Elasticsearch for security information\nand event management (SIEM) operations.</p>\n\n<h2 id=\"overview\">Overview</h2>\n\n<p>The DShield MCP package enables AI assistants to interact with security data\nthrough a standardized protocol, providing tools for:</p>\n\n<ul>\n<li>Campaign analysis and threat intelligence</li>\n<li>Elasticsearch querying and data retrieval</li>\n<li>DShield API integration for threat feeds</li>\n<li>Data dictionary management for security events</li>\n<li>Context injection for enhanced AI interactions</li>\n</ul>\n\n<h2 id=\"main-components\">Main Components</h2>\n\n<h3 id=\"core-mcp-server\">Core MCP Server</h3>\n\n<ul>\n<li><code>mcp_server.py</code>: Main MCP server implementation with tool registration</li>\n</ul>\n\n<h3 id=\"data-processing-analysis\">Data Processing &amp; Analysis</h3>\n\n<ul>\n<li><code>campaign_analyzer.py</code>: Campaign analysis and threat intelligence tools</li>\n<li><code>data_processor.py</code>: Data processing, validation, and transformation utilities</li>\n<li><code>data_dictionary.py</code>: Security event data dictionary and schema management</li>\n</ul>\n\n<h3 id=\"external-integrations\">External Integrations</h3>\n\n<ul>\n<li><code>dshield_client.py</code>: DShield API client for threat intelligence</li>\n<li><code>elasticsearch_client.py</code>: Elasticsearch client for SIEM data operations</li>\n</ul>\n\n<h3 id=\"configuration-security\">Configuration &amp; Security</h3>\n\n<ul>\n<li><code>config_loader.py</code>: Configuration management with YAML support</li>\n<li><code>op_secrets.py</code>: 1Password CLI integration for secure secrets management</li>\n<li><code>user_config.py</code>: User configuration and preferences management</li>\n</ul>\n\n<h3 id=\"utilities\">Utilities</h3>\n\n<ul>\n<li><code>context_injector.py</code>: Context injection utilities for AI interactions</li>\n<li><code>models.py</code>: Pydantic models for data validation and serialization</li>\n</ul>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>The package is designed to be used as an MCP server that can be integrated\nwith AI assistants supporting the Model Context Protocol. It provides a\ncomprehensive set of tools for security analysis and threat intelligence.</p>\n\n<h2 id=\"configuration\">Configuration</h2>\n\n<p>Configuration is managed through YAML files with support for 1Password CLI\nintegration for secure secrets management. See <code>config_loader.py</code> for details.</p>\n\n<h2 id=\"security\">Security</h2>\n\n<p>All sensitive information is managed through 1Password CLI integration,\nensuring no secrets are stored in plain text in configuration files.</p>\n"}, {"fullname": "src.campaign_analyzer", "modulename": "src.campaign_analyzer", "kind": "module", "doc": "<p>Campaign Analysis Engine for DShield MCP.</p>\n\n<p>Core campaign correlation and analysis engine for identifying coordinated attack campaigns.</p>\n"}, {"fullname": "src.campaign_analyzer.logger", "modulename": "src.campaign_analyzer", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.campaign_analyzer&#x27;,))&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod", "kind": "class", "doc": "<p>Correlation methods for campaign analysis.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.IP_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.IP_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.IP_CORRELATION: &#x27;ip_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.INFRASTRUCTURE_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.INFRASTRUCTURE_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.INFRASTRUCTURE_CORRELATION: &#x27;infrastructure_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.BEHAVIORAL_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.BEHAVIORAL_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.BEHAVIORAL_CORRELATION: &#x27;behavioral_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.TEMPORAL_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.TEMPORAL_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.TEMPORAL_CORRELATION: &#x27;temporal_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.GEOSPATIAL_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.GEOSPATIAL_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.GEOSPATIAL_CORRELATION: &#x27;geospatial_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.SIGNATURE_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.SIGNATURE_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.SIGNATURE_CORRELATION: &#x27;signature_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CorrelationMethod.NETWORK_CORRELATION", "modulename": "src.campaign_analyzer", "qualname": "CorrelationMethod.NETWORK_CORRELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CorrelationMethod.NETWORK_CORRELATION: &#x27;network_correlation&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CampaignConfidence", "modulename": "src.campaign_analyzer", "qualname": "CampaignConfidence", "kind": "class", "doc": "<p>Campaign confidence levels.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.campaign_analyzer.CampaignConfidence.LOW", "modulename": "src.campaign_analyzer", "qualname": "CampaignConfidence.LOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CampaignConfidence.LOW: &#x27;low&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CampaignConfidence.MEDIUM", "modulename": "src.campaign_analyzer", "qualname": "CampaignConfidence.MEDIUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CampaignConfidence.MEDIUM: &#x27;medium&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CampaignConfidence.HIGH", "modulename": "src.campaign_analyzer", "qualname": "CampaignConfidence.HIGH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CampaignConfidence.HIGH: &#x27;high&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CampaignConfidence.CRITICAL", "modulename": "src.campaign_analyzer", "qualname": "CampaignConfidence.CRITICAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CampaignConfidence.CRITICAL: &#x27;critical&#x27;&gt;"}, {"fullname": "src.campaign_analyzer.CampaignEvent", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent", "kind": "class", "doc": "<p>Individual event within a campaign.</p>\n"}, {"fullname": "src.campaign_analyzer.CampaignEvent.__init__", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">event_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">source_ip</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">destination_ip</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">event_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">event_category</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ttp_technique</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ttp_tactic</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">user_agent</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">confidence_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "src.campaign_analyzer.CampaignEvent.event_id", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.event_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.campaign_analyzer.CampaignEvent.timestamp", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.campaign_analyzer.CampaignEvent.source_ip", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.source_ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.destination_ip", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.destination_ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.event_type", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.event_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.event_category", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.event_category", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.ttp_technique", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.ttp_technique", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.ttp_tactic", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.ttp_tactic", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.user_agent", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.user_agent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.url", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.payload", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.payload", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.CampaignEvent.confidence_score", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.confidence_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "src.campaign_analyzer.CampaignEvent.metadata", "modulename": "src.campaign_analyzer", "qualname": "CampaignEvent.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship", "kind": "class", "doc": "<p>Relationship between indicators in a campaign.</p>\n"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.__init__", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source_indicator</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">target_indicator</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">relationship_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">confidence_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">evidence</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">first_seen</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">last_seen</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.source_indicator", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.source_indicator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.target_indicator", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.target_indicator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.relationship_type", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.relationship_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.confidence_score", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.confidence_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.evidence", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.evidence", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.first_seen", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.first_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.IndicatorRelationship.last_seen", "modulename": "src.campaign_analyzer", "qualname": "IndicatorRelationship.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.Campaign", "modulename": "src.campaign_analyzer", "qualname": "Campaign", "kind": "class", "doc": "<p>Campaign data model.</p>\n"}, {"fullname": "src.campaign_analyzer.Campaign.__init__", "modulename": "src.campaign_analyzer", "qualname": "Campaign.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">campaign_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">confidence_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">attack_vectors</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">related_indicators</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">suspected_actor</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">campaign_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">total_events</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">unique_ips</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">unique_targets</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ttp_techniques</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">ttp_tactics</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">infrastructure_domains</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">geographic_regions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">CampaignEvent</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">relationships</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">IndicatorRelationship</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "src.campaign_analyzer.Campaign.campaign_id", "modulename": "src.campaign_analyzer", "qualname": "Campaign.campaign_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.campaign_analyzer.Campaign.confidence_score", "modulename": "src.campaign_analyzer", "qualname": "Campaign.confidence_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.campaign_analyzer.Campaign.start_time", "modulename": "src.campaign_analyzer", "qualname": "Campaign.start_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.campaign_analyzer.Campaign.end_time", "modulename": "src.campaign_analyzer", "qualname": "Campaign.end_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.campaign_analyzer.Campaign.attack_vectors", "modulename": "src.campaign_analyzer", "qualname": "Campaign.attack_vectors", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.Campaign.related_indicators", "modulename": "src.campaign_analyzer", "qualname": "Campaign.related_indicators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.Campaign.suspected_actor", "modulename": "src.campaign_analyzer", "qualname": "Campaign.suspected_actor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.Campaign.campaign_name", "modulename": "src.campaign_analyzer", "qualname": "Campaign.campaign_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.Campaign.description", "modulename": "src.campaign_analyzer", "qualname": "Campaign.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "src.campaign_analyzer.Campaign.total_events", "modulename": "src.campaign_analyzer", "qualname": "Campaign.total_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "src.campaign_analyzer.Campaign.unique_ips", "modulename": "src.campaign_analyzer", "qualname": "Campaign.unique_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "src.campaign_analyzer.Campaign.unique_targets", "modulename": "src.campaign_analyzer", "qualname": "Campaign.unique_targets", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "src.campaign_analyzer.Campaign.ttp_techniques", "modulename": "src.campaign_analyzer", "qualname": "Campaign.ttp_techniques", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.Campaign.ttp_tactics", "modulename": "src.campaign_analyzer", "qualname": "Campaign.ttp_tactics", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.Campaign.infrastructure_domains", "modulename": "src.campaign_analyzer", "qualname": "Campaign.infrastructure_domains", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.Campaign.geographic_regions", "modulename": "src.campaign_analyzer", "qualname": "Campaign.geographic_regions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.campaign_analyzer.Campaign.events", "modulename": "src.campaign_analyzer", "qualname": "Campaign.events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.campaign_analyzer.CampaignEvent]"}, {"fullname": "src.campaign_analyzer.Campaign.relationships", "modulename": "src.campaign_analyzer", "qualname": "Campaign.relationships", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.campaign_analyzer.IndicatorRelationship]"}, {"fullname": "src.campaign_analyzer.Campaign.metadata", "modulename": "src.campaign_analyzer", "qualname": "Campaign.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer", "kind": "class", "doc": "<p>Core campaign analysis and correlation engine.</p>\n\n<p>Provides methods for correlating security events, expanding indicators,\nand building campaign timelines for coordinated attack detection.</p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.__init__", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.__init__", "kind": "function", "doc": "<p>Initialize the CampaignAnalyzer.</p>\n\n<p>Args:\n    es_client: Optional ElasticsearchClient instance. If not provided, a new one is created.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">es_client</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">elasticsearch_client</span><span class=\"o\">.</span><span class=\"n\">ElasticsearchClient</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.es_client", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.es_client", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.user_config", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.user_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.correlation_window_minutes", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.correlation_window_minutes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.min_confidence_threshold", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.min_confidence_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.max_campaign_events", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.max_campaign_events", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.enable_geospatial_correlation", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.enable_geospatial_correlation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.enable_performance_logging", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.enable_performance_logging", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.network_correlation_enabled", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.network_correlation_enabled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.behavioral_pattern_threshold", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.behavioral_pattern_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.temporal_clustering_threshold", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.temporal_clustering_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.correlate_events", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.correlate_events", "kind": "function", "doc": "<p>Correlate events based on specified criteria to identify campaigns.</p>\n\n<p>Args:\n    seed_events: List of seed event dictionaries to start correlation from.\n    correlation_criteria: List of CorrelationMethod enums to use for correlation.\n    time_window_hours: Time window in hours to consider for correlation (default: 48).\n    min_confidence: Minimum confidence threshold for campaign inclusion (default: 0.7).</p>\n\n<p>Returns:\n    Campaign: The resulting Campaign object with correlated events and metadata.</p>\n\n<p>Raises:\n    Exception: If campaign correlation fails.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">seed_events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">correlation_criteria</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">CorrelationMethod</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">time_window_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">48</span>,</span><span class=\"param\">\t<span class=\"n\">min_confidence</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">Campaign</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.expand_indicators", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.expand_indicators", "kind": "function", "doc": "<p>Expand IOCs to find related indicators.</p>\n\n<p>Args:\n    seed_iocs: List of seed indicators (IOCs) to expand.\n    expansion_strategy: Strategy for expansion ('comprehensive', 'infrastructure', etc.).\n    max_depth: Maximum expansion depth (default: 3).</p>\n\n<p>Returns:\n    List of IndicatorRelationship objects representing discovered relationships.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">seed_iocs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">expansion_strategy</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;comprehensive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">IndicatorRelationship</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.build_campaign_timeline", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.build_campaign_timeline", "kind": "function", "doc": "<p>Build chronological timeline of campaign events.</p>\n\n<p>Args:\n    correlated_events: List of CampaignEvent objects to build timeline from.\n    timeline_granularity: Granularity of timeline ('hourly', 'daily', 'minute').</p>\n\n<p>Returns:\n    Dictionary containing timeline data with events grouped by time periods.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">correlated_events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">CampaignEvent</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">timeline_granularity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hourly&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_analyzer.CampaignAnalyzer.score_campaign", "modulename": "src.campaign_analyzer", "qualname": "CampaignAnalyzer.score_campaign", "kind": "function", "doc": "<p>Score campaign based on sophistication and impact.</p>\n\n<p>Args:\n    campaign_data: Campaign object to score.</p>\n\n<p>Returns:\n    Float score between 0.0 and 1.0 representing campaign sophistication.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">campaign_data</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">campaign_analyzer</span><span class=\"o\">.</span><span class=\"n\">Campaign</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools", "modulename": "src.campaign_mcp_tools", "kind": "module", "doc": "<p>Campaign Analysis MCP Tools.</p>\n\n<p>MCP tools for campaign analysis and correlation.</p>\n"}, {"fullname": "src.campaign_mcp_tools.logger", "modulename": "src.campaign_mcp_tools", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.campaign_mcp_tools&#x27;,))&gt;"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools", "kind": "class", "doc": "<p>MCP tools for campaign analysis and correlation.</p>\n"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.__init__", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.__init__", "kind": "function", "doc": "<p>Initialize CampaignMCPTools.</p>\n\n<p>Args:\n    es_client: Optional ElasticsearchClient instance. If not provided, a new one is created.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">es_client</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">elasticsearch_client</span><span class=\"o\">.</span><span class=\"n\">ElasticsearchClient</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.es_client", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.es_client", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.campaign_analyzer", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.campaign_analyzer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.user_config", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.user_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.analyze_campaign", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.analyze_campaign", "kind": "function", "doc": "<p>Analyze attack campaigns from seed indicators.</p>\n\n<p>Args:\n    seed_indicators: List of seed indicators (IPs, domains, etc.)\n    time_range_hours: Time range to analyze (default: 168 hours = 1 week)\n    correlation_methods: List of correlation methods to use\n    min_confidence: Minimum confidence threshold for campaign inclusion\n    include_timeline: Whether to include detailed timeline\n    include_relationships: Whether to include indicator relationships</p>\n\n<p>Returns:\n    Campaign analysis results with metadata</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">seed_indicators</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">168</span>,</span><span class=\"param\">\t<span class=\"n\">correlation_methods</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">min_confidence</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span>,</span><span class=\"param\">\t<span class=\"n\">include_timeline</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_relationships</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.expand_campaign_indicators", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.expand_campaign_indicators", "kind": "function", "doc": "<p>Expand IOCs to find related indicators.</p>\n\n<p>Args:\n    campaign_id: Campaign ID to expand\n    expansion_depth: Maximum expansion depth\n    expansion_strategy: Expansion strategy (comprehensive, infrastructure, temporal)\n    include_passive_dns: Whether to include passive DNS data\n    include_threat_intel: Whether to include threat intelligence data</p>\n\n<p>Returns:\n    Expanded indicators and relationships</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">campaign_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">expansion_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">expansion_strategy</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;comprehensive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">include_passive_dns</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_threat_intel</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.get_campaign_timeline", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.get_campaign_timeline", "kind": "function", "doc": "<p>Build detailed attack timelines.</p>\n\n<p>Args:\n    campaign_id: Campaign ID to analyze\n    timeline_granularity: Timeline granularity (minute, hourly, daily)\n    include_event_details: Whether to include detailed event information\n    include_ttp_analysis: Whether to include TTP analysis</p>\n\n<p>Returns:\n    Detailed campaign timeline</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">campaign_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">timeline_granularity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hourly&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">include_event_details</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_ttp_analysis</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.compare_campaigns", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.compare_campaigns", "kind": "function", "doc": "<p>Compare multiple campaigns for similarities.</p>\n\n<p>Args:\n    campaign_ids: List of campaign IDs to compare\n    comparison_metrics: Metrics to compare (ttps, infrastructure, timing, etc.)\n    include_visualization_data: Whether to include visualization data</p>\n\n<p>Returns:\n    Campaign comparison results</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">campaign_ids</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">comparison_metrics</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_visualization_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.detect_ongoing_campaigns", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.detect_ongoing_campaigns", "kind": "function", "doc": "<p>Real-time detection of active campaigns.</p>\n\n<p>Args:\n    time_window_hours: Time window for detection (default: 24 hours)\n    min_event_threshold: Minimum events for campaign detection\n    correlation_threshold: Minimum correlation threshold\n    include_alert_data: Whether to include alert data</p>\n\n<p>Returns:\n    Detected ongoing campaigns</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_window_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">min_event_threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>,</span><span class=\"param\">\t<span class=\"n\">correlation_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">include_alert_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.search_campaigns", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.search_campaigns", "kind": "function", "doc": "<p>Search existing campaigns by criteria.</p>\n\n<p>Args:\n    search_criteria: Search criteria (indicators, time_range, confidence, etc.)\n    time_range_hours: Time range for search\n    max_results: Maximum results to return\n    include_summaries: Whether to include campaign summaries</p>\n\n<p>Returns:\n    Matching campaigns</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">search_criteria</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">168</span>,</span><span class=\"param\">\t<span class=\"n\">max_results</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">include_summaries</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.campaign_mcp_tools.CampaignMCPTools.get_campaign_details", "modulename": "src.campaign_mcp_tools", "qualname": "CampaignMCPTools.get_campaign_details", "kind": "function", "doc": "<p>Comprehensive campaign information.</p>\n\n<p>Args:\n    campaign_id: Campaign ID to retrieve\n    include_full_timeline: Whether to include full timeline\n    include_relationships: Whether to include indicator relationships\n    include_threat_intel: Whether to include threat intelligence</p>\n\n<p>Returns:\n    Comprehensive campaign details</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">campaign_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">include_full_timeline</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">include_relationships</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_threat_intel</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.config_loader", "modulename": "src.config_loader", "kind": "module", "doc": "<p>Configuration loader for DShield MCP server.</p>\n\n<p>This module provides utilities for loading and resolving configuration\nfrom YAML files with support for 1Password CLI secret resolution.\nIt handles config file validation, secret resolution, and error handling.</p>\n\n<p>Features:</p>\n\n<ul>\n<li>YAML configuration file loading</li>\n<li>1Password CLI secret resolution</li>\n<li>Configuration validation</li>\n<li>Error handling with custom exceptions</li>\n</ul>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>from src.config_loader import get_config\n      config = get_config()\n      print(config['elasticsearch']['url'])</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.config_loader.ConfigError", "modulename": "src.config_loader", "qualname": "ConfigError", "kind": "class", "doc": "<p>Exception raised for configuration-related errors.</p>\n\n<p>This exception is raised when there are issues with loading,\nparsing, or validating configuration files.</p>\n", "bases": "builtins.Exception"}, {"fullname": "src.config_loader.get_config", "modulename": "src.config_loader", "qualname": "get_config", "kind": "function", "doc": "<p>Load the MCP YAML config file.</p>\n\n<p>Loads and validates a YAML configuration file, resolving any\n1Password CLI secrets in the process. By default, looks for\n'mcp_config.yaml' in the project root.</p>\n\n<p>Args:\n    config_path: Path to the configuration file (default: auto-detected)</p>\n\n<p>Returns:\n    Dictionary containing the resolved configuration</p>\n\n<p>Raises:\n    ConfigError: If config file is missing, invalid, or cannot be loaded</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.context_injector", "modulename": "src.context_injector", "kind": "module", "doc": "<p>Context injector for preparing data for ChatGPT context injection.</p>\n\n<p>This module provides utilities for preparing and formatting security data\nfor injection into ChatGPT conversations. It handles various data types\nincluding security events, threat intelligence, attack reports, and query\nresults, formatting them appropriately for AI consumption.</p>\n\n<p>Features:</p>\n\n<ul>\n<li>Security context preparation and formatting</li>\n<li>Attack report context injection</li>\n<li>Query result formatting</li>\n<li>MCP-compatible context injection</li>\n<li>Multiple output formats (structured, summary, raw)</li>\n<li>ChatGPT-optimized formatting</li>\n</ul>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>from src.context_injector import ContextInjector\n      injector = ContextInjector()\n      context = injector.prepare_security_context(events, threat_intel)\n      formatted = injector.inject_context_for_chatgpt(context)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.context_injector.logger", "modulename": "src.context_injector", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.context_injector&#x27;,))&gt;"}, {"fullname": "src.context_injector.ContextInjector", "modulename": "src.context_injector", "qualname": "ContextInjector", "kind": "class", "doc": "<p>Prepare and inject security context for ChatGPT analysis.</p>\n\n<p>This class provides methods to prepare and format various types of\nsecurity data for injection into ChatGPT conversations. It supports\nmultiple output formats and optimizes data for AI consumption.</p>\n\n<p>Attributes:\n    max_context_size: Maximum context size in characters\n    include_raw_data: Whether to include raw data in context\n    context_format: Output format (structured, summary, or raw)</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>injector = ContextInjector()\n      context = injector.prepare_security_context(events)\n      formatted = injector.inject_context_for_chatgpt(context)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.context_injector.ContextInjector.__init__", "modulename": "src.context_injector", "qualname": "ContextInjector.__init__", "kind": "function", "doc": "<p>Initialize the ContextInjector.</p>\n\n<p>Loads configuration from environment variables for context\nformatting preferences and size limits.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.context_injector.ContextInjector.max_context_size", "modulename": "src.context_injector", "qualname": "ContextInjector.max_context_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.context_injector.ContextInjector.include_raw_data", "modulename": "src.context_injector", "qualname": "ContextInjector.include_raw_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.context_injector.ContextInjector.context_format", "modulename": "src.context_injector", "qualname": "ContextInjector.context_format", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.context_injector.ContextInjector.prepare_security_context", "modulename": "src.context_injector", "qualname": "ContextInjector.prepare_security_context", "kind": "function", "doc": "<p>Prepare security context for injection.</p>\n\n<p>Creates a comprehensive security context from events, threat\nintelligence, and summary data, formatted according to the\nconfigured context format preference.</p>\n\n<p>Args:\n    events: List of security event dictionaries\n    threat_intelligence: Optional threat intelligence data\n    summary: Optional summary data</p>\n\n<p>Returns:\n    Dictionary containing formatted security context</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">threat_intelligence</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">summary</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.context_injector.ContextInjector.prepare_attack_report_context", "modulename": "src.context_injector", "qualname": "ContextInjector.prepare_attack_report_context", "kind": "function", "doc": "<p>Prepare attack report context for injection.</p>\n\n<p>Formats an attack report for injection into ChatGPT conversations,\nincluding metadata and confidence information.</p>\n\n<p>Args:\n    report: Attack report dictionary</p>\n\n<p>Returns:\n    Dictionary containing formatted attack report context</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">report</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.context_injector.ContextInjector.prepare_query_context", "modulename": "src.context_injector", "qualname": "ContextInjector.prepare_query_context", "kind": "function", "doc": "<p>Prepare query context for injection.</p>\n\n<p>Formats query results and parameters for injection into ChatGPT\nconversations, including metadata about the query execution.</p>\n\n<p>Args:\n    query_type: Type of query that was executed\n    parameters: Query parameters that were used\n    results: Query results to format</p>\n\n<p>Returns:\n    Dictionary containing formatted query context</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.context_injector.ContextInjector.inject_context_for_chatgpt", "modulename": "src.context_injector", "qualname": "ContextInjector.inject_context_for_chatgpt", "kind": "function", "doc": "<p>Format context for ChatGPT consumption.</p>\n\n<p>Converts a context dictionary into a string format optimized\nfor ChatGPT consumption, handling different context types\nappropriately.</p>\n\n<p>Args:\n    context: Context dictionary to format</p>\n\n<p>Returns:\n    String formatted for ChatGPT consumption</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.context_injector.ContextInjector.create_mcp_context_injection", "modulename": "src.context_injector", "qualname": "ContextInjector.create_mcp_context_injection", "kind": "function", "doc": "<p>Create MCP-compatible context injection.</p>\n\n<p>Formats context data for use with the Model Context Protocol (MCP),\nincluding proper metadata and version information.</p>\n\n<p>Args:\n    context: Context dictionary to format</p>\n\n<p>Returns:\n    Dictionary formatted for MCP protocol</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_dictionary", "modulename": "src.data_dictionary", "kind": "module", "doc": "<p>Data Dictionary for DShield MCP Elastic SIEM Integration.</p>\n\n<p>This module provides comprehensive field descriptions, query examples, and\nanalysis guidelines to help AI models understand DShield SIEM data structures\nand their meanings. It serves as a reference for data interpretation and\nquery construction.</p>\n\n<p>Features:</p>\n\n<ul>\n<li>Comprehensive field descriptions and types</li>\n<li>Query examples for common use cases</li>\n<li>Data patterns and analysis guidelines</li>\n<li>Initial prompt generation for AI models</li>\n<li>Structured data reference for DShield SIEM</li>\n</ul>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>from src.data_dictionary import DataDictionary\n      fields = DataDictionary.get_field_descriptions()\n      examples = DataDictionary.get_query_examples()\n      prompt = DataDictionary.get_initial_prompt()</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.data_dictionary.DataDictionary", "modulename": "src.data_dictionary", "qualname": "DataDictionary", "kind": "class", "doc": "<p>Comprehensive data dictionary for DShield SIEM data.</p>\n\n<p>This class provides static methods to access comprehensive information\nabout DShield SIEM data structures, including field descriptions,\nquery examples, data patterns, and analysis guidelines.</p>\n\n<p>The class serves as a central reference for understanding DShield\ndata formats and constructing effective queries and analysis.</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>fields = DataDictionary.get_field_descriptions()\n      examples = DataDictionary.get_query_examples()\n      prompt = DataDictionary.get_initial_prompt()</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.data_dictionary.DataDictionary.get_field_descriptions", "modulename": "src.data_dictionary", "qualname": "DataDictionary.get_field_descriptions", "kind": "function", "doc": "<p>Get comprehensive field descriptions for DShield data.</p>\n\n<p>Returns a detailed dictionary containing descriptions, types,\nexamples, and usage information for all DShield SIEM fields.</p>\n\n<p>Returns:\n    Dictionary containing field descriptions organized by category:\n    - core_fields: Basic event fields (timestamp, id)\n    - network_fields: Network-related fields (IPs, ports, protocols)\n    - event_fields: Event classification fields (type, severity, category)\n    - dshield_specific_fields: DShield-specific threat intelligence\n    - geographic_fields: Geographic location data\n    - service_fields: Service and application data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_dictionary.DataDictionary.get_query_examples", "modulename": "src.data_dictionary", "qualname": "DataDictionary.get_query_examples", "kind": "function", "doc": "<p>Get example queries for common use cases.</p>\n\n<p>Returns a collection of example queries demonstrating how to\nuse the DShield MCP tools for various security analysis scenarios.</p>\n\n<p>Returns:\n    Dictionary containing query examples with descriptions,\n    parameters, and expected fields for each use case</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_dictionary.DataDictionary.get_data_patterns", "modulename": "src.data_dictionary", "qualname": "DataDictionary.get_data_patterns", "kind": "function", "doc": "<p>Get common data patterns and their interpretations.</p>\n\n<p>Returns patterns that commonly appear in DShield data and\ntheir security implications for analysis.</p>\n\n<p>Returns:\n    Dictionary containing data patterns with descriptions\n    and security context</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_dictionary.DataDictionary.get_analysis_guidelines", "modulename": "src.data_dictionary", "qualname": "DataDictionary.get_analysis_guidelines", "kind": "function", "doc": "<p>Get guidelines for analyzing DShield SIEM data.</p>\n\n<p>Returns best practices and guidelines for interpreting\nand analyzing DShield security data effectively.</p>\n\n<p>Returns:\n    Dictionary containing analysis guidelines and best practices</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_dictionary.DataDictionary.get_initial_prompt", "modulename": "src.data_dictionary", "qualname": "DataDictionary.get_initial_prompt", "kind": "function", "doc": "<p>Get the initial prompt for AI models.</p>\n\n<p>Generates a comprehensive initial prompt that provides AI models\nwith all the necessary context about DShield SIEM data structures,\nfield meanings, and analysis guidelines.</p>\n\n<p>Returns:\n    String containing the complete initial prompt for AI models</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor", "modulename": "src.data_processor", "kind": "module", "doc": "<p>Data processor for formatting and structuring DShield SIEM data for AI consumption.</p>\n\n<p>This module provides utilities for processing, normalizing, and structuring\nDShield SIEM data for downstream AI analysis and reporting. It includes\nfunctions for event normalization, attack pattern detection, enrichment,\nsummarization, and report generation.</p>\n\n<p>Features:</p>\n\n<ul>\n<li>Security event normalization and enrichment</li>\n<li>Attack pattern detection</li>\n<li>DShield-specific data mapping</li>\n<li>Summary and report generation</li>\n<li>Utility methods for extracting and analyzing event data</li>\n</ul>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>from src.data_processor import DataProcessor\n      processor = DataProcessor()\n      processed = processor.process_security_events(events)\n      print(processed)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.data_processor.logger", "modulename": "src.data_processor", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.data_processor&#x27;,))&gt;"}, {"fullname": "src.data_processor.DataProcessor", "modulename": "src.data_processor", "qualname": "DataProcessor", "kind": "class", "doc": "<p>Process and structure DShield SIEM data for AI analysis.</p>\n\n<p>This class provides methods to normalize, enrich, and summarize DShield SIEM\ndata for use in AI-driven analytics and reporting. It includes attack pattern\ndetection, severity/category mapping, and report generation utilities.</p>\n\n<p>Attributes:\n    dshield_attack_patterns: Mapping of attack pattern names to keywords\n    dshield_severity_mapping: Mapping of severity labels to EventSeverity\n    dshield_category_mapping: Mapping of category labels to EventCategory</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>processor = DataProcessor()\n      summary = processor.generate_security_summary(events)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.data_processor.DataProcessor.__init__", "modulename": "src.data_processor", "qualname": "DataProcessor.__init__", "kind": "function", "doc": "<p>Initialize the DataProcessor.</p>\n\n<p>Sets up DShield-specific mappings for attack patterns, severity, and category.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.data_processor.DataProcessor.dshield_attack_patterns", "modulename": "src.data_processor", "qualname": "DataProcessor.dshield_attack_patterns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_processor.DataProcessor.dshield_severity_mapping", "modulename": "src.data_processor", "qualname": "DataProcessor.dshield_severity_mapping", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_processor.DataProcessor.dshield_category_mapping", "modulename": "src.data_processor", "qualname": "DataProcessor.dshield_category_mapping", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_processor.DataProcessor.process_security_events", "modulename": "src.data_processor", "qualname": "DataProcessor.process_security_events", "kind": "function", "doc": "<p>Process and normalize security events from DShield SIEM.</p>\n\n<p>Normalizes, enriches, and detects attack patterns in a list of security events.\nHandles error logging and skips events that cannot be processed.</p>\n\n<p>Args:\n    events: List of raw event dictionaries</p>\n\n<p>Returns:\n    List of processed and normalized event dictionaries</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.process_dshield_attacks", "modulename": "src.data_processor", "qualname": "DataProcessor.process_dshield_attacks", "kind": "function", "doc": "<p>Process DShield attack events into structured format.</p>\n\n<p>Converts raw attack event dictionaries into DShieldAttack model instances.\nHandles error logging and skips attacks that cannot be processed.</p>\n\n<p>Args:\n    attacks: List of raw attack event dictionaries</p>\n\n<p>Returns:\n    List of DShieldAttack model instances</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">attacks</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DShieldAttack</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.process_dshield_reputation", "modulename": "src.data_processor", "qualname": "DataProcessor.process_dshield_reputation", "kind": "function", "doc": "<p>Process DShield reputation data into structured format.</p>\n\n<p>Converts raw reputation data dictionaries into DShieldReputation model instances.\nHandles error logging and skips entries that cannot be processed.</p>\n\n<p>Args:\n    reputation_data: List of raw reputation data dictionaries</p>\n\n<p>Returns:\n    Dictionary mapping IP addresses to DShieldReputation model instances</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">reputation_data</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DShieldReputation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.process_dshield_top_attackers", "modulename": "src.data_processor", "qualname": "DataProcessor.process_dshield_top_attackers", "kind": "function", "doc": "<p>Process DShield top attackers data into structured format.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">attackers</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DShieldTopAttacker</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.generate_dshield_summary", "modulename": "src.data_processor", "qualname": "DataProcessor.generate_dshield_summary", "kind": "function", "doc": "<p>Generate DShield-specific security summary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DShieldStatistics</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.generate_security_summary", "modulename": "src.data_processor", "qualname": "DataProcessor.generate_security_summary", "kind": "function", "doc": "<p>Generate security summary statistics with DShield enrichment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.generate_attack_report", "modulename": "src.data_processor", "qualname": "DataProcessor.generate_attack_report", "kind": "function", "doc": "<p>Generate structured attack report with DShield data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">threat_intelligence</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_processor.DataProcessor.extract_unique_ips", "modulename": "src.data_processor", "qualname": "DataProcessor.extract_unique_ips", "kind": "function", "doc": "<p>Extract unique IP addresses from events.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.dshield_client", "modulename": "src.dshield_client", "kind": "module", "doc": "<p>DShield client for threat intelligence and IP reputation lookup.</p>\n\n<p>This module provides a client for interacting with the DShield threat intelligence API.\nIt supports IP reputation lookups, attack summaries, batch enrichment, and detailed\nIP information retrieval. The client handles authentication, rate limiting, caching,\nand error handling for robust integration with DShield services.</p>\n\n<p>Features:</p>\n\n<ul>\n<li>IP reputation and details lookup</li>\n<li>Attack summary retrieval</li>\n<li>Batch enrichment of IPs</li>\n<li>Caching and rate limiting</li>\n<li>Async context management</li>\n</ul>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>from src.dshield_client import DShieldClient\n      async with DShieldClient() as client:\n          ...     rep = await client.get_ip_reputation(\"8.8.8.8\")\n          ...     print(rep)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.dshield_client.logger", "modulename": "src.dshield_client", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.dshield_client&#x27;,))&gt;"}, {"fullname": "src.dshield_client.DShieldClient", "modulename": "src.dshield_client", "qualname": "DShieldClient", "kind": "class", "doc": "<p>Client for interacting with DShield threat intelligence API.</p>\n\n<p>This class provides methods to query DShield for IP reputation, details,\nattack summaries, and batch enrichment. It manages authentication, rate\nlimiting, caching, and session lifecycle for efficient API usage.</p>\n\n<p>Attributes:\n    api_key: API key for DShield authentication\n    base_url: Base URL for DShield API\n    session: aiohttp.ClientSession for HTTP requests\n    rate_limit_requests: Max requests per minute\n    rate_limit_window: Time window for rate limiting (seconds)\n    request_times: List of request timestamps for rate limiting\n    cache: In-memory cache for API responses\n    cache_ttl: Time-to-live for cache entries (seconds)\n    enable_caching: Whether caching is enabled\n    max_cache_size: Maximum cache size\n    request_timeout: Timeout for API requests (seconds)\n    enable_performance_logging: Whether to log performance metrics\n    headers: HTTP headers for API requests\n    batch_size: Maximum batch size for IP enrichment</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>async with DShieldClient() as client:\n          ...     rep = await client.get_ip_reputation(\"8.8.8.8\")\n          ...     print(rep)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.dshield_client.DShieldClient.__init__", "modulename": "src.dshield_client", "qualname": "DShieldClient.__init__", "kind": "function", "doc": "<p>Initialize the DShield client.</p>\n\n<p>Loads configuration, resolves secrets, sets up rate limiting,\ncaching, and prepares HTTP headers for API requests.</p>\n\n<p>Raises:\n    RuntimeError: If configuration or secret resolution fails</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.dshield_client.DShieldClient.api_key", "modulename": "src.dshield_client", "qualname": "DShieldClient.api_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.base_url", "modulename": "src.dshield_client", "qualname": "DShieldClient.base_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.session", "modulename": "src.dshield_client", "qualname": "DShieldClient.session", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[aiohttp.client.ClientSession]"}, {"fullname": "src.dshield_client.DShieldClient.rate_limit_requests", "modulename": "src.dshield_client", "qualname": "DShieldClient.rate_limit_requests", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.rate_limit_window", "modulename": "src.dshield_client", "qualname": "DShieldClient.rate_limit_window", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.request_times", "modulename": "src.dshield_client", "qualname": "DShieldClient.request_times", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[float]"}, {"fullname": "src.dshield_client.DShieldClient.cache", "modulename": "src.dshield_client", "qualname": "DShieldClient.cache", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Dict[str, Any]]"}, {"fullname": "src.dshield_client.DShieldClient.cache_ttl", "modulename": "src.dshield_client", "qualname": "DShieldClient.cache_ttl", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.enable_caching", "modulename": "src.dshield_client", "qualname": "DShieldClient.enable_caching", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.max_cache_size", "modulename": "src.dshield_client", "qualname": "DShieldClient.max_cache_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.request_timeout", "modulename": "src.dshield_client", "qualname": "DShieldClient.request_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.enable_performance_logging", "modulename": "src.dshield_client", "qualname": "DShieldClient.enable_performance_logging", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.headers", "modulename": "src.dshield_client", "qualname": "DShieldClient.headers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.batch_size", "modulename": "src.dshield_client", "qualname": "DShieldClient.batch_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.dshield_client.DShieldClient.connect", "modulename": "src.dshield_client", "qualname": "DShieldClient.connect", "kind": "function", "doc": "<p>Initialize HTTP session.</p>\n\n<p>Creates an aiohttp.ClientSession for making API requests.\nLogs session initialization.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.dshield_client.DShieldClient.close", "modulename": "src.dshield_client", "qualname": "DShieldClient.close", "kind": "function", "doc": "<p>Close HTTP session.</p>\n\n<p>Closes the aiohttp.ClientSession and releases resources.\nLogs session closure.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.dshield_client.DShieldClient.get_ip_reputation", "modulename": "src.dshield_client", "qualname": "DShieldClient.get_ip_reputation", "kind": "function", "doc": "<p>Get IP reputation from DShield.</p>\n\n<p>Looks up the reputation of a given IP address using the DShield API.\nUtilizes caching and rate limiting for efficiency.</p>\n\n<p>Args:\n    ip_address: The IP address to look up</p>\n\n<p>Returns:\n    Dictionary containing reputation data for the IP</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ip_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.dshield_client.DShieldClient.get_ip_details", "modulename": "src.dshield_client", "qualname": "DShieldClient.get_ip_details", "kind": "function", "doc": "<p>Get detailed IP information from DShield.</p>\n\n<p>Retrieves detailed information for a given IP address from the DShield API.\nUtilizes caching and rate limiting for efficiency.</p>\n\n<p>Args:\n    ip_address: The IP address to look up</p>\n\n<p>Returns:\n    Dictionary containing detailed data for the IP</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ip_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.dshield_client.DShieldClient.get_top_attackers", "modulename": "src.dshield_client", "qualname": "DShieldClient.get_top_attackers", "kind": "function", "doc": "<p>Get top attackers from DShield.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.dshield_client.DShieldClient.get_attack_summary", "modulename": "src.dshield_client", "qualname": "DShieldClient.get_attack_summary", "kind": "function", "doc": "<p>Get attack summary from DShield.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.dshield_client.DShieldClient.enrich_ips_batch", "modulename": "src.dshield_client", "qualname": "DShieldClient.enrich_ips_batch", "kind": "function", "doc": "<p>Enrich multiple IP addresses with threat intelligence.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ip_addresses</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client", "modulename": "src.elasticsearch_client", "kind": "module", "doc": "<p>Elasticsearch client for querying DShield SIEM events and logs.</p>\n\n<p>Optimized for DShield SIEM integration patterns.</p>\n"}, {"fullname": "src.elasticsearch_client.logger", "modulename": "src.elasticsearch_client", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.elasticsearch_client&#x27;,))&gt;"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient", "kind": "class", "doc": "<p>Client for interacting with DShield SIEM Elasticsearch.</p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.__init__", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.__init__", "kind": "function", "doc": "<p>Initialize the Elasticsearch client.</p>\n\n<p>Sets up the client connection, field mappings, and configuration\nfor DShield SIEM integration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.client", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.client", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[elasticsearch.AsyncElasticsearch]"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.url", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.username", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.password", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.password", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.verify_ssl", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.verify_ssl", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.ca_certs", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.ca_certs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.timeout", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.max_results", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.max_results", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.default_page_size", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.default_page_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.max_page_size", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.max_page_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.default_timeout", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.default_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.max_timeout", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.max_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.enable_smart_optimization", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.enable_smart_optimization", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.fallback_strategy", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.fallback_strategy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.max_query_complexity", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.max_query_complexity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.enable_performance_logging", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.enable_performance_logging", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.dshield_indices", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.dshield_indices", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.fallback_indices", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.fallback_indices", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.dshield_field_mappings", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.dshield_field_mappings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.connect", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.connect", "kind": "function", "doc": "<p>Connect to Elasticsearch cluster.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.close", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.close", "kind": "function", "doc": "<p>Close Elasticsearch connection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.get_available_indices", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.get_available_indices", "kind": "function", "doc": "<p>Get available DShield indices.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_dshield_events", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_dshield_events", "kind": "function", "doc": "<p>Query DShield events from Elasticsearch with enhanced pagination support.</p>\n\n<p>Supports both traditional page-based pagination and cursor-based pagination\nfor better performance with massive datasets.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">page</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">page_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">sort_by</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;@timestamp&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sort_order</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;desc&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cursor</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_summary</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">optimization</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fallback_strategy</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;aggregate&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_result_size_mb</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">10.0</span>,</span><span class=\"param\">\t<span class=\"n\">query_timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.execute_aggregation_query", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.execute_aggregation_query", "kind": "function", "doc": "<p>Execute an aggregation query on Elasticsearch.</p>\n\n<p>Performs aggregation queries for statistical analysis and\ndata summarization. This is useful for generating reports\nand understanding data patterns without retrieving full records.</p>\n\n<p>Args:\n    index: List of indices to query\n    query: Base query to filter documents\n    aggregation_query: Aggregation definition to apply</p>\n\n<p>Returns:\n    Dictionary containing aggregation results</p>\n\n<p>Raises:\n    ConnectionError: If not connected to Elasticsearch\n    RequestError: If the aggregation query fails</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">aggregation_query</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.stream_dshield_events", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.stream_dshield_events", "kind": "function", "doc": "<p>Stream DShield events in chunks for large datasets.</p>\n\n<p>Retrieves DShield events in configurable chunks to handle\nvery large datasets efficiently. This method is designed\nfor processing large amounts of data without memory issues.</p>\n\n<p>Args:\n    time_range_hours: Time range in hours to query (default: 24)\n    indices: Specific indices to query (default: all DShield indices)\n    filters: Additional query filters to apply\n    fields: Specific fields to return (reduces payload size)\n    chunk_size: Number of events per chunk (default: 500, max: 1000)\n    stream_id: Optional stream ID for resuming interrupted streams</p>\n\n<p>Returns:\n    Tuple containing:\n        - List of event dictionaries for the current chunk\n        - Total count of available events\n        - Next stream ID for continuing the stream (None if complete)</p>\n\n<p>Raises:\n    ConnectionError: If not connected to Elasticsearch\n    RequestError: If the streaming query fails\n    ValueError: If parameters are invalid</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">stream_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_dshield_attacks", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_dshield_attacks", "kind": "function", "doc": "<p>Query DShield attack data specifically.</p>\n\n<p>Retrieves attack-specific data from DShield indices, focusing\non security events that represent actual attacks rather than\ngeneral network traffic or logs.</p>\n\n<p>Args:\n    time_range_hours: Time range in hours to query (default: 24)\n    page: Page number for pagination (default: 1)\n    page_size: Number of results per page (default: 100, max: 1000)\n    include_summary: Whether to include summary statistics</p>\n\n<p>Returns:\n    Tuple containing:\n        - List of attack event dictionaries\n        - Total count of available attacks</p>\n\n<p>Raises:\n    ConnectionError: If not connected to Elasticsearch\n    RequestError: If the query fails</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">page</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">page_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">include_summary</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_dshield_reputation", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_dshield_reputation", "kind": "function", "doc": "<p>Query DShield reputation data for IP addresses.</p>\n\n<p>Retrieves reputation and threat intelligence data for specific\nIP addresses or all IPs in the DShield reputation database.</p>\n\n<p>Args:\n    ip_addresses: List of IP addresses to query (default: all IPs)\n    size: Maximum number of results to return (default: 1000)</p>\n\n<p>Returns:\n    List of reputation data dictionaries</p>\n\n<p>Raises:\n    ConnectionError: If not connected to Elasticsearch\n    RequestError: If the query fails</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ip_addresses</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_dshield_top_attackers", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_dshield_top_attackers", "kind": "function", "doc": "<p>Query DShield top attackers data.</p>\n\n<p>Retrieves the most active attacker IP addresses based on\nattack frequency and severity within the specified time period.</p>\n\n<p>Args:\n    hours: Time range in hours to analyze (default: 24)\n    limit: Maximum number of attackers to return (default: 100)</p>\n\n<p>Returns:\n    List of top attacker data dictionaries</p>\n\n<p>Raises:\n    ConnectionError: If not connected to Elasticsearch\n    RequestError: If the query fails</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_dshield_geographic_data", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_dshield_geographic_data", "kind": "function", "doc": "<p>Query DShield geographic attack data.</p>\n\n<p>Retrieves attack data grouped by geographic location,\nincluding country-level statistics and attack patterns.</p>\n\n<p>Args:\n    countries: List of countries to filter by (default: all countries)\n    size: Maximum number of results to return (default: 1000)</p>\n\n<p>Returns:\n    List of geographic attack data dictionaries</p>\n\n<p>Raises:\n    ConnectionError: If not connected to Elasticsearch\n    RequestError: If the query fails</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">countries</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_dshield_port_data", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_dshield_port_data", "kind": "function", "doc": "<p>Query DShield port attack data.</p>\n\n<p>Retrieves attack data grouped by destination ports,\nincluding port-specific attack patterns and statistics.</p>\n\n<p>Args:\n    ports: List of ports to filter by (default: all ports)\n    size: Maximum number of results to return (default: 1000)</p>\n\n<p>Returns:\n    List of port attack data dictionaries</p>\n\n<p>Raises:\n    ConnectionError: If not connected to Elasticsearch\n    RequestError: If the query fails</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ports</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_events_by_ip", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_events_by_ip", "kind": "function", "doc": "<p>Query DShield events for specific IP addresses.</p>\n\n<p>Retrieves all events associated with the specified IP addresses,\nincluding both source and destination IP matches. This is useful\nfor investigating specific IP addresses involved in attacks.</p>\n\n<p>Args:\n    ip_addresses: List of IP addresses to search for\n    time_range_hours: Time range in hours to query (default: 24)\n    indices: Specific indices to query (default: all DShield indices)</p>\n\n<p>Returns:\n    List of event dictionaries for the specified IPs</p>\n\n<p>Raises:\n    RuntimeError: If Elasticsearch client is not connected\n    RequestError: If the query fails</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ip_addresses</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.get_dshield_statistics", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.get_dshield_statistics", "kind": "function", "doc": "<p>Get comprehensive DShield statistics and summary.</p>\n\n<p>Retrieves aggregated statistics from multiple DShield data sources,\nincluding event counts, top attackers, geographic distribution,\nand other summary metrics.</p>\n\n<p>Args:\n    time_range_hours: Time range in hours for statistics (default: 24)</p>\n\n<p>Returns:\n    Dictionary containing comprehensive statistics including:\n        - total_events: Total number of events\n        - top_attackers: List of most active attackers\n        - geographic_distribution: Attack distribution by country\n        - time_range_hours: Time range used for analysis\n        - timestamp: When the statistics were generated</p>\n\n<p>Raises:\n    Exception: If statistics collection fails</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.log_unmapped_fields", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.log_unmapped_fields", "kind": "function", "doc": "<p>Log any fields in the source document that are not mapped to any known field type.</p>\n\n<p>Args:\n    source: Source dictionary from Elasticsearch document</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.query_security_events", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.query_security_events", "kind": "function", "doc": "<p>Backward compatibility method - redirects to query_dshield_events.</p>\n\n<p>Args:\n    time_range_hours: Time range in hours to query (default: 24)\n    indices: List of indices to query (optional)\n    filters: Query filters to apply (optional)\n    size: Number of results to return (optional)\n    timeout: Query timeout in seconds (optional)</p>\n\n<p>Returns:\n    List of event dictionaries</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.get_index_mapping", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.get_index_mapping", "kind": "function", "doc": "<p>Get mapping for an index pattern.</p>\n\n<p>Retrieves the field mapping information for the specified\nindex pattern from Elasticsearch.</p>\n\n<p>Args:\n    index_pattern: Index pattern to get mapping for</p>\n\n<p>Returns:\n    Dictionary containing the index mapping information</p>\n\n<p>Raises:\n    RuntimeError: If Elasticsearch client is not connected\n    Exception: If the mapping request fails</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index_pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.get_cluster_stats", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.get_cluster_stats", "kind": "function", "doc": "<p>Get Elasticsearch cluster statistics.</p>\n\n<p>Retrieves comprehensive statistics about the Elasticsearch\ncluster including node information, indices, and performance metrics.</p>\n\n<p>Returns:\n    Dictionary containing cluster statistics</p>\n\n<p>Raises:\n    RuntimeError: If Elasticsearch client is not connected\n    Exception: If the cluster stats request fails</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.elasticsearch_client.ElasticsearchClient.stream_dshield_events_with_session_context", "modulename": "src.elasticsearch_client", "qualname": "ElasticsearchClient.stream_dshield_events_with_session_context", "kind": "function", "doc": "<p>Stream DShield events with smart session-based chunking.</p>\n\n<p>Groups events by session context (e.g., source IP, user session, connection ID)\nand ensures related events stay together in the same chunk. This is useful\nfor event correlation and analysis.</p>\n\n<p>Args:\n    time_range_hours: Time range in hours to query (default: 24)\n    indices: Specific indices to query (default: all DShield indices)\n    filters: Additional query filters to apply\n    fields: Specific fields to return (reduces payload size)\n    chunk_size: Number of events per chunk (default: 500, max: 1000)\n    session_fields: Fields to use for session grouping (default: ['source.ip', 'destination.ip', 'user.name', 'session.id'])\n    max_session_gap_minutes: Maximum time gap within a session before starting new session (default: 30)\n    include_session_summary: Include session metadata in response (default: True)\n    stream_id: Resume streaming from specific point</p>\n\n<p>Returns:\n    Tuple containing:\n        - List of event dictionaries for the current chunk\n        - Total count of available events\n        - Next stream ID for continuing the stream (None if complete)\n        - Session context information</p>\n\n<p>Raises:\n    ConnectionError: If not connected to Elasticsearch\n    RequestError: If the streaming query fails\n    ValueError: If parameters are invalid</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_range_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">session_fields</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_session_gap_minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">include_session_summary</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">stream_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.latex_template_tools", "modulename": "src.latex_template_tools", "kind": "module", "doc": "<p>LaTeX Template Automation MCP Tools.</p>\n\n<p>MCP tools for LaTeX template automation and document generation.\nProvides functionality to generate complete and fully referenced documents\nusing modular LaTeX templates.</p>\n"}, {"fullname": "src.latex_template_tools.logger", "modulename": "src.latex_template_tools", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.latex_template_tools&#x27;,))&gt;"}, {"fullname": "src.latex_template_tools.LaTeXTemplateTools", "modulename": "src.latex_template_tools", "qualname": "LaTeXTemplateTools", "kind": "class", "doc": "<p>MCP tools for LaTeX template automation and document generation.</p>\n\n<p>Output files are always written to the user-configured output directory (default: ~/dshield-mcp-output).</p>\n"}, {"fullname": "src.latex_template_tools.LaTeXTemplateTools.__init__", "modulename": "src.latex_template_tools", "qualname": "LaTeXTemplateTools.__init__", "kind": "function", "doc": "<p>Initialize LaTeXTemplateTools.</p>\n\n<p>Args:\n    template_base_path: Base path for LaTeX templates. Defaults to templates/Attack_Report.\n    output_directory: Directory for generated outputs. If None, uses user config.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">template_base_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_directory</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.latex_template_tools.LaTeXTemplateTools.user_config", "modulename": "src.latex_template_tools", "qualname": "LaTeXTemplateTools.user_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.latex_template_tools.LaTeXTemplateTools.generate_document", "modulename": "src.latex_template_tools", "qualname": "LaTeXTemplateTools.generate_document", "kind": "function", "doc": "<p>Generate a complete document from a LaTeX template.</p>\n\n<p>Args:\n    template_name: Name of the template to use (e.g., \"Attack_Report\")\n    document_data: Data to populate the template with\n    output_format: Output format (pdf, tex, html)\n    include_assets: Whether to include template assets\n    compile_options: Additional compilation options</p>\n\n<p>Returns:\n    Document generation results with file paths and metadata</p>\n\n<p>Output files are always written to the configured output directory.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">template_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">document_data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">output_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pdf&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">include_assets</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">compile_options</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.latex_template_tools.LaTeXTemplateTools.list_available_templates", "modulename": "src.latex_template_tools", "qualname": "LaTeXTemplateTools.list_available_templates", "kind": "function", "doc": "<p>List all available LaTeX templates.</p>\n\n<p>Returns:\n    List of available templates with metadata</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.latex_template_tools.LaTeXTemplateTools.get_template_schema", "modulename": "src.latex_template_tools", "qualname": "LaTeXTemplateTools.get_template_schema", "kind": "function", "doc": "<p>Get the schema and requirements for a specific template.</p>\n\n<p>Args:\n    template_name: Name of the template to get schema for</p>\n\n<p>Returns:\n    Template schema with required variables and structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">template_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.latex_template_tools.LaTeXTemplateTools.validate_document_data", "modulename": "src.latex_template_tools", "qualname": "LaTeXTemplateTools.validate_document_data", "kind": "function", "doc": "<p>Validate document data against template requirements.</p>\n\n<p>Args:\n    template_name: Name of the template to validate against\n    document_data: Document data to validate</p>\n\n<p>Returns:\n    Validation results with errors and warnings</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">template_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">document_data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.models", "modulename": "src.models", "kind": "module", "doc": "<p>Data models for DShield MCP Elastic SIEM integration.</p>\n\n<p>This module provides comprehensive data models for the DShield MCP server,\noptimized for DShield SIEM data structures and patterns. It includes models\nfor security events, attacks, reputation data, and various DShield-specific\ndata types.</p>\n\n<p>The models are built using Pydantic for automatic validation, serialization,\nand documentation generation. They provide type safety and ensure data\nconsistency across the application.</p>\n\n<p>This module provides:</p>\n\n<ul>\n<li>Security event models with validation</li>\n<li>DShield-specific data models</li>\n<li>Threat intelligence models</li>\n<li>Query and filter models</li>\n<li>Statistics and summary models</li>\n</ul>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>from src.models import SecurityEvent, EventSeverity\n      event = SecurityEvent(\n          ...     id=\"event_123\",\n          ...     timestamp=datetime.now(),\n          ...     event_type=\"attack\",\n          ...     severity=EventSeverity.HIGH,\n          ...     description=\"Suspicious activity detected\"\n          ... )\n      print(event.severity)\n          EventSeverity.HIGH</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.models.EventSeverity", "modulename": "src.models", "qualname": "EventSeverity", "kind": "class", "doc": "<p>Security event severity levels.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "src.models.EventSeverity.LOW", "modulename": "src.models", "qualname": "EventSeverity.LOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventSeverity.LOW: &#x27;low&#x27;&gt;"}, {"fullname": "src.models.EventSeverity.MEDIUM", "modulename": "src.models", "qualname": "EventSeverity.MEDIUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventSeverity.MEDIUM: &#x27;medium&#x27;&gt;"}, {"fullname": "src.models.EventSeverity.HIGH", "modulename": "src.models", "qualname": "EventSeverity.HIGH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventSeverity.HIGH: &#x27;high&#x27;&gt;"}, {"fullname": "src.models.EventSeverity.CRITICAL", "modulename": "src.models", "qualname": "EventSeverity.CRITICAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventSeverity.CRITICAL: &#x27;critical&#x27;&gt;"}, {"fullname": "src.models.EventCategory", "modulename": "src.models", "qualname": "EventCategory", "kind": "class", "doc": "<p>Security event categories.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "src.models.EventCategory.NETWORK", "modulename": "src.models", "qualname": "EventCategory.NETWORK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.NETWORK: &#x27;network&#x27;&gt;"}, {"fullname": "src.models.EventCategory.AUTHENTICATION", "modulename": "src.models", "qualname": "EventCategory.AUTHENTICATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.AUTHENTICATION: &#x27;authentication&#x27;&gt;"}, {"fullname": "src.models.EventCategory.MALWARE", "modulename": "src.models", "qualname": "EventCategory.MALWARE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.MALWARE: &#x27;malware&#x27;&gt;"}, {"fullname": "src.models.EventCategory.INTRUSION", "modulename": "src.models", "qualname": "EventCategory.INTRUSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.INTRUSION: &#x27;intrusion&#x27;&gt;"}, {"fullname": "src.models.EventCategory.DATA_EXFILTRATION", "modulename": "src.models", "qualname": "EventCategory.DATA_EXFILTRATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.DATA_EXFILTRATION: &#x27;data_exfiltration&#x27;&gt;"}, {"fullname": "src.models.EventCategory.RECONNAISSANCE", "modulename": "src.models", "qualname": "EventCategory.RECONNAISSANCE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.RECONNAISSANCE: &#x27;reconnaissance&#x27;&gt;"}, {"fullname": "src.models.EventCategory.DENIAL_OF_SERVICE", "modulename": "src.models", "qualname": "EventCategory.DENIAL_OF_SERVICE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.DENIAL_OF_SERVICE: &#x27;denial_of_service&#x27;&gt;"}, {"fullname": "src.models.EventCategory.ATTACK", "modulename": "src.models", "qualname": "EventCategory.ATTACK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.ATTACK: &#x27;attack&#x27;&gt;"}, {"fullname": "src.models.EventCategory.BLOCK", "modulename": "src.models", "qualname": "EventCategory.BLOCK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.BLOCK: &#x27;block&#x27;&gt;"}, {"fullname": "src.models.EventCategory.REPUTATION", "modulename": "src.models", "qualname": "EventCategory.REPUTATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.REPUTATION: &#x27;reputation&#x27;&gt;"}, {"fullname": "src.models.EventCategory.GEOGRAPHIC", "modulename": "src.models", "qualname": "EventCategory.GEOGRAPHIC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.GEOGRAPHIC: &#x27;geographic&#x27;&gt;"}, {"fullname": "src.models.EventCategory.ASN", "modulename": "src.models", "qualname": "EventCategory.ASN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.ASN: &#x27;asn&#x27;&gt;"}, {"fullname": "src.models.EventCategory.ORGANIZATION", "modulename": "src.models", "qualname": "EventCategory.ORGANIZATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.ORGANIZATION: &#x27;organization&#x27;&gt;"}, {"fullname": "src.models.EventCategory.PORT", "modulename": "src.models", "qualname": "EventCategory.PORT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.PORT: &#x27;port&#x27;&gt;"}, {"fullname": "src.models.EventCategory.PROTOCOL", "modulename": "src.models", "qualname": "EventCategory.PROTOCOL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.PROTOCOL: &#x27;protocol&#x27;&gt;"}, {"fullname": "src.models.EventCategory.OTHER", "modulename": "src.models", "qualname": "EventCategory.OTHER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventCategory.OTHER: &#x27;other&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType", "modulename": "src.models", "qualname": "DShieldEventType", "kind": "class", "doc": "<p>DShield specific event types.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "src.models.DShieldEventType.ATTACK", "modulename": "src.models", "qualname": "DShieldEventType.ATTACK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.ATTACK: &#x27;attack&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.BLOCK", "modulename": "src.models", "qualname": "DShieldEventType.BLOCK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.BLOCK: &#x27;block&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.REPUTATION", "modulename": "src.models", "qualname": "DShieldEventType.REPUTATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.REPUTATION: &#x27;reputation&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.TOP_ATTACKER", "modulename": "src.models", "qualname": "DShieldEventType.TOP_ATTACKER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.TOP_ATTACKER: &#x27;top_attacker&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.TOP_PORT", "modulename": "src.models", "qualname": "DShieldEventType.TOP_PORT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.TOP_PORT: &#x27;top_port&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.GEOGRAPHIC", "modulename": "src.models", "qualname": "DShieldEventType.GEOGRAPHIC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.GEOGRAPHIC: &#x27;geographic&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.ASN", "modulename": "src.models", "qualname": "DShieldEventType.ASN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.ASN: &#x27;asn&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.ORGANIZATION", "modulename": "src.models", "qualname": "DShieldEventType.ORGANIZATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.ORGANIZATION: &#x27;organization&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.TAG", "modulename": "src.models", "qualname": "DShieldEventType.TAG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.TAG: &#x27;tag&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.STATISTICS", "modulename": "src.models", "qualname": "DShieldEventType.STATISTICS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.STATISTICS: &#x27;statistics&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.SUMMARY", "modulename": "src.models", "qualname": "DShieldEventType.SUMMARY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.SUMMARY: &#x27;summary&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.ALERT", "modulename": "src.models", "qualname": "DShieldEventType.ALERT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.ALERT: &#x27;alert&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.LOG", "modulename": "src.models", "qualname": "DShieldEventType.LOG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.LOG: &#x27;log&#x27;&gt;"}, {"fullname": "src.models.DShieldEventType.REPORT", "modulename": "src.models", "qualname": "DShieldEventType.REPORT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DShieldEventType.REPORT: &#x27;report&#x27;&gt;"}, {"fullname": "src.models.SecurityEvent", "modulename": "src.models", "qualname": "SecurityEvent", "kind": "class", "doc": "<p>Model for security events from DShield SIEM.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.SecurityEvent.id", "modulename": "src.models", "qualname": "SecurityEvent.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.SecurityEvent.timestamp", "modulename": "src.models", "qualname": "SecurityEvent.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.SecurityEvent.source_ip", "modulename": "src.models", "qualname": "SecurityEvent.source_ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.SecurityEvent.destination_ip", "modulename": "src.models", "qualname": "SecurityEvent.destination_ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.SecurityEvent.source_port", "modulename": "src.models", "qualname": "SecurityEvent.source_port", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.SecurityEvent.destination_port", "modulename": "src.models", "qualname": "SecurityEvent.destination_port", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.SecurityEvent.protocol", "modulename": "src.models", "qualname": "SecurityEvent.protocol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.SecurityEvent.event_type", "modulename": "src.models", "qualname": "SecurityEvent.event_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.SecurityEvent.severity", "modulename": "src.models", "qualname": "SecurityEvent.severity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.models.EventSeverity"}, {"fullname": "src.models.SecurityEvent.category", "modulename": "src.models", "qualname": "SecurityEvent.category", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.models.EventCategory"}, {"fullname": "src.models.SecurityEvent.description", "modulename": "src.models", "qualname": "SecurityEvent.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.SecurityEvent.country", "modulename": "src.models", "qualname": "SecurityEvent.country", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.SecurityEvent.asn", "modulename": "src.models", "qualname": "SecurityEvent.asn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.SecurityEvent.organization", "modulename": "src.models", "qualname": "SecurityEvent.organization", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.SecurityEvent.reputation_score", "modulename": "src.models", "qualname": "SecurityEvent.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.SecurityEvent.attack_count", "modulename": "src.models", "qualname": "SecurityEvent.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.SecurityEvent.first_seen", "modulename": "src.models", "qualname": "SecurityEvent.first_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.SecurityEvent.last_seen", "modulename": "src.models", "qualname": "SecurityEvent.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.SecurityEvent.tags", "modulename": "src.models", "qualname": "SecurityEvent.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.SecurityEvent.attack_types", "modulename": "src.models", "qualname": "SecurityEvent.attack_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.SecurityEvent.raw_data", "modulename": "src.models", "qualname": "SecurityEvent.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.SecurityEvent.indices", "modulename": "src.models", "qualname": "SecurityEvent.indices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.SecurityEvent.validate_ip_address", "modulename": "src.models", "qualname": "SecurityEvent.validate_ip_address", "kind": "function", "doc": "<p>Validate IP address format.</p>\n\n<p>Args:\n    v: IP address string to validate</p>\n\n<p>Returns:\n    The validated IP address string</p>\n\n<p>Raises:\n    ValueError: If the IP address format is invalid</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.SecurityEvent.validate_port", "modulename": "src.models", "qualname": "SecurityEvent.validate_port", "kind": "function", "doc": "<p>Validate port number.</p>\n\n<p>Args:\n    v: Port number to validate</p>\n\n<p>Returns:\n    The validated port number</p>\n\n<p>Raises:\n    ValueError: If the port number is outside valid range (1-65535)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.SecurityEvent.validate_reputation_score", "modulename": "src.models", "qualname": "SecurityEvent.validate_reputation_score", "kind": "function", "doc": "<p>Validate reputation score range.</p>\n\n<p>Args:\n    v: Reputation score to validate</p>\n\n<p>Returns:\n    The validated reputation score</p>\n\n<p>Raises:\n    ValueError: If the reputation score is outside valid range (0-100)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.SecurityEvent.model_config", "modulename": "src.models", "qualname": "SecurityEvent.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.DShieldAttack", "modulename": "src.models", "qualname": "DShieldAttack", "kind": "class", "doc": "<p>Model for DShield attack events.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.DShieldAttack.id", "modulename": "src.models", "qualname": "DShieldAttack.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldAttack.timestamp", "modulename": "src.models", "qualname": "DShieldAttack.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.DShieldAttack.source_ip", "modulename": "src.models", "qualname": "DShieldAttack.source_ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldAttack.destination_ip", "modulename": "src.models", "qualname": "DShieldAttack.destination_ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldAttack.source_port", "modulename": "src.models", "qualname": "DShieldAttack.source_port", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.DShieldAttack.destination_port", "modulename": "src.models", "qualname": "DShieldAttack.destination_port", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.DShieldAttack.protocol", "modulename": "src.models", "qualname": "DShieldAttack.protocol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldAttack.attack_type", "modulename": "src.models", "qualname": "DShieldAttack.attack_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldAttack.severity", "modulename": "src.models", "qualname": "DShieldAttack.severity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.models.EventSeverity"}, {"fullname": "src.models.DShieldAttack.description", "modulename": "src.models", "qualname": "DShieldAttack.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldAttack.country", "modulename": "src.models", "qualname": "DShieldAttack.country", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldAttack.asn", "modulename": "src.models", "qualname": "DShieldAttack.asn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldAttack.organization", "modulename": "src.models", "qualname": "DShieldAttack.organization", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldAttack.reputation_score", "modulename": "src.models", "qualname": "DShieldAttack.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldAttack.attack_count", "modulename": "src.models", "qualname": "DShieldAttack.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldAttack.first_seen", "modulename": "src.models", "qualname": "DShieldAttack.first_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.DShieldAttack.last_seen", "modulename": "src.models", "qualname": "DShieldAttack.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.DShieldAttack.tags", "modulename": "src.models", "qualname": "DShieldAttack.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldAttack.attack_methods", "modulename": "src.models", "qualname": "DShieldAttack.attack_methods", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldAttack.raw_data", "modulename": "src.models", "qualname": "DShieldAttack.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.DShieldAttack.indices", "modulename": "src.models", "qualname": "DShieldAttack.indices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldAttack.model_config", "modulename": "src.models", "qualname": "DShieldAttack.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.DShieldReputation", "modulename": "src.models", "qualname": "DShieldReputation", "kind": "class", "doc": "<p>Model for DShield reputation data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.DShieldReputation.ip_address", "modulename": "src.models", "qualname": "DShieldReputation.ip_address", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldReputation.reputation_score", "modulename": "src.models", "qualname": "DShieldReputation.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldReputation.threat_level", "modulename": "src.models", "qualname": "DShieldReputation.threat_level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldReputation.country", "modulename": "src.models", "qualname": "DShieldReputation.country", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldReputation.asn", "modulename": "src.models", "qualname": "DShieldReputation.asn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldReputation.organization", "modulename": "src.models", "qualname": "DShieldReputation.organization", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldReputation.first_seen", "modulename": "src.models", "qualname": "DShieldReputation.first_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.DShieldReputation.last_seen", "modulename": "src.models", "qualname": "DShieldReputation.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.DShieldReputation.attack_types", "modulename": "src.models", "qualname": "DShieldReputation.attack_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldReputation.tags", "modulename": "src.models", "qualname": "DShieldReputation.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldReputation.attack_count", "modulename": "src.models", "qualname": "DShieldReputation.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.DShieldReputation.port_count", "modulename": "src.models", "qualname": "DShieldReputation.port_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.DShieldReputation.service_count", "modulename": "src.models", "qualname": "DShieldReputation.service_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.DShieldReputation.raw_data", "modulename": "src.models", "qualname": "DShieldReputation.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.DShieldReputation.validate_ip_address", "modulename": "src.models", "qualname": "DShieldReputation.validate_ip_address", "kind": "function", "doc": "<p>Validate IP address format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.DShieldReputation.validate_reputation_score", "modulename": "src.models", "qualname": "DShieldReputation.validate_reputation_score", "kind": "function", "doc": "<p>Validate reputation score range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.DShieldReputation.model_config", "modulename": "src.models", "qualname": "DShieldReputation.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.DShieldTopAttacker", "modulename": "src.models", "qualname": "DShieldTopAttacker", "kind": "class", "doc": "<p>Model for DShield top attacker data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.DShieldTopAttacker.ip_address", "modulename": "src.models", "qualname": "DShieldTopAttacker.ip_address", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldTopAttacker.attack_count", "modulename": "src.models", "qualname": "DShieldTopAttacker.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldTopAttacker.country", "modulename": "src.models", "qualname": "DShieldTopAttacker.country", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldTopAttacker.asn", "modulename": "src.models", "qualname": "DShieldTopAttacker.asn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldTopAttacker.organization", "modulename": "src.models", "qualname": "DShieldTopAttacker.organization", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldTopAttacker.reputation_score", "modulename": "src.models", "qualname": "DShieldTopAttacker.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldTopAttacker.first_seen", "modulename": "src.models", "qualname": "DShieldTopAttacker.first_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.DShieldTopAttacker.last_seen", "modulename": "src.models", "qualname": "DShieldTopAttacker.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.DShieldTopAttacker.attack_types", "modulename": "src.models", "qualname": "DShieldTopAttacker.attack_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldTopAttacker.tags", "modulename": "src.models", "qualname": "DShieldTopAttacker.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldTopAttacker.target_ports", "modulename": "src.models", "qualname": "DShieldTopAttacker.target_ports", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[int]"}, {"fullname": "src.models.DShieldTopAttacker.target_services", "modulename": "src.models", "qualname": "DShieldTopAttacker.target_services", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldTopAttacker.raw_data", "modulename": "src.models", "qualname": "DShieldTopAttacker.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.DShieldTopAttacker.validate_ip_address", "modulename": "src.models", "qualname": "DShieldTopAttacker.validate_ip_address", "kind": "function", "doc": "<p>Validate IP address format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.DShieldTopAttacker.model_config", "modulename": "src.models", "qualname": "DShieldTopAttacker.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.DShieldGeographicData", "modulename": "src.models", "qualname": "DShieldGeographicData", "kind": "class", "doc": "<p>Model for DShield geographic data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.DShieldGeographicData.country", "modulename": "src.models", "qualname": "DShieldGeographicData.country", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DShieldGeographicData.country_code", "modulename": "src.models", "qualname": "DShieldGeographicData.country_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldGeographicData.attack_count", "modulename": "src.models", "qualname": "DShieldGeographicData.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldGeographicData.unique_attackers", "modulename": "src.models", "qualname": "DShieldGeographicData.unique_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldGeographicData.reputation_score", "modulename": "src.models", "qualname": "DShieldGeographicData.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldGeographicData.top_attackers", "modulename": "src.models", "qualname": "DShieldGeographicData.top_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldGeographicData.attack_types", "modulename": "src.models", "qualname": "DShieldGeographicData.attack_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldGeographicData.target_ports", "modulename": "src.models", "qualname": "DShieldGeographicData.target_ports", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[int]"}, {"fullname": "src.models.DShieldGeographicData.timestamp", "modulename": "src.models", "qualname": "DShieldGeographicData.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.DShieldGeographicData.raw_data", "modulename": "src.models", "qualname": "DShieldGeographicData.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.DShieldGeographicData.model_config", "modulename": "src.models", "qualname": "DShieldGeographicData.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.DShieldPortData", "modulename": "src.models", "qualname": "DShieldPortData", "kind": "class", "doc": "<p>Model for DShield port data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.DShieldPortData.port", "modulename": "src.models", "qualname": "DShieldPortData.port", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldPortData.service", "modulename": "src.models", "qualname": "DShieldPortData.service", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DShieldPortData.attack_count", "modulename": "src.models", "qualname": "DShieldPortData.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldPortData.unique_attackers", "modulename": "src.models", "qualname": "DShieldPortData.unique_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldPortData.reputation_score", "modulename": "src.models", "qualname": "DShieldPortData.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldPortData.top_attackers", "modulename": "src.models", "qualname": "DShieldPortData.top_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldPortData.attack_types", "modulename": "src.models", "qualname": "DShieldPortData.attack_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldPortData.countries", "modulename": "src.models", "qualname": "DShieldPortData.countries", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldPortData.timestamp", "modulename": "src.models", "qualname": "DShieldPortData.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.DShieldPortData.raw_data", "modulename": "src.models", "qualname": "DShieldPortData.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.DShieldPortData.validate_port", "modulename": "src.models", "qualname": "DShieldPortData.validate_port", "kind": "function", "doc": "<p>Validate port number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.DShieldPortData.model_config", "modulename": "src.models", "qualname": "DShieldPortData.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.ThreatIntelligenceSource", "modulename": "src.models", "qualname": "ThreatIntelligenceSource", "kind": "class", "doc": "<p>Threat intelligence sources.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "src.models.ThreatIntelligenceSource.DSHIELD", "modulename": "src.models", "qualname": "ThreatIntelligenceSource.DSHIELD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ThreatIntelligenceSource.DSHIELD: &#x27;dshield&#x27;&gt;"}, {"fullname": "src.models.ThreatIntelligenceSource.VIRUSTOTAL", "modulename": "src.models", "qualname": "ThreatIntelligenceSource.VIRUSTOTAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ThreatIntelligenceSource.VIRUSTOTAL: &#x27;virustotal&#x27;&gt;"}, {"fullname": "src.models.ThreatIntelligenceSource.SHODAN", "modulename": "src.models", "qualname": "ThreatIntelligenceSource.SHODAN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ThreatIntelligenceSource.SHODAN: &#x27;shodan&#x27;&gt;"}, {"fullname": "src.models.ThreatIntelligenceSource.ABUSEIPDB", "modulename": "src.models", "qualname": "ThreatIntelligenceSource.ABUSEIPDB", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ThreatIntelligenceSource.ABUSEIPDB: &#x27;abuseipdb&#x27;&gt;"}, {"fullname": "src.models.ThreatIntelligenceSource.ALIENVAULT", "modulename": "src.models", "qualname": "ThreatIntelligenceSource.ALIENVAULT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ThreatIntelligenceSource.ALIENVAULT: &#x27;alienvault&#x27;&gt;"}, {"fullname": "src.models.ThreatIntelligenceSource.THREATFOX", "modulename": "src.models", "qualname": "ThreatIntelligenceSource.THREATFOX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ThreatIntelligenceSource.THREATFOX: &#x27;threatfox&#x27;&gt;"}, {"fullname": "src.models.ThreatIntelligence", "modulename": "src.models", "qualname": "ThreatIntelligence", "kind": "class", "doc": "<p>Model for DShield threat intelligence data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.ThreatIntelligence.ip_address", "modulename": "src.models", "qualname": "ThreatIntelligence.ip_address", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.ThreatIntelligence.reputation_score", "modulename": "src.models", "qualname": "ThreatIntelligence.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.ThreatIntelligence.threat_level", "modulename": "src.models", "qualname": "ThreatIntelligence.threat_level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.ThreatIntelligence.country", "modulename": "src.models", "qualname": "ThreatIntelligence.country", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.ThreatIntelligence.asn", "modulename": "src.models", "qualname": "ThreatIntelligence.asn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.ThreatIntelligence.organization", "modulename": "src.models", "qualname": "ThreatIntelligence.organization", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.ThreatIntelligence.first_seen", "modulename": "src.models", "qualname": "ThreatIntelligence.first_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.ThreatIntelligence.last_seen", "modulename": "src.models", "qualname": "ThreatIntelligence.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.ThreatIntelligence.attack_types", "modulename": "src.models", "qualname": "ThreatIntelligence.attack_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.ThreatIntelligence.tags", "modulename": "src.models", "qualname": "ThreatIntelligence.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.ThreatIntelligence.attack_count", "modulename": "src.models", "qualname": "ThreatIntelligence.attack_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.ThreatIntelligence.port_count", "modulename": "src.models", "qualname": "ThreatIntelligence.port_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.ThreatIntelligence.service_count", "modulename": "src.models", "qualname": "ThreatIntelligence.service_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.models.ThreatIntelligence.raw_data", "modulename": "src.models", "qualname": "ThreatIntelligence.raw_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.ThreatIntelligence.validate_ip_address", "modulename": "src.models", "qualname": "ThreatIntelligence.validate_ip_address", "kind": "function", "doc": "<p>Validate IP address format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.ThreatIntelligence.validate_reputation_score", "modulename": "src.models", "qualname": "ThreatIntelligence.validate_reputation_score", "kind": "function", "doc": "<p>Validate reputation score range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.ThreatIntelligence.model_config", "modulename": "src.models", "qualname": "ThreatIntelligence.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.ThreatIntelligenceResult", "modulename": "src.models", "qualname": "ThreatIntelligenceResult", "kind": "class", "doc": "<p>Enhanced threat intelligence result from multiple sources.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.ThreatIntelligenceResult.ip_address", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.ip_address", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.ThreatIntelligenceResult.domain", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.domain", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.ThreatIntelligenceResult.overall_threat_score", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.overall_threat_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.ThreatIntelligenceResult.confidence_score", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.confidence_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.ThreatIntelligenceResult.source_results", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.source_results", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[src.models.ThreatIntelligenceSource, Dict[str, Any]]"}, {"fullname": "src.models.ThreatIntelligenceResult.threat_indicators", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.threat_indicators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.ThreatIntelligenceResult.geographic_data", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.geographic_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.ThreatIntelligenceResult.network_data", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.network_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.ThreatIntelligenceResult.first_seen", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.first_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.ThreatIntelligenceResult.last_seen", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.ThreatIntelligenceResult.sources_queried", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.sources_queried", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.ThreatIntelligenceSource]"}, {"fullname": "src.models.ThreatIntelligenceResult.query_timestamp", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.query_timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.ThreatIntelligenceResult.cache_hit", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.cache_hit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.models.ThreatIntelligenceResult.validate_ip_address", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.validate_ip_address", "kind": "function", "doc": "<p>Validate IP address format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.ThreatIntelligenceResult.validate_overall_threat_score", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.validate_overall_threat_score", "kind": "function", "doc": "<p>Validate overall threat score range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.ThreatIntelligenceResult.validate_confidence_score", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.validate_confidence_score", "kind": "function", "doc": "<p>Validate confidence score range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.ThreatIntelligenceResult.model_config", "modulename": "src.models", "qualname": "ThreatIntelligenceResult.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.DomainIntelligence", "modulename": "src.models", "qualname": "DomainIntelligence", "kind": "class", "doc": "<p>Domain threat intelligence data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.DomainIntelligence.domain", "modulename": "src.models", "qualname": "DomainIntelligence.domain", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.DomainIntelligence.threat_score", "modulename": "src.models", "qualname": "DomainIntelligence.threat_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DomainIntelligence.reputation_score", "modulename": "src.models", "qualname": "DomainIntelligence.reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DomainIntelligence.ip_addresses", "modulename": "src.models", "qualname": "DomainIntelligence.ip_addresses", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DomainIntelligence.nameservers", "modulename": "src.models", "qualname": "DomainIntelligence.nameservers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DomainIntelligence.registrar", "modulename": "src.models", "qualname": "DomainIntelligence.registrar", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.DomainIntelligence.creation_date", "modulename": "src.models", "qualname": "DomainIntelligence.creation_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "src.models.DomainIntelligence.malware_families", "modulename": "src.models", "qualname": "DomainIntelligence.malware_families", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DomainIntelligence.categories", "modulename": "src.models", "qualname": "DomainIntelligence.categories", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DomainIntelligence.tags", "modulename": "src.models", "qualname": "DomainIntelligence.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DomainIntelligence.source_results", "modulename": "src.models", "qualname": "DomainIntelligence.source_results", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[src.models.ThreatIntelligenceSource, Dict[str, Any]]"}, {"fullname": "src.models.DomainIntelligence.sources_queried", "modulename": "src.models", "qualname": "DomainIntelligence.sources_queried", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.ThreatIntelligenceSource]"}, {"fullname": "src.models.DomainIntelligence.query_timestamp", "modulename": "src.models", "qualname": "DomainIntelligence.query_timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.DomainIntelligence.cache_hit", "modulename": "src.models", "qualname": "DomainIntelligence.cache_hit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.models.DomainIntelligence.validate_domain", "modulename": "src.models", "qualname": "DomainIntelligence.validate_domain", "kind": "function", "doc": "<p>Validate domain name format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.DomainIntelligence.validate_score", "modulename": "src.models", "qualname": "DomainIntelligence.validate_score", "kind": "function", "doc": "<p>Validate score range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.DomainIntelligence.model_config", "modulename": "src.models", "qualname": "DomainIntelligence.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.AttackReport", "modulename": "src.models", "qualname": "AttackReport", "kind": "class", "doc": "<p>Model for structured attack reports.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.AttackReport.report_id", "modulename": "src.models", "qualname": "AttackReport.report_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.AttackReport.timestamp", "modulename": "src.models", "qualname": "AttackReport.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.AttackReport.title", "modulename": "src.models", "qualname": "AttackReport.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.AttackReport.summary", "modulename": "src.models", "qualname": "AttackReport.summary", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.AttackReport.total_events", "modulename": "src.models", "qualname": "AttackReport.total_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.AttackReport.unique_ips", "modulename": "src.models", "qualname": "AttackReport.unique_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.AttackReport.time_range", "modulename": "src.models", "qualname": "AttackReport.time_range", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, datetime.datetime]"}, {"fullname": "src.models.AttackReport.threat_indicators", "modulename": "src.models", "qualname": "AttackReport.threat_indicators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.AttackReport.high_risk_ips", "modulename": "src.models", "qualname": "AttackReport.high_risk_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.AttackReport.attack_vectors", "modulename": "src.models", "qualname": "AttackReport.attack_vectors", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.AttackReport.affected_systems", "modulename": "src.models", "qualname": "AttackReport.affected_systems", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.AttackReport.impact_assessment", "modulename": "src.models", "qualname": "AttackReport.impact_assessment", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.AttackReport.dshield_attacks", "modulename": "src.models", "qualname": "AttackReport.dshield_attacks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.DShieldAttack]"}, {"fullname": "src.models.AttackReport.dshield_reputation", "modulename": "src.models", "qualname": "AttackReport.dshield_reputation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, src.models.DShieldReputation]"}, {"fullname": "src.models.AttackReport.top_attackers", "modulename": "src.models", "qualname": "AttackReport.top_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.DShieldTopAttacker]"}, {"fullname": "src.models.AttackReport.geographic_data", "modulename": "src.models", "qualname": "AttackReport.geographic_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.DShieldGeographicData]"}, {"fullname": "src.models.AttackReport.port_data", "modulename": "src.models", "qualname": "AttackReport.port_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.DShieldPortData]"}, {"fullname": "src.models.AttackReport.recommendations", "modulename": "src.models", "qualname": "AttackReport.recommendations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.AttackReport.mitigation_actions", "modulename": "src.models", "qualname": "AttackReport.mitigation_actions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.AttackReport.analyst", "modulename": "src.models", "qualname": "AttackReport.analyst", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.models.AttackReport.confidence_level", "modulename": "src.models", "qualname": "AttackReport.confidence_level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.AttackReport.tags", "modulename": "src.models", "qualname": "AttackReport.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.AttackReport.events", "modulename": "src.models", "qualname": "AttackReport.events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.SecurityEvent]"}, {"fullname": "src.models.AttackReport.threat_intelligence", "modulename": "src.models", "qualname": "AttackReport.threat_intelligence", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, src.models.ThreatIntelligence]"}, {"fullname": "src.models.AttackReport.model_config", "modulename": "src.models", "qualname": "AttackReport.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.SecuritySummary", "modulename": "src.models", "qualname": "SecuritySummary", "kind": "class", "doc": "<p>Model for security summary statistics.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.SecuritySummary.timestamp", "modulename": "src.models", "qualname": "SecuritySummary.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.SecuritySummary.time_range_hours", "modulename": "src.models", "qualname": "SecuritySummary.time_range_hours", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.total_events", "modulename": "src.models", "qualname": "SecuritySummary.total_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.events_by_severity", "modulename": "src.models", "qualname": "SecuritySummary.events_by_severity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, int]"}, {"fullname": "src.models.SecuritySummary.events_by_category", "modulename": "src.models", "qualname": "SecuritySummary.events_by_category", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, int]"}, {"fullname": "src.models.SecuritySummary.unique_source_ips", "modulename": "src.models", "qualname": "SecuritySummary.unique_source_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.unique_destination_ips", "modulename": "src.models", "qualname": "SecuritySummary.unique_destination_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.top_source_ips", "modulename": "src.models", "qualname": "SecuritySummary.top_source_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.SecuritySummary.top_destination_ips", "modulename": "src.models", "qualname": "SecuritySummary.top_destination_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.SecuritySummary.high_risk_events", "modulename": "src.models", "qualname": "SecuritySummary.high_risk_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.threat_intelligence_hits", "modulename": "src.models", "qualname": "SecuritySummary.threat_intelligence_hits", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.dshield_attacks", "modulename": "src.models", "qualname": "SecuritySummary.dshield_attacks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.dshield_blocks", "modulename": "src.models", "qualname": "SecuritySummary.dshield_blocks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.dshield_reputation_hits", "modulename": "src.models", "qualname": "SecuritySummary.dshield_reputation_hits", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.SecuritySummary.top_attackers", "modulename": "src.models", "qualname": "SecuritySummary.top_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.DShieldTopAttacker]"}, {"fullname": "src.models.SecuritySummary.geographic_distribution", "modulename": "src.models", "qualname": "SecuritySummary.geographic_distribution", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, int]"}, {"fullname": "src.models.SecuritySummary.port_distribution", "modulename": "src.models", "qualname": "SecuritySummary.port_distribution", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[int, int]"}, {"fullname": "src.models.SecuritySummary.query_duration_ms", "modulename": "src.models", "qualname": "SecuritySummary.query_duration_ms", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.SecuritySummary.indices_queried", "modulename": "src.models", "qualname": "SecuritySummary.indices_queried", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.SecuritySummary.model_config", "modulename": "src.models", "qualname": "SecuritySummary.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.QueryFilter", "modulename": "src.models", "qualname": "QueryFilter", "kind": "class", "doc": "<p>Model for Elasticsearch query filters.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.QueryFilter.field", "modulename": "src.models", "qualname": "QueryFilter.field", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.QueryFilter.value", "modulename": "src.models", "qualname": "QueryFilter.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, int, float, bool, List[Any]]"}, {"fullname": "src.models.QueryFilter.operator", "modulename": "src.models", "qualname": "QueryFilter.operator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.models.QueryFilter.validate_operator", "modulename": "src.models", "qualname": "QueryFilter.validate_operator", "kind": "function", "doc": "<p>Validate filter operator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.QueryFilter.model_config", "modulename": "src.models", "qualname": "QueryFilter.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.ElasticsearchQuery", "modulename": "src.models", "qualname": "ElasticsearchQuery", "kind": "class", "doc": "<p>Model for Elasticsearch queries.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.ElasticsearchQuery.indices", "modulename": "src.models", "qualname": "ElasticsearchQuery.indices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.ElasticsearchQuery.time_range", "modulename": "src.models", "qualname": "ElasticsearchQuery.time_range", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, datetime.datetime]"}, {"fullname": "src.models.ElasticsearchQuery.filters", "modulename": "src.models", "qualname": "ElasticsearchQuery.filters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.models.QueryFilter]"}, {"fullname": "src.models.ElasticsearchQuery.size", "modulename": "src.models", "qualname": "ElasticsearchQuery.size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.ElasticsearchQuery.sort", "modulename": "src.models", "qualname": "ElasticsearchQuery.sort", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, str]]"}, {"fullname": "src.models.ElasticsearchQuery.aggs", "modulename": "src.models", "qualname": "ElasticsearchQuery.aggs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.models.ElasticsearchQuery.validate_size", "modulename": "src.models", "qualname": "ElasticsearchQuery.validate_size", "kind": "function", "doc": "<p>Validate result size.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.ElasticsearchQuery.model_config", "modulename": "src.models", "qualname": "ElasticsearchQuery.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.models.DShieldStatistics", "modulename": "src.models", "qualname": "DShieldStatistics", "kind": "class", "doc": "<p>Model for DShield statistics data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.models.DShieldStatistics.timestamp", "modulename": "src.models", "qualname": "DShieldStatistics.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.models.DShieldStatistics.time_range_hours", "modulename": "src.models", "qualname": "DShieldStatistics.time_range_hours", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.total_attacks", "modulename": "src.models", "qualname": "DShieldStatistics.total_attacks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.unique_attackers", "modulename": "src.models", "qualname": "DShieldStatistics.unique_attackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.total_targets", "modulename": "src.models", "qualname": "DShieldStatistics.total_targets", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.countries_attacking", "modulename": "src.models", "qualname": "DShieldStatistics.countries_attacking", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.top_countries", "modulename": "src.models", "qualname": "DShieldStatistics.top_countries", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.DShieldStatistics.ports_targeted", "modulename": "src.models", "qualname": "DShieldStatistics.ports_targeted", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.top_ports", "modulename": "src.models", "qualname": "DShieldStatistics.top_ports", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.DShieldStatistics.protocols_used", "modulename": "src.models", "qualname": "DShieldStatistics.protocols_used", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.top_protocols", "modulename": "src.models", "qualname": "DShieldStatistics.top_protocols", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.DShieldStatistics.asns_attacking", "modulename": "src.models", "qualname": "DShieldStatistics.asns_attacking", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.top_asns", "modulename": "src.models", "qualname": "DShieldStatistics.top_asns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.DShieldStatistics.organizations_attacking", "modulename": "src.models", "qualname": "DShieldStatistics.organizations_attacking", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.top_organizations", "modulename": "src.models", "qualname": "DShieldStatistics.top_organizations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.models.DShieldStatistics.high_reputation_ips", "modulename": "src.models", "qualname": "DShieldStatistics.high_reputation_ips", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.models.DShieldStatistics.average_reputation_score", "modulename": "src.models", "qualname": "DShieldStatistics.average_reputation_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldStatistics.query_duration_ms", "modulename": "src.models", "qualname": "DShieldStatistics.query_duration_ms", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.models.DShieldStatistics.indices_queried", "modulename": "src.models", "qualname": "DShieldStatistics.indices_queried", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.models.DShieldStatistics.model_config", "modulename": "src.models", "qualname": "DShieldStatistics.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.op_secrets", "modulename": "src.op_secrets", "kind": "module", "doc": "<p>1Password CLI integration for secret management in DShield MCP.</p>\n\n<p>This module provides integration with the 1Password CLI for secure secret\nmanagement. It handles op:// URLs in configuration values by resolving\nthem using the 1Password CLI tool.</p>\n\n<p>Features:</p>\n\n<ul>\n<li>1Password CLI availability detection</li>\n<li>op:// URL resolution</li>\n<li>Environment variable resolution</li>\n<li>Complex value processing with embedded URLs</li>\n<li>Error handling and logging</li>\n</ul>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>from src.op_secrets import OnePasswordSecrets\n      op = OnePasswordSecrets()\n      secret = op.resolve_environment_variable(\"op://vault/item/field\")\n      print(secret)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.op_secrets.logger", "modulename": "src.op_secrets", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.op_secrets&#x27;,))&gt;"}, {"fullname": "src.op_secrets.OnePasswordSecrets", "modulename": "src.op_secrets", "qualname": "OnePasswordSecrets", "kind": "class", "doc": "<p>Handle 1Password secret resolution for config values.</p>\n\n<p>This class provides methods to resolve 1Password CLI references (op:// URLs)\nin configuration values. It automatically detects 1Password CLI availability\nand provides fallback behavior when the CLI is not available.</p>\n\n<p>Attributes:\n    op_available: Whether the 1Password CLI is available and working</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>op = OnePasswordSecrets()\n      if op.op_available:\n          ...     secret = op.resolve_op_url(\"op://vault/item/field\")\n          ...     print(secret)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.op_secrets.OnePasswordSecrets.__init__", "modulename": "src.op_secrets", "qualname": "OnePasswordSecrets.__init__", "kind": "function", "doc": "<p>Initialize the OnePasswordSecrets manager.</p>\n\n<p>Checks for 1Password CLI availability and logs a warning if it's not\navailable. This affects the behavior of URL resolution methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.op_secrets.OnePasswordSecrets.op_available", "modulename": "src.op_secrets", "qualname": "OnePasswordSecrets.op_available", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.op_secrets.OnePasswordSecrets.resolve_op_url", "modulename": "src.op_secrets", "qualname": "OnePasswordSecrets.resolve_op_url", "kind": "function", "doc": "<p>Resolve a 1Password URL (op://) to its actual value.</p>\n\n<p>Uses the 1Password CLI to retrieve the secret value referenced\nby the op:// URL. Handles various error conditions gracefully.</p>\n\n<p>Args:\n    op_url: The 1Password URL (e.g., \"op://vault/item/field\")</p>\n\n<p>Returns:\n    The resolved secret value or None if resolution failed</p>\n\n<p>Raises:\n    subprocess.TimeoutExpired: If the CLI command times out\n    subprocess.CalledProcessError: If the CLI command fails</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.op_secrets.OnePasswordSecrets.resolve_environment_variable", "modulename": "src.op_secrets", "qualname": "OnePasswordSecrets.resolve_environment_variable", "kind": "function", "doc": "<p>Resolve config value, handling op:// URLs.</p>\n\n<p>Processes a configuration value that may contain 1Password CLI\nreferences. Handles both simple op:// URLs and complex values\nwith embedded URLs.</p>\n\n<p>Args:\n    value: The config value to resolve</p>\n\n<p>Returns:\n    The resolved value (original if not an op:// URL or resolution failed)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.security_validator", "modulename": "src.security_validator", "kind": "module", "doc": "<p>Security validation module for DShield MCP server.</p>\n\n<p>This module provides security validation for MCP tools, including:</p>\n\n<ul>\n<li>Tool description validation</li>\n<li>Parameter schema validation</li>\n<li>Input sanitization checks</li>\n<li>Security monitoring and logging</li>\n</ul>\n"}, {"fullname": "src.security_validator.logger", "modulename": "src.security_validator", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.security_validator (WARNING)&gt;"}, {"fullname": "src.security_validator.SecurityRiskLevel", "modulename": "src.security_validator", "qualname": "SecurityRiskLevel", "kind": "class", "doc": "<p>Security risk levels.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.security_validator.SecurityRiskLevel.LOW", "modulename": "src.security_validator", "qualname": "SecurityRiskLevel.LOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SecurityRiskLevel.LOW: &#x27;low&#x27;&gt;"}, {"fullname": "src.security_validator.SecurityRiskLevel.MEDIUM", "modulename": "src.security_validator", "qualname": "SecurityRiskLevel.MEDIUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SecurityRiskLevel.MEDIUM: &#x27;medium&#x27;&gt;"}, {"fullname": "src.security_validator.SecurityRiskLevel.HIGH", "modulename": "src.security_validator", "qualname": "SecurityRiskLevel.HIGH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SecurityRiskLevel.HIGH: &#x27;high&#x27;&gt;"}, {"fullname": "src.security_validator.SecurityRiskLevel.CRITICAL", "modulename": "src.security_validator", "qualname": "SecurityRiskLevel.CRITICAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SecurityRiskLevel.CRITICAL: &#x27;critical&#x27;&gt;"}, {"fullname": "src.security_validator.SecurityIssue", "modulename": "src.security_validator", "qualname": "SecurityIssue", "kind": "class", "doc": "<p>Represents a security issue found during validation.</p>\n"}, {"fullname": "src.security_validator.SecurityIssue.__init__", "modulename": "src.security_validator", "qualname": "SecurityIssue.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">issue_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">severity</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">security_validator</span><span class=\"o\">.</span><span class=\"n\">SecurityRiskLevel</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">details</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.security_validator.SecurityIssue.issue_type", "modulename": "src.security_validator", "qualname": "SecurityIssue.issue_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.security_validator.SecurityIssue.severity", "modulename": "src.security_validator", "qualname": "SecurityIssue.severity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.security_validator.SecurityRiskLevel"}, {"fullname": "src.security_validator.SecurityIssue.description", "modulename": "src.security_validator", "qualname": "SecurityIssue.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.security_validator.SecurityIssue.location", "modulename": "src.security_validator", "qualname": "SecurityIssue.location", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.security_validator.SecurityIssue.details", "modulename": "src.security_validator", "qualname": "SecurityIssue.details", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.security_validator.SecurityIssue.timestamp", "modulename": "src.security_validator", "qualname": "SecurityIssue.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime", "default_value": "None"}, {"fullname": "src.security_validator.SecurityIssue.to_dict", "modulename": "src.security_validator", "qualname": "SecurityIssue.to_dict", "kind": "function", "doc": "<p>Convert to dictionary for serialization.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.security_validator.SecurityValidator", "modulename": "src.security_validator", "qualname": "SecurityValidator", "kind": "class", "doc": "<p>Security validation for MCP tools and parameters.</p>\n"}, {"fullname": "src.security_validator.SecurityValidator.__init__", "modulename": "src.security_validator", "qualname": "SecurityValidator.__init__", "kind": "function", "doc": "<p>Initialize security validator.</p>\n\n<p>Args:\n    enable_logging: Whether to enable security logging</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">enable_logging</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "src.security_validator.SecurityValidator.enable_logging", "modulename": "src.security_validator", "qualname": "SecurityValidator.enable_logging", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.security_validator.SecurityValidator.issues", "modulename": "src.security_validator", "qualname": "SecurityValidator.issues", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.security_validator.SecurityIssue]"}, {"fullname": "src.security_validator.SecurityValidator.sensitive_patterns", "modulename": "src.security_validator", "qualname": "SecurityValidator.sensitive_patterns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.security_validator.SecurityValidator.sensitive_exact_patterns", "modulename": "src.security_validator", "qualname": "SecurityValidator.sensitive_exact_patterns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.security_validator.SecurityValidator.hidden_instruction_patterns", "modulename": "src.security_validator", "qualname": "SecurityValidator.hidden_instruction_patterns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.security_validator.SecurityValidator.suspicious_parameters", "modulename": "src.security_validator", "qualname": "SecurityValidator.suspicious_parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.security_validator.SecurityValidator.tool_shadowing_patterns", "modulename": "src.security_validator", "qualname": "SecurityValidator.tool_shadowing_patterns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.security_validator.SecurityValidator.sensitive_regex", "modulename": "src.security_validator", "qualname": "SecurityValidator.sensitive_regex", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.security_validator.SecurityValidator.sensitive_exact_regex", "modulename": "src.security_validator", "qualname": "SecurityValidator.sensitive_exact_regex", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.security_validator.SecurityValidator.hidden_instruction_regex", "modulename": "src.security_validator", "qualname": "SecurityValidator.hidden_instruction_regex", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.security_validator.SecurityValidator.tool_shadowing_regex", "modulename": "src.security_validator", "qualname": "SecurityValidator.tool_shadowing_regex", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.security_validator.SecurityValidator.validate_tool_description", "modulename": "src.security_validator", "qualname": "SecurityValidator.validate_tool_description", "kind": "function", "doc": "<p>Validate tool description for security issues.</p>\n\n<p>Args:\n    tool_name: Name of the tool being validated\n    description: Tool description to validate</p>\n\n<p>Returns:\n    List of security issues found</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tool_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">security_validator</span><span class=\"o\">.</span><span class=\"n\">SecurityIssue</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.security_validator.SecurityValidator.validate_tool_schema", "modulename": "src.security_validator", "qualname": "SecurityValidator.validate_tool_schema", "kind": "function", "doc": "<p>Validate tool schema for security issues.</p>\n\n<p>Args:\n    tool_name: Name of the tool being validated\n    schema: Tool parameter schema to validate</p>\n\n<p>Returns:\n    List of security issues found</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tool_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">security_validator</span><span class=\"o\">.</span><span class=\"n\">SecurityIssue</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.security_validator.SecurityValidator.validate_tool_arguments", "modulename": "src.security_validator", "qualname": "SecurityValidator.validate_tool_arguments", "kind": "function", "doc": "<p>Validate tool arguments for security issues.</p>\n\n<p>Args:\n    tool_name: Name of the tool being validated\n    arguments: Tool arguments to validate</p>\n\n<p>Returns:\n    List of security issues found</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tool_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">security_validator</span><span class=\"o\">.</span><span class=\"n\">SecurityIssue</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.security_validator.SecurityValidator.validate_server_configuration", "modulename": "src.security_validator", "qualname": "SecurityValidator.validate_server_configuration", "kind": "function", "doc": "<p>Validate MCP server configuration for security issues.</p>\n\n<p>Args:\n    config: Server configuration to validate</p>\n\n<p>Returns:\n    List of security issues found</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">security_validator</span><span class=\"o\">.</span><span class=\"n\">SecurityIssue</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.security_validator.SecurityValidator.get_security_summary", "modulename": "src.security_validator", "qualname": "SecurityValidator.get_security_summary", "kind": "function", "doc": "<p>Get a summary of all security issues found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.security_validator.SecurityValidator.clear_issues", "modulename": "src.security_validator", "qualname": "SecurityValidator.clear_issues", "kind": "function", "doc": "<p>Clear all recorded security issues.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.security_validator.SecurityMonitor", "modulename": "src.security_validator", "qualname": "SecurityMonitor", "kind": "class", "doc": "<p>Real-time security monitoring for MCP server.</p>\n"}, {"fullname": "src.security_validator.SecurityMonitor.__init__", "modulename": "src.security_validator", "qualname": "SecurityMonitor.__init__", "kind": "function", "doc": "<p>Initialize security monitor.</p>\n\n<p>Args:\n    validator: Security validator instance</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">validator</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">security_validator</span><span class=\"o\">.</span><span class=\"n\">SecurityValidator</span></span>)</span>"}, {"fullname": "src.security_validator.SecurityMonitor.validator", "modulename": "src.security_validator", "qualname": "SecurityMonitor.validator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.security_validator.SecurityMonitor.monitoring_enabled", "modulename": "src.security_validator", "qualname": "SecurityMonitor.monitoring_enabled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.security_validator.SecurityMonitor.alert_threshold", "modulename": "src.security_validator", "qualname": "SecurityMonitor.alert_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.security_validator.SecurityMonitor.monitor_tool_registration", "modulename": "src.security_validator", "qualname": "SecurityMonitor.monitor_tool_registration", "kind": "function", "doc": "<p>Monitor tool registration for security issues.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tool_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">security_validator</span><span class=\"o\">.</span><span class=\"n\">SecurityIssue</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.security_validator.SecurityMonitor.monitor_tool_execution", "modulename": "src.security_validator", "qualname": "SecurityMonitor.monitor_tool_execution", "kind": "function", "doc": "<p>Monitor tool execution for security issues.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tool_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">security_validator</span><span class=\"o\">.</span><span class=\"n\">SecurityIssue</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.security_validator.SecurityMonitor.get_security_metrics", "modulename": "src.security_validator", "qualname": "SecurityMonitor.get_security_metrics", "kind": "function", "doc": "<p>Get security monitoring metrics.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.security_validator.SecurityMonitor.set_alert_threshold", "modulename": "src.security_validator", "qualname": "SecurityMonitor.set_alert_threshold", "kind": "function", "doc": "<p>Set the alert threshold for security monitoring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">security_validator</span><span class=\"o\">.</span><span class=\"n\">SecurityRiskLevel</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.security_validator.SecurityMonitor.enable_monitoring", "modulename": "src.security_validator", "qualname": "SecurityMonitor.enable_monitoring", "kind": "function", "doc": "<p>Enable security monitoring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.security_validator.SecurityMonitor.disable_monitoring", "modulename": "src.security_validator", "qualname": "SecurityMonitor.disable_monitoring", "kind": "function", "doc": "<p>Disable security monitoring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.threat_intelligence_manager", "modulename": "src.threat_intelligence_manager", "kind": "module", "doc": "<p>Threat Intelligence Manager for DShield MCP.</p>\n\n<p>This module provides a centralized manager for coordinating multiple threat intelligence\nsources including DShield, VirusTotal, Shodan, and other security APIs. It handles\nsource coordination, rate limiting, caching, and result correlation.</p>\n\n<p>Features:</p>\n\n<ul>\n<li>Multi-source threat intelligence aggregation</li>\n<li>Intelligent correlation and scoring</li>\n<li>Advanced caching with configurable TTL</li>\n<li>Rate limiting and error handling</li>\n<li>Extensible architecture for new sources</li>\n</ul>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>from src.threat_intelligence_manager import ThreatIntelligenceManager\n      async with ThreatIntelligenceManager() as manager:\n          ...     result = await manager.enrich_ip_comprehensive(\"8.8.8.8\")\n          ...     print(result.overall_threat_score)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.threat_intelligence_manager.logger", "modulename": "src.threat_intelligence_manager", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.threat_intelligence_manager&#x27;,))&gt;"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager", "kind": "class", "doc": "<p>Manages multiple threat intelligence sources and correlation.</p>\n\n<p>This class provides a unified interface for querying multiple threat intelligence\nsources, aggregating results, and providing comprehensive threat assessments.\nIt handles rate limiting, caching, error handling, and result correlation.</p>\n\n<p>Attributes:\n    config: Application configuration\n    user_config: User-specific configuration\n    clients: Dictionary of source clients\n    correlation_config: Correlation settings\n    confidence_threshold: Minimum confidence threshold\n    max_sources: Maximum sources per query\n    cache: In-memory cache for results\n    cache_ttl: Cache time-to-live\n    rate_limit_trackers: Rate limiting trackers per source</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>async with ThreatIntelligenceManager() as manager:\n          ...     result = await manager.enrich_ip_comprehensive(\"8.8.8.8\")\n          ...     print(f\"Threat score: {result.overall_threat_score}\")</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.__init__", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.__init__", "kind": "function", "doc": "<p>Initialize the threat intelligence manager.</p>\n\n<p>Loads configuration, initializes source clients, and sets up\ncorrelation and caching parameters.</p>\n\n<p>Raises:\n    RuntimeError: If configuration loading fails</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.clients", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.clients", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[src.models.ThreatIntelligenceSource, Any]"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.correlation_config", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.correlation_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.confidence_threshold", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.confidence_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.max_sources", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.max_sources", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.cache", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.cache", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, src.models.ThreatIntelligenceResult]"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.cache_ttl", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.cache_ttl", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.sqlite_cache_enabled", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.sqlite_cache_enabled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.sqlite_cache_path", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.sqlite_cache_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.sqlite_cache_ttl", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.sqlite_cache_ttl", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.rate_limit_trackers", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.rate_limit_trackers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[src.models.ThreatIntelligenceSource, List[float]]"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.elasticsearch_client", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.elasticsearch_client", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.elasticsearch_writeback_enabled", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.elasticsearch_writeback_enabled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.enrich_ip_comprehensive", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.enrich_ip_comprehensive", "kind": "function", "doc": "<p>Comprehensive IP enrichment from multiple sources.</p>\n\n<p>Queries all enabled threat intelligence sources for information about\nthe specified IP address, aggregates results, and provides a comprehensive\nthreat assessment.</p>\n\n<p>Args:\n    ip_address: The IP address to enrich</p>\n\n<p>Returns:\n    ThreatIntelligenceResult: Comprehensive threat intelligence data</p>\n\n<p>Raises:\n    ValueError: If IP address is invalid\n    RuntimeError: If no sources are available</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ip_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ThreatIntelligenceResult</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.enrich_domain_comprehensive", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.enrich_domain_comprehensive", "kind": "function", "doc": "<p>Comprehensive domain enrichment from multiple sources.</p>\n\n<p>Queries all enabled threat intelligence sources for information about\nthe specified domain, aggregates results, and provides a comprehensive\nthreat assessment.</p>\n\n<p>Args:\n    domain: The domain to enrich</p>\n\n<p>Returns:\n    DomainIntelligence: Comprehensive domain threat intelligence data</p>\n\n<p>Raises:\n    ValueError: If domain is invalid\n    RuntimeError: If no sources are available</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DomainIntelligence</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.correlate_threat_indicators", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.correlate_threat_indicators", "kind": "function", "doc": "<p>Correlate multiple threat indicators across sources.</p>\n\n<p>Analyzes multiple threat indicators (IPs, domains, hashes, etc.) and\nfinds correlations and relationships between them.</p>\n\n<p>Args:\n    indicators: List of threat indicators to correlate</p>\n\n<p>Returns:\n    Dictionary containing correlation results</p>\n\n<p>Raises:\n    ValueError: If indicators list is empty</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indicators</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.cleanup", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.cleanup", "kind": "function", "doc": "<p>Clean up resources and close connections.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.get_available_sources", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.get_available_sources", "kind": "function", "doc": "<p>Get list of available threat intelligence sources.</p>\n\n<p>Returns:\n    List of available sources</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ThreatIntelligenceSource</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.get_source_status", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.get_source_status", "kind": "function", "doc": "<p>Get status of all threat intelligence sources.</p>\n\n<p>Returns:\n    Dictionary containing source status information</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.threat_intelligence_manager.ThreatIntelligenceManager.get_cache_statistics", "modulename": "src.threat_intelligence_manager", "qualname": "ThreatIntelligenceManager.get_cache_statistics", "kind": "function", "doc": "<p>Get cache statistics for both memory and SQLite caches.</p>\n\n<p>Returns:\n    Dictionary containing cache statistics</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config", "modulename": "src.user_config", "kind": "module", "doc": "<p>User Configuration Management for DShield MCP.</p>\n\n<p>This module provides comprehensive user configuration management for the DShield MCP\nserver. It extends the base configuration system with user-customizable settings,\nvalidation, environment variable support, and multiple configuration sources.</p>\n\n<p>Features:</p>\n\n<ul>\n<li>User-configurable settings with validation</li>\n<li>Environment variable overrides</li>\n<li>Multiple configuration file sources</li>\n<li>Setting categories (query, pagination, streaming, etc.)</li>\n<li>Configuration export and import</li>\n<li>1Password CLI integration</li>\n</ul>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>from src.user_config import get_user_config\n      config = get_user_config()\n      page_size = config.get_setting(\"query\", \"default_page_size\")\n      print(page_size)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.user_config.logger", "modulename": "src.user_config", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundLoggerLazyProxy(logger=None, wrapper_class=None, processors=None, context_class=None, initial_values={}, logger_factory_args=(&#x27;src.user_config&#x27;,))&gt;"}, {"fullname": "src.user_config.QuerySettings", "modulename": "src.user_config", "qualname": "QuerySettings", "kind": "class", "doc": "<p>User-configurable query settings.</p>\n\n<p>Attributes:\n    default_page_size: Default number of results per page\n    max_page_size: Maximum allowed page size\n    default_timeout_seconds: Default query timeout in seconds\n    max_timeout_seconds: Maximum allowed timeout in seconds\n    enable_smart_optimization: Whether to enable smart query optimization\n    fallback_strategy: Strategy for handling query failures\n    max_query_complexity: Maximum query complexity threshold</p>\n"}, {"fullname": "src.user_config.QuerySettings.__init__", "modulename": "src.user_config", "qualname": "QuerySettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">default_page_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">max_page_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">default_timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">max_timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">enable_smart_optimization</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">fallback_strategy</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;aggregate&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_query_complexity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span>)</span>"}, {"fullname": "src.user_config.QuerySettings.default_page_size", "modulename": "src.user_config", "qualname": "QuerySettings.default_page_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "100"}, {"fullname": "src.user_config.QuerySettings.max_page_size", "modulename": "src.user_config", "qualname": "QuerySettings.max_page_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1000"}, {"fullname": "src.user_config.QuerySettings.default_timeout_seconds", "modulename": "src.user_config", "qualname": "QuerySettings.default_timeout_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "30"}, {"fullname": "src.user_config.QuerySettings.max_timeout_seconds", "modulename": "src.user_config", "qualname": "QuerySettings.max_timeout_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "300"}, {"fullname": "src.user_config.QuerySettings.enable_smart_optimization", "modulename": "src.user_config", "qualname": "QuerySettings.enable_smart_optimization", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.QuerySettings.fallback_strategy", "modulename": "src.user_config", "qualname": "QuerySettings.fallback_strategy", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;aggregate&#x27;"}, {"fullname": "src.user_config.QuerySettings.max_query_complexity", "modulename": "src.user_config", "qualname": "QuerySettings.max_query_complexity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1000"}, {"fullname": "src.user_config.PaginationSettings", "modulename": "src.user_config", "qualname": "PaginationSettings", "kind": "class", "doc": "<p>User-configurable pagination settings.</p>\n\n<p>Attributes:\n    default_method: Default pagination method (page or cursor)\n    max_pages_per_request: Maximum pages per request\n    cursor_timeout_seconds: Cursor timeout in seconds\n    enable_metadata: Whether to include pagination metadata\n    include_performance_metrics: Whether to include performance metrics</p>\n"}, {"fullname": "src.user_config.PaginationSettings.__init__", "modulename": "src.user_config", "qualname": "PaginationSettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">default_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;page&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_pages_per_request</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">cursor_timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">enable_metadata</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_performance_metrics</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "src.user_config.PaginationSettings.default_method", "modulename": "src.user_config", "qualname": "PaginationSettings.default_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;page&#x27;"}, {"fullname": "src.user_config.PaginationSettings.max_pages_per_request", "modulename": "src.user_config", "qualname": "PaginationSettings.max_pages_per_request", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "10"}, {"fullname": "src.user_config.PaginationSettings.cursor_timeout_seconds", "modulename": "src.user_config", "qualname": "PaginationSettings.cursor_timeout_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "300"}, {"fullname": "src.user_config.PaginationSettings.enable_metadata", "modulename": "src.user_config", "qualname": "PaginationSettings.enable_metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.PaginationSettings.include_performance_metrics", "modulename": "src.user_config", "qualname": "PaginationSettings.include_performance_metrics", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.StreamingSettings", "modulename": "src.user_config", "qualname": "StreamingSettings", "kind": "class", "doc": "<p>User-configurable streaming settings.</p>\n\n<p>Attributes:\n    default_chunk_size: Default chunk size for streaming\n    max_chunk_size: Maximum allowed chunk size\n    session_context_fields: Fields to use for session context\n    enable_session_summaries: Whether to enable session summaries\n    session_timeout_minutes: Session timeout in minutes</p>\n"}, {"fullname": "src.user_config.StreamingSettings.__init__", "modulename": "src.user_config", "qualname": "StreamingSettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">default_chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">max_chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>,</span><span class=\"param\">\t<span class=\"n\">session_context_fields</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">enable_session_summaries</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">session_timeout_minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span></span>)</span>"}, {"fullname": "src.user_config.StreamingSettings.default_chunk_size", "modulename": "src.user_config", "qualname": "StreamingSettings.default_chunk_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "50"}, {"fullname": "src.user_config.StreamingSettings.max_chunk_size", "modulename": "src.user_config", "qualname": "StreamingSettings.max_chunk_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "200"}, {"fullname": "src.user_config.StreamingSettings.session_context_fields", "modulename": "src.user_config", "qualname": "StreamingSettings.session_context_fields", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.user_config.StreamingSettings.enable_session_summaries", "modulename": "src.user_config", "qualname": "StreamingSettings.enable_session_summaries", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.StreamingSettings.session_timeout_minutes", "modulename": "src.user_config", "qualname": "StreamingSettings.session_timeout_minutes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "30"}, {"fullname": "src.user_config.PerformanceSettings", "modulename": "src.user_config", "qualname": "PerformanceSettings", "kind": "class", "doc": "<p>User-configurable performance settings.</p>\n\n<p>Attributes:\n    enable_caching: Whether to enable caching\n    cache_ttl_seconds: Cache time-to-live in seconds\n    max_cache_size: Maximum cache size\n    enable_connection_pooling: Whether to enable connection pooling\n    connection_pool_size: Connection pool size\n    request_timeout_seconds: Request timeout in seconds\n    enable_sqlite_cache: Whether to enable SQLite persistent caching\n    sqlite_cache_ttl_hours: SQLite cache time-to-live in hours\n    sqlite_cache_db_name: SQLite database filename</p>\n"}, {"fullname": "src.user_config.PerformanceSettings.__init__", "modulename": "src.user_config", "qualname": "PerformanceSettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">enable_caching</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cache_ttl_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">max_cache_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">enable_connection_pooling</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">connection_pool_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">request_timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">enable_sqlite_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">sqlite_cache_ttl_hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>,</span><span class=\"param\">\t<span class=\"n\">sqlite_cache_db_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;enrichment_cache.sqlite3&#39;</span></span>)</span>"}, {"fullname": "src.user_config.PerformanceSettings.enable_caching", "modulename": "src.user_config", "qualname": "PerformanceSettings.enable_caching", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.PerformanceSettings.cache_ttl_seconds", "modulename": "src.user_config", "qualname": "PerformanceSettings.cache_ttl_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "300"}, {"fullname": "src.user_config.PerformanceSettings.max_cache_size", "modulename": "src.user_config", "qualname": "PerformanceSettings.max_cache_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1000"}, {"fullname": "src.user_config.PerformanceSettings.enable_connection_pooling", "modulename": "src.user_config", "qualname": "PerformanceSettings.enable_connection_pooling", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.PerformanceSettings.connection_pool_size", "modulename": "src.user_config", "qualname": "PerformanceSettings.connection_pool_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "10"}, {"fullname": "src.user_config.PerformanceSettings.request_timeout_seconds", "modulename": "src.user_config", "qualname": "PerformanceSettings.request_timeout_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "30"}, {"fullname": "src.user_config.PerformanceSettings.enable_sqlite_cache", "modulename": "src.user_config", "qualname": "PerformanceSettings.enable_sqlite_cache", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.PerformanceSettings.sqlite_cache_ttl_hours", "modulename": "src.user_config", "qualname": "PerformanceSettings.sqlite_cache_ttl_hours", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "24"}, {"fullname": "src.user_config.PerformanceSettings.sqlite_cache_db_name", "modulename": "src.user_config", "qualname": "PerformanceSettings.sqlite_cache_db_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;enrichment_cache.sqlite3&#x27;"}, {"fullname": "src.user_config.SecuritySettings", "modulename": "src.user_config", "qualname": "SecuritySettings", "kind": "class", "doc": "<p>User-configurable security settings.</p>\n\n<p>Attributes:\n    rate_limit_requests_per_minute: Rate limit for requests per minute\n    max_query_results: Maximum query results\n    enable_field_validation: Whether to enable field validation\n    allowed_field_patterns: Regex patterns for allowed fields\n    block_sensitive_fields: Whether to block sensitive fields\n    sensitive_field_patterns: Regex patterns for sensitive fields</p>\n"}, {"fullname": "src.user_config.SecuritySettings.__init__", "modulename": "src.user_config", "qualname": "SecuritySettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rate_limit_requests_per_minute</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>,</span><span class=\"param\">\t<span class=\"n\">max_query_results</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">enable_field_validation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">allowed_field_patterns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">block_sensitive_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">sensitive_field_patterns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "src.user_config.SecuritySettings.rate_limit_requests_per_minute", "modulename": "src.user_config", "qualname": "SecuritySettings.rate_limit_requests_per_minute", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "60"}, {"fullname": "src.user_config.SecuritySettings.max_query_results", "modulename": "src.user_config", "qualname": "SecuritySettings.max_query_results", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1000"}, {"fullname": "src.user_config.SecuritySettings.enable_field_validation", "modulename": "src.user_config", "qualname": "SecuritySettings.enable_field_validation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.SecuritySettings.allowed_field_patterns", "modulename": "src.user_config", "qualname": "SecuritySettings.allowed_field_patterns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.user_config.SecuritySettings.block_sensitive_fields", "modulename": "src.user_config", "qualname": "SecuritySettings.block_sensitive_fields", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.SecuritySettings.sensitive_field_patterns", "modulename": "src.user_config", "qualname": "SecuritySettings.sensitive_field_patterns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.user_config.LoggingSettings", "modulename": "src.user_config", "qualname": "LoggingSettings", "kind": "class", "doc": "<p>User-configurable logging settings.</p>\n\n<p>Attributes:\n    log_level: Logging level\n    log_format: Log format (json, text)\n    enable_query_logging: Whether to enable query logging\n    enable_performance_logging: Whether to enable performance logging\n    log_sensitive_data: Whether to log sensitive data\n    max_log_size_mb: Maximum log size in MB</p>\n"}, {"fullname": "src.user_config.LoggingSettings.__init__", "modulename": "src.user_config", "qualname": "LoggingSettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">log_level</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;INFO&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;json&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">enable_query_logging</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">enable_performance_logging</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">log_sensitive_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_log_size_mb</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span>)</span>"}, {"fullname": "src.user_config.LoggingSettings.log_level", "modulename": "src.user_config", "qualname": "LoggingSettings.log_level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;INFO&#x27;"}, {"fullname": "src.user_config.LoggingSettings.log_format", "modulename": "src.user_config", "qualname": "LoggingSettings.log_format", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;json&#x27;"}, {"fullname": "src.user_config.LoggingSettings.enable_query_logging", "modulename": "src.user_config", "qualname": "LoggingSettings.enable_query_logging", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.LoggingSettings.enable_performance_logging", "modulename": "src.user_config", "qualname": "LoggingSettings.enable_performance_logging", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.LoggingSettings.log_sensitive_data", "modulename": "src.user_config", "qualname": "LoggingSettings.log_sensitive_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.user_config.LoggingSettings.max_log_size_mb", "modulename": "src.user_config", "qualname": "LoggingSettings.max_log_size_mb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "100"}, {"fullname": "src.user_config.CampaignSettings", "modulename": "src.user_config", "qualname": "CampaignSettings", "kind": "class", "doc": "<p>User-configurable campaign analysis settings.</p>\n\n<p>Attributes:\n    correlation_window_minutes: Correlation window in minutes\n    min_confidence_threshold: Minimum confidence threshold\n    max_campaign_events: Maximum campaign events\n    enable_geospatial_correlation: Whether to enable geospatial correlation\n    enable_infrastructure_correlation: Whether to enable infrastructure correlation\n    enable_behavioral_correlation: Whether to enable behavioral correlation\n    enable_temporal_correlation: Whether to enable temporal correlation\n    enable_ip_correlation: Whether to enable IP correlation\n    max_expansion_depth: Maximum expansion depth\n    expansion_timeout_seconds: Expansion timeout in seconds</p>\n"}, {"fullname": "src.user_config.CampaignSettings.__init__", "modulename": "src.user_config", "qualname": "CampaignSettings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">correlation_window_minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">min_confidence_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span>,</span><span class=\"param\">\t<span class=\"n\">max_campaign_events</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>,</span><span class=\"param\">\t<span class=\"n\">enable_geospatial_correlation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">enable_infrastructure_correlation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">enable_behavioral_correlation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">enable_temporal_correlation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">enable_ip_correlation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">max_expansion_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">expansion_timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span></span>)</span>"}, {"fullname": "src.user_config.CampaignSettings.correlation_window_minutes", "modulename": "src.user_config", "qualname": "CampaignSettings.correlation_window_minutes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "30"}, {"fullname": "src.user_config.CampaignSettings.min_confidence_threshold", "modulename": "src.user_config", "qualname": "CampaignSettings.min_confidence_threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.7"}, {"fullname": "src.user_config.CampaignSettings.max_campaign_events", "modulename": "src.user_config", "qualname": "CampaignSettings.max_campaign_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "10000"}, {"fullname": "src.user_config.CampaignSettings.enable_geospatial_correlation", "modulename": "src.user_config", "qualname": "CampaignSettings.enable_geospatial_correlation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.CampaignSettings.enable_infrastructure_correlation", "modulename": "src.user_config", "qualname": "CampaignSettings.enable_infrastructure_correlation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.CampaignSettings.enable_behavioral_correlation", "modulename": "src.user_config", "qualname": "CampaignSettings.enable_behavioral_correlation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.CampaignSettings.enable_temporal_correlation", "modulename": "src.user_config", "qualname": "CampaignSettings.enable_temporal_correlation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.CampaignSettings.enable_ip_correlation", "modulename": "src.user_config", "qualname": "CampaignSettings.enable_ip_correlation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.user_config.CampaignSettings.max_expansion_depth", "modulename": "src.user_config", "qualname": "CampaignSettings.max_expansion_depth", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "3"}, {"fullname": "src.user_config.CampaignSettings.expansion_timeout_seconds", "modulename": "src.user_config", "qualname": "CampaignSettings.expansion_timeout_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "300"}, {"fullname": "src.user_config.UserConfigManager", "modulename": "src.user_config", "qualname": "UserConfigManager", "kind": "class", "doc": "<p>Manages user-configurable settings with validation and environment variable support.</p>\n\n<p>This class provides a comprehensive configuration management system that\nsupports multiple configuration sources with precedence ordering:</p>\n\n<ol>\n<li>Environment variables (highest priority)</li>\n<li>User configuration file</li>\n<li>Base configuration</li>\n<li>Default values (lowest priority)</li>\n</ol>\n\n<p>Attributes:\n    config_path: Path to the configuration file\n    op_secrets: OnePassword secrets manager\n    base_config: Base configuration dictionary\n    query_settings: Query-related settings\n    pagination_settings: Pagination-related settings\n    streaming_settings: Streaming-related settings\n    performance_settings: Performance-related settings\n    security_settings: Security-related settings\n    logging_settings: Logging-related settings\n    campaign_settings: Campaign analysis settings\n    output_directory: Directory for generated outputs (default: ~/dshield-mcp-output, configurable)</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>manager = UserConfigManager()\n      output_dir = manager.output_directory\n      print(output_dir)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "src.user_config.UserConfigManager.__init__", "modulename": "src.user_config", "qualname": "UserConfigManager.__init__", "kind": "function", "doc": "<p>Initialize the UserConfigManager.</p>\n\n<p>Args:\n    config_path: Optional path to the configuration file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.user_config.UserConfigManager.config_path", "modulename": "src.user_config", "qualname": "UserConfigManager.config_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.op_secrets", "modulename": "src.user_config", "qualname": "UserConfigManager.op_secrets", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.query_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.query_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.pagination_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.pagination_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.streaming_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.streaming_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.performance_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.performance_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.security_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.security_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.logging_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.logging_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.campaign_settings", "modulename": "src.user_config", "qualname": "UserConfigManager.campaign_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.output_directory", "modulename": "src.user_config", "qualname": "UserConfigManager.output_directory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.user_config.UserConfigManager.get_setting", "modulename": "src.user_config", "qualname": "UserConfigManager.get_setting", "kind": "function", "doc": "<p>Get a specific setting value.</p>\n\n<p>Args:\n    category: Setting category (query, pagination, streaming, etc.)\n    setting: Setting name within the category</p>\n\n<p>Returns:\n    Setting value</p>\n\n<p>Raises:\n    KeyError: If category or setting does not exist</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">setting</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.UserConfigManager.update_setting", "modulename": "src.user_config", "qualname": "UserConfigManager.update_setting", "kind": "function", "doc": "<p>Update a specific setting value.</p>\n\n<p>Args:\n    category: Setting category (query, pagination, streaming, etc.)\n    setting: Setting name within the category\n    value: New value for the setting</p>\n\n<p>Raises:\n    KeyError: If category or setting does not exist\n    ValueError: If value is invalid for the setting</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">setting</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.UserConfigManager.export_config", "modulename": "src.user_config", "qualname": "UserConfigManager.export_config", "kind": "function", "doc": "<p>Export current configuration as a dictionary.</p>\n\n<p>Returns:\n    Dictionary containing all current configuration settings</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.UserConfigManager.save_user_config", "modulename": "src.user_config", "qualname": "UserConfigManager.save_user_config", "kind": "function", "doc": "<p>Save current configuration to a file.</p>\n\n<p>Args:\n    file_path: Path to save the configuration file (default: auto-detected)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.UserConfigManager.get_environment_variables", "modulename": "src.user_config", "qualname": "UserConfigManager.get_environment_variables", "kind": "function", "doc": "<p>Get environment variables that can be used to override settings.</p>\n\n<p>Returns:\n    Dictionary mapping setting names to environment variable names</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.UserConfigManager.get_database_directory", "modulename": "src.user_config", "qualname": "UserConfigManager.get_database_directory", "kind": "function", "doc": "<p>Get the database directory path.</p>\n\n<p>Returns:\n    str: Path to the database directory (~/dshield-mcp-output/db)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.UserConfigManager.get_cache_database_path", "modulename": "src.user_config", "qualname": "UserConfigManager.get_cache_database_path", "kind": "function", "doc": "<p>Get the full path to the cache database file.</p>\n\n<p>Returns:\n    str: Full path to the cache database file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.get_user_config", "modulename": "src.user_config", "qualname": "get_user_config", "kind": "function", "doc": "<p>Get the global user configuration manager instance.</p>\n\n<p>Returns:\n    UserConfigManager: The global configuration manager instance</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">user_config</span><span class=\"o\">.</span><span class=\"n\">UserConfigManager</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.user_config.reset_user_config", "modulename": "src.user_config", "qualname": "reset_user_config", "kind": "function", "doc": "<p>Reset the global user configuration manager instance.</p>\n\n<p>This function clears the global configuration manager, forcing\na reload of configuration on the next get_user_config() call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();
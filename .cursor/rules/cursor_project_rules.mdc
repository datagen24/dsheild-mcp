---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
## Project Overview

*   **Type:** cursor_project_rules
*   **Description:** A Python-based DShield Monitoring and Control Platform (dsheild-mcp) that automates threat hunting, incident response, and security monitoring in a DShield SIEM environment. It provides advanced event correlation, IOC expansion, attack timeline reconstruction, pattern detection, campaign scoring, and rich PDF reporting via LaTeX.
*   **Primary Goal:** Automate the detection and analysis of coordinated attack campaigns.

## Project Structure

### Framework-Specific Routing

*   **Directory Rules:**

    *   N/A – this is a backend Python service without frontend routing conventions.
    *   All HTTP endpoints (MCP protocol) are defined in `mcp_server.py` and `src/*_tools.py` modules.

### Core Directories

*   **Versioned Structure:**

    *   `src/`: Python 3.8+ modules implementing core logic (analysis, clients, models).
    *   `tests/`: pytest-based unit and integration tests.
    *   `config/`: YAML configuration templates and `.env` examples.
    *   `docs/`: API documentation generated by pdoc/pydoc-markdown.
    *   `reports/`: LaTeX templates and generated PDF attack reports.

### Key Files

*   `mcp_server.py`: Main entry point; initializes aiohttp server, loads config, registers MCP tools.
*   `src/campaign_analyzer.py`: Core multi-stage correlation, IOC expansion, timeline building, scoring.
*   `src/elasticsearch_client.py`: AsyncElasticsearch integration with page- and cursor-based pagination, query optimization.
*   `src/dshield_client.py`: DShield API client with caching, rate limiting, and 1Password secret resolution.
*   `src/models.py`: Pydantic models for events, campaigns, reports—ensuring strict validation.
*   `src/config_loader.py`: Layered config management via PyYAML, python-dotenv, environment overrides.
*   `src/latex_template_tools.py`: Utilities for generating PDF reports from LaTeX templates.
*   `tests/conftest.py`: pytest fixtures for Elasticsearch and DShield API mocks.
*   `tests/test_campaign_analyzer.py`: Unit tests for correlation and scoring algorithms.

## Tech Stack Rules

*   **Version Enforcement:**

    *   `python@3.8+`: Use `async`/`await`, type hints; avoid blocking I/O calls.
    *   `aiohttp@3.x`: All HTTP handlers must be async; share a single `ClientSession`.
    *   `elasticsearch@7.x/8.x`: Pin to cluster version; use `AsyncElasticsearch` client only.
    *   `pydantic@1.x`: Define strict data models; employ `BaseSettings` for configuration.
    *   `pytest@6.x+` & `pytest-asyncio`: Async tests require `@pytest.mark.asyncio`; high coverage (>90%).

## PRD Compliance

*   “Success is defined by analysts receiving end-to-end campaign insights within 60 seconds on typical datasets, with zero exposure of sensitive API keys and no confusing setup steps.”\
    – All analysis pipelines must complete within 60 seconds under normal load; secrets resolved only via 1Password CLI.

## App Flow Integration

*   **MCP Server Flow:**\
    `mcp_server.py` → load `config/` → initialize `AsyncElasticsearch` & DShield clients → register tools via `src/dynamic_tool_registry.py`.
*   **analyze_campaign Flow:**\
    `src/campaign_analyzer.py` streams events (`stream_dshield_events_with_session_context`), runs correlation/expansion, returns JSON campaign object.
*   **Reporting Flow:**\
    `src/latex_template_tools.py` + `subprocess` → compile LaTeX template → output PDF in `reports/`.

## Best Practices

*   **Python 3.8+:**\
    • Use explicit type hints; prefer `asyncio.run` at top level.\
    • Enforce style with ruff; follow PEP8/PEP257.
*   **aiohttp:**\
    • Reuse a single `ClientSession`; handle timeouts/retries gracefully.
*   **AsyncElasticsearch:**\
    • Employ scroll or `search_after` for large result sets; close client on shutdown.
*   **structlog:**\
    • Log structured key/value events; standardize error and audit logs.
*   **pydantic:**\
    • Validate all external inputs; use `BaseSettings` for layered config.
*   **PyYAML & python-dotenv:**\
    • Keep secrets out of VCS; reference `op://` URLs only.
*   **asyncio:**\
    • Avoid nested event loops; manage concurrency with semaphores if needed.
*   **pathlib:**\
    • Use `Path` for file operations; avoid string-based paths.
*   **subprocess (LaTeX):**\
    • Validate templates before compile; capture and log stderr.
*   **datetime & python-dateutil:**\
    • Normalize to UTC; use timezone-aware objects.
*   **dataclasses & typing:**\
    • Favor Pydantic models for data validation; use dataclasses for transient structures.
*   **ipaddress & enum:**\
    • Validate IPs/networks; use enums for fixed choices and methods.
*   **networkx & scikit-learn:**\
    • Encapsulate graph/ML logic; fix random seeds for reproducibility.
*   **1Password CLI:**\
    • Pre-flight check on `op` availability; fail fast with clear error if missing.
*   **pytest & pytest-asyncio:**\
    • Use fixtures for setup/teardown; parametrize edge cases.
*   **GitHub Actions:**\
    • Cache dependencies; require lint and test success on PRs.
*   **LaTeX Distribution:**\
    • Ship minimal working template; test compilation in CI.
*   **Cursor & Claude Code:**\
    • Treat AI suggestions as drafts; always review and test before merge.

## Rules

*   Derive folder/file patterns directly from `techStackDoc` versions.
*   Enforce Python 3.8+ async conventions; no blocking I/O in core modules.
*   Never mix sync/async client patterns (`aiohttp`, `AsyncElasticsearch`).
*   Keep routing logic isolated to `mcp_server.py` and tool modules—no frontend routes.

## Rules Metrics

Before starting the project development, create a metrics file in the root of the project called `cursor_metrics.md`.

### Instructions:

*   Each time a cursor rule is used as context, update `cursor_metrics.md`.
*   Use the following format for `cursor_metrics.md`:

# Rules Metrics

## Usage

The number of times rules is used as context

*   rule-name.mdc: 5
*   another-rule.mdc: 2
*   ...other rules

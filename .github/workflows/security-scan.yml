name: MCP Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  workflow_dispatch:
    # Allow manual triggering

jobs:
  security-scan:
    name: MCP-Shield Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Install MCP-Shield
      run: npm install -g mcp-shield
        
    - name: Create MCP configuration for testing
      run: |
        mkdir -p .mcp
        cat > .mcp/dshield-mcp.json << EOF
        {
          "mcpServers": {
            "dshield-elastic-mcp": {
              "command": "python",
              "args": ["mcp_server.py"],
              "env": {
                "ELASTICSEARCH_URL": "https://test-elasticsearch:9200",
                "ELASTICSEARCH_USERNAME": "test",
                "ELASTICSEARCH_PASSWORD": "test"
              }
            }
          }
        }
        EOF
        
    - name: Run MCP-Shield security scan
      id: scan
      run: |
        # Run the scan with our Python integration script
        python scripts/security_scan.py \
          --config-path .mcp \
          --safe-list "dshield-elastic-mcp" \
          --output security-scan-results.json \
          --report security-scan-report.md
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          security-scan-results.json
          security-scan-report.md
        retention-days: 30
        
    - name: Parse scan results
      id: parse
      run: |
        if [ -f security-scan-results.json ]; then
          # Extract vulnerability count using jq
          VULN_COUNT=$(jq '.vulnerabilities | length' security-scan-results.json)
          echo "vulnerability_count=$VULN_COUNT" >> $GITHUB_OUTPUT
          
          # Extract high risk vulnerabilities
          HIGH_RISK=$(jq '.summary.high_risk_vulnerabilities' security-scan-results.json)
          echo "high_risk_count=$HIGH_RISK" >> $GITHUB_OUTPUT
          
          # Check if scan was successful
          EXIT_CODE=$(jq '.exit_code' security-scan-results.json)
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        else
          echo "vulnerability_count=0" >> $GITHUB_OUTPUT
          echo "high_risk_count=0" >> $GITHUB_OUTPUT
          echo "exit_code=1" >> $GITHUB_OUTPUT
        fi
        
    - name: Security scan summary
      run: |
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Vulnerabilities:** ${{ steps.parse.outputs.vulnerability_count }}" >> $GITHUB_STEP_SUMMARY
        echo "- **High Risk Vulnerabilities:** ${{ steps.parse.outputs.high_risk_count }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Scan Status:** ${{ steps.parse.outputs.exit_code == '0' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f security-scan-report.md ]; then
          echo "### Detailed Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          # Extract summary section from report
          sed -n '/^## Summary$/,/^## /p' security-scan-report.md | head -n -1 >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Comment on PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🔒 MCP Security Scan Results\n\n';
          
          try {
            const results = JSON.parse(fs.readFileSync('security-scan-results.json', 'utf8'));
            const summary = results.summary || {};
            
            comment += `### Summary\n`;
            comment += `- **Total Servers:** ${summary.total_servers || 0}\n`;
            comment += `- **Total Tools:** ${summary.total_tools || 0}\n`;
            comment += `- **Vulnerable Servers:** ${summary.vulnerable_servers || 0}\n`;
            comment += `- **Vulnerable Tools:** ${summary.vulnerable_tools || 0}\n`;
            comment += `- **High Risk:** ${summary.high_risk_vulnerabilities || 0}\n`;
            comment += `- **Medium Risk:** ${summary.medium_risk_vulnerabilities || 0}\n`;
            comment += `- **Low Risk:** ${summary.low_risk_vulnerabilities || 0}\n\n`;
            
            if (results.vulnerabilities && results.vulnerabilities.length > 0) {
              comment += `### ⚠️ Vulnerabilities Detected\n\n`;
              results.vulnerabilities.forEach((vuln, index) => {
                comment += `**${index + 1}. ${vuln.server} - ${vuln.tool}**\n`;
                comment += `- Risk Level: ${vuln.risk_level}\n`;
                if (vuln.issues && vuln.issues.length > 0) {
                  comment += `- Issues:\n`;
                  vuln.issues.forEach(issue => {
                    comment += `  - ${issue}\n`;
                  });
                }
                comment += `\n`;
              });
              
              comment += `### 🔧 Recommendations\n`;
              comment += `1. Review all identified vulnerabilities\n`;
              comment += `2. Remove or fix high-risk issues immediately\n`;
              comment += `3. Audit tool descriptions for hidden instructions\n`;
              comment += `4. Review parameter schemas for suspicious fields\n`;
              comment += `5. Implement security validation in tool registration\n\n`;
            } else {
              comment += `### ✅ No Vulnerabilities Detected\n\n`;
              comment += `The security scan found no vulnerabilities in the MCP server configuration.\n\n`;
            }
            
            comment += `📋 [View Full Report](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
            
          } catch (error) {
            comment += `❌ Error parsing security scan results: ${error.message}\n\n`;
            comment += `Please check the workflow logs for more details.`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: Fail on high-risk vulnerabilities
      if: steps.parse.outputs.high_risk_count != '0'
      run: |
        echo "❌ High-risk vulnerabilities detected! Security scan failed."
        echo "Please review and fix the identified security issues before merging."
        exit 1
        
    - name: Security scan passed
      if: steps.parse.outputs.high_risk_count == '0' && steps.parse.outputs.exit_code == '0'
      run: |
        echo "✅ Security scan passed - no high-risk vulnerabilities detected"
        
  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: security-scan
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Download security scan results
      uses: actions/download-artifact@v4
      with:
        name: security-scan-results
        
    - name: Run security validation tests
      run: |
        # Run any additional security validation tests
        python -m pytest tests/test_security.py -v
        
    - name: Security validation summary
      run: |
        echo "## Security Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Security validation tests completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Additional security checks:" >> $GITHUB_STEP_SUMMARY
        echo "- Tool description validation" >> $GITHUB_STEP_SUMMARY
        echo "- Parameter schema validation" >> $GITHUB_STEP_SUMMARY
        echo "- Input sanitization checks" >> $GITHUB_STEP_SUMMARY
        echo "- Error handling validation" >> $GITHUB_STEP_SUMMARY 
